using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using Client.Controls;
using Client.Envir;
using Client.Models;
using Client.UserModels;
using Library;
using Library.SystemModels;
using S = Library.Network.ServerPackets;
using C = Library.Network.ClientPackets;
using Font = System.Drawing.Font;


namespace Client.Scenes.Views
{
    public sealed class NPCDialog : DXWindow
    {
        #region Properties
        public static Regex R = new Regex(@"\[(?<Text>.*?):(?<ID>.+?)\]", RegexOptions.Compiled);

        public NPCPage Page;
        public DXLabel PageText;

        public List<DXLabel> Buttons = new List<DXLabel>();
        public bool Opened;

        public int _Leading;
        public Size _DefSize;

        public override void OnClientAreaChanged(Rectangle oValue, Rectangle nValue)
        {
            base.OnClientAreaChanged(oValue, nValue);


            if (PageText == null || IsResizing) return;

            PageText.Location = new Point(ClientArea.X + 10, ClientArea.Y + 10);
            PageText.Size = new Size(ClientArea.Width - 20, ClientArea.Height - 20);

            ProcessText();
        }

        public override void OnIsResizingChanged(bool oValue, bool nValue)
        {
            PageText.Location = new Point(ClientArea.X + 10, ClientArea.Y + 10);
            PageText.Size = new Size(ClientArea.Width - 20, ClientArea.Height - 20);

            ProcessText();


            base.OnIsResizingChanged(oValue, nValue);
        }

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            
            if (GameScene.Game.NPCGoodsBox != null && !IsVisible)
                GameScene.Game.NPCGoodsBox.Visible = false;
            
            if (GameScene.Game.NPCGGoodsBox != null && !IsVisible)
                GameScene.Game.NPCGGoodsBox.Visible = false;
            
            if (GameScene.Game.NPCYGoodsBox != null && !IsVisible)
                GameScene.Game.NPCYGoodsBox.Visible = false;

            
            if (GameScene.Game.NPCBaoshiduihuanBox != null && !IsVisible)
                GameScene.Game.NPCBaoshiduihuanBox.Visible = false;

            
            if (GameScene.Game.NPCFubenBiBox != null && !IsVisible)
                GameScene.Game.NPCFubenBiBox.Visible = false;

            
            if (GameScene.Game.NPCShenmiGoodsBox != null && !IsVisible)
                GameScene.Game.NPCShenmiGoodsBox.Visible = false;

            if (GameScene.Game.NPCSellBox != null && !IsVisible)
                GameScene.Game.NPCSellBox.Visible = false;
            
            if (GameScene.Game.NPCRepairBox != null && !IsVisible)
                GameScene.Game.NPCRepairBox.Visible = false;

            if (GameScene.Game.NPCRefinementStoneBox != null && !IsVisible)
                GameScene.Game.NPCRefinementStoneBox.Visible = false;

            if (GameScene.Game.NPCRefineBox != null && !IsVisible)
                GameScene.Game.NPCRefineBox.Visible = false;

            if (GameScene.Game.NPCRefineRetrieveBox != null && !IsVisible)
                GameScene.Game.NPCRefineRetrieveBox.Visible = false;

            if (GameScene.Game.NPCQuestBox != null && !IsVisible)
                GameScene.Game.NPCQuestBox.Visible = false;

            if (GameScene.Game.MeiriNPCQuestBox != null && !IsVisible)
                GameScene.Game.MeiriNPCQuestBox.Visible = false;

            if (GameScene.Game.NPCAdoptCompanionBox != null && !IsVisible)
                GameScene.Game.NPCAdoptCompanionBox.Visible = false;

            if (GameScene.Game.NPCCompanionStorageBox != null && !IsVisible)
                GameScene.Game.NPCCompanionStorageBox.Visible = false;

            if (GameScene.Game.NPCAdoptHorseBox != null && !base.IsVisible)
                GameScene.Game.NPCAdoptHorseBox.Visible = false;

            if (GameScene.Game.NPCHorseStorageBox != null && !base.IsVisible)
                GameScene.Game.NPCHorseStorageBox.Visible = false;

            if (GameScene.Game.NPCWeddingRingBox != null && !IsVisible)
                GameScene.Game.NPCWeddingRingBox.Visible = false;

            if (GameScene.Game.NPCMasterRefineBox != null && !IsVisible)
                GameScene.Game.NPCMasterRefineBox.Visible = false;


            if (GameScene.Game.NPCItemFragmentBox != null && !IsVisible)
                GameScene.Game.NPCItemFragmentBox.Visible = false;

            
            GameScene.Game.NPCShenmiGoodsBox.Visible = false;

            
            if (GameScene.Game.NPCItemZaixianFragmentBox != null && !IsVisible)
                GameScene.Game.NPCItemZaixianFragmentBox.Visible = false;

            
            if (GameScene.Game.NPCXiaohuiBox != null && !IsVisible)
                GameScene.Game.NPCXiaohuiBox.Visible = false;

            
            if (GameScene.Game.NPCBShechengBox != null && !IsVisible)
                GameScene.Game.NPCBShechengBox.Visible = false;

            
            if (GameScene.Game.NPCBSduihuanBox != null && !IsVisible)
                GameScene.Game.NPCBSduihuanBox.Visible = false;

            if (GameScene.Game.NPCAccessoryUpgradeBox != null && !IsVisible)
                GameScene.Game.NPCAccessoryUpgradeBox.Visible = false;

            if (GameScene.Game.NPCAccessoryLevelBox != null && !IsVisible)
                GameScene.Game.NPCAccessoryLevelBox.Visible = false;

            
            if (GameScene.Game.NPCDunUpgradeBox != null && !IsVisible)
                GameScene.Game.NPCDunUpgradeBox.Visible = false;
            
            if (GameScene.Game.NPCDunLevelBox != null && !IsVisible)
                GameScene.Game.NPCDunLevelBox.Visible = false;

            
            if (GameScene.Game.NPCHuiUpgradeBox != null && !IsVisible)
                GameScene.Game.NPCHuiUpgradeBox.Visible = false;
            
            if (GameScene.Game.NPCHuiLevelBox != null && !IsVisible)
                GameScene.Game.NPCHuiLevelBox.Visible = false;
            
            if (GameScene.Game.NPCMingwenBox != null && !IsVisible)
                GameScene.Game.NPCMingwenBox.Visible = false;

            if (GameScene.Game.NPCZhongziBox != null && !IsVisible)
                GameScene.Game.NPCZhongziBox.Visible = false;

            if (GameScene.Game.NPCGZLKaikongBox != null && !IsVisible)
                GameScene.Game.NPCGZLKaikongBox.Visible = false;

            if (GameScene.Game.NPCGZLBKaikongBox != null && !IsVisible)
                GameScene.Game.NPCGZLBKaikongBox.Visible = false;

            if (GameScene.Game.NPCQTKaikongBox != null && !IsVisible)
                GameScene.Game.NPCQTKaikongBox.Visible = false;

            if (GameScene.Game.NPCXiangKanGJSTBox != null && !IsVisible)
                GameScene.Game.NPCXiangKanGJSTBox.Visible = false;

            if (GameScene.Game.NPCXiangKanGJBSTBox != null && !IsVisible)
                GameScene.Game.NPCXiangKanGJBSTBox.Visible = false;

            if (GameScene.Game.NPCXiangKanZRSTBox != null && !IsVisible)
                GameScene.Game.NPCXiangKanZRSTBox.Visible = false;

            if (GameScene.Game.NPCXiangKanZRBSTBox != null && !IsVisible)
                GameScene.Game.NPCXiangKanZRBSTBox.Visible = false;

            if (GameScene.Game.NPCXiangKanLHSTBox != null && !IsVisible)
                GameScene.Game.NPCXiangKanLHSTBox.Visible = false;

            if (GameScene.Game.NPCXiangKanLHBSTBox != null && !IsVisible)
                GameScene.Game.NPCXiangKanLHBSTBox.Visible = false;

            if (GameScene.Game.NPCXiangKanSMSTBox != null && !IsVisible)
                GameScene.Game.NPCXiangKanSMSTBox.Visible = false;

            if (GameScene.Game.NPCXiangKanMFSTBox != null && !IsVisible)
                GameScene.Game.NPCXiangKanMFSTBox.Visible = false;

            if (GameScene.Game.NPCXiangKanSDSTBox != null && !IsVisible)
                GameScene.Game.NPCXiangKanSDSTBox.Visible = false;

            if (GameScene.Game.NPCXiangKanFYSTBox != null && !IsVisible)
                GameScene.Game.NPCXiangKanFYSTBox.Visible = false;

            if (GameScene.Game.NPCXiangKanMYSTBox != null && !IsVisible)
                GameScene.Game.NPCXiangKanMYSTBox.Visible = false;

            
            if (GameScene.Game.NPCXiangKanjinglianBox != null && !IsVisible)
                GameScene.Game.NPCXiangKanjinglianBox.Visible = false;

            
            if (GameScene.Game.NPCHuanhuaBox != null && !IsVisible)
                GameScene.Game.NPCHuanhuaBox.Visible = false;

            if (GameScene.Game.NPCChaichustBox != null && !IsVisible)
                GameScene.Game.NPCChaichustBox.Visible = false;

            if (GameScene.Game.NPCXiangkanjystbox != null && !IsVisible)
                GameScene.Game.NPCXiangkanjystbox.Visible = false;

            if (GameScene.Game.NPCXiangkanxxstbox != null && !IsVisible)
                GameScene.Game.NPCXiangkanxxstbox.Visible = false;

            if (GameScene.Game.NPCXiangKanghuobox != null && !IsVisible)
                GameScene.Game.NPCXiangKanghuobox.Visible = false;

            if (GameScene.Game.NPCXiangKangbingbox != null && !IsVisible)
                GameScene.Game.NPCXiangKangbingbox.Visible = false;

            if (GameScene.Game.NPCXiangKangleibox != null && !IsVisible)
                GameScene.Game.NPCXiangKangleibox.Visible = false;

            if (GameScene.Game.NPCXiangKangfengbox != null && !IsVisible)
                GameScene.Game.NPCXiangKangfengbox.Visible = false;

            if (GameScene.Game.NPCXiangKangshenbox != null && !IsVisible)
                GameScene.Game.NPCXiangKangshenbox.Visible = false;

            if (GameScene.Game.NPCXiangKanganbox != null && !IsVisible)
                GameScene.Game.NPCXiangKanganbox.Visible = false;

            if (GameScene.Game.NPCXiangKanghuanbox != null && !IsVisible)
                GameScene.Game.NPCXiangKanghuanbox.Visible = false;

            if (GameScene.Game.NPCXiangKanmofadunbox != null && !IsVisible)
                GameScene.Game.NPCXiangKanmofadunbox.Visible = false;

            if (GameScene.Game.NPCXiangKanbingdongbox != null && !IsVisible)
                GameScene.Game.NPCXiangKanbingdongbox.Visible = false;

            if (GameScene.Game.NPCXiangKanmabibox != null && !IsVisible)
                GameScene.Game.NPCXiangKanmabibox.Visible = false;

            if (GameScene.Game.NPCXiangKanyidongbox != null && !IsVisible)
                GameScene.Game.NPCXiangKanyidongbox.Visible = false;

            if (GameScene.Game.NPCXiangKanchenmobox != null && !IsVisible)
                GameScene.Game.NPCXiangKanchenmobox.Visible = false;

            if (GameScene.Game.NPCXiangKangedangbox != null && !IsVisible)
                GameScene.Game.NPCXiangKangedangbox.Visible = false;

            if (GameScene.Game.NPCXiangKanduobibox != null && !IsVisible)
                GameScene.Game.NPCXiangKanduobibox.Visible = false;

            if (GameScene.Game.NPCXiangKanqhuobox != null && !IsVisible)
                GameScene.Game.NPCXiangKanqhuobox.Visible = false;

            if (GameScene.Game.NPCXiangKanqbingbox != null && !IsVisible)
                GameScene.Game.NPCXiangKanqbingbox.Visible = false;

            if (GameScene.Game.NPCXiangKanqleibox != null && !IsVisible)
                GameScene.Game.NPCXiangKanqleibox.Visible = false;

            if (GameScene.Game.NPCXiangKanqfengbox != null && !IsVisible)
                GameScene.Game.NPCXiangKanqfengbox.Visible = false;

            if (GameScene.Game.NPCXiangKanqshenbox != null && !IsVisible)
                GameScene.Game.NPCXiangKanqshenbox.Visible = false;

            if (GameScene.Game.NPCXiangKanqanbox != null && !IsVisible)
                GameScene.Game.NPCXiangKanqanbox.Visible = false;

            if (GameScene.Game.NPCXiangKanqhuanbox != null && !IsVisible)
                GameScene.Game.NPCXiangKanqhuanbox.Visible = false;

            if (GameScene.Game.NPCXiangKanlvdubox != null && !IsVisible)
                GameScene.Game.NPCXiangKanlvdubox.Visible = false;

            if (GameScene.Game.NPCXiangKanzymbox != null && !IsVisible)
                GameScene.Game.NPCXiangKanzymbox.Visible = false;

            if (GameScene.Game.NPCXiangKanmhhfbox != null && !IsVisible)
                GameScene.Game.NPCXiangKanmhhfbox.Visible = false;

            if (GameScene.Game.NPCAccessoryResetBox != null && !IsVisible)
                GameScene.Game.NPCAccessoryResetBox.Visible = false;
            
            if (GameScene.Game.NPCDunResetBox != null && !IsVisible)
                GameScene.Game.NPCDunResetBox.Visible = false;
            
            if (GameScene.Game.NPCHuiResetBox != null && !IsVisible)
                GameScene.Game.NPCHuiResetBox.Visible = false;

            if (GameScene.Game.NPCWeaponCraftBox != null && !IsVisible)
                GameScene.Game.NPCWeaponCraftBox.Visible = false;

            
            if (GameScene.Game.NPCCDkey01Box != null && !IsVisible)
                GameScene.Game.NPCCDkey01Box.Visible = false;

            
            if (GameScene.Game.NPCCDkey02Box != null && !IsVisible)
                GameScene.Game.NPCCDkey02Box.Visible = false;

            
            if (GameScene.Game.NPCCDkey03Box != null && !IsVisible)
                GameScene.Game.NPCCDkey03Box.Visible = false;

            
            if (GameScene.Game.NPCJyhuishouBox != null && !IsVisible)
                GameScene.Game.NPCJyhuishouBox.Visible = false;

            
            if (GameScene.Game.NPCGuildhuishouBox != null && !IsVisible)
                GameScene.Game.NPCGuildhuishouBox.Visible = false;


            if (Opened)
            {
                GameScene.Game.NPCID = 0;
                Opened = false;
                CEnvir.Enqueue(new C.NPCClose());
            }


            if (IsVisible)
            {
                if (GameScene.Game.CharacterBox.Location.X < Size.Width)
                    GameScene.Game.CharacterBox.Location = new Point(Size.Width, 0);

                GameScene.Game.StorageBox.Location = new Point(GameScene.Game.Size.Width - GameScene.Game.StorageBox.Size.Width, GameScene.Game.InventoryBox.Size.Height);
            }
            else if (GameScene.Game.CharacterBox.Location.X == Size.Width)
            {
                GameScene.Game.CharacterBox.ApplySettings();
                GameScene.Game.StorageBox.ApplySettings();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCDialog()
        {
            
            TitleLabel.Text = string.Empty;
            HasFooter = false;
            Movable = false;
            SetClientSize(new Size(492, 259)); 
            

            DXImageControl BgImage = new DXImageControl()
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 378,
                Location = new Point(0, 29),
                Parent = this,
            };

            PageText = new DXLabel
            {
                AutoSize = false,
                Outline = false,
                DrawFormat = TextFormatFlags.WordEllipsis,
                Parent = this,
                ForeColour = Color.White,
                Location = new Point(ClientArea.X + 10, ClientArea.Y + 20),
                Size = new Size(ClientArea.Width - 20, ClientArea.Height - 20),
            };
            _DefSize = TextRenderer.MeasureText(DXManager.Graphics, "A", PageText.Font, new Size(PageText.Size.Width, 9999), PageText.DrawFormat);
            _Leading = _DefSize.Width - (TextRenderer.MeasureText(DXManager.Graphics, "AA", PageText.Font, new Size(PageText.Size.Width, 9999), PageText.DrawFormat).Width - _DefSize.Width);
        }

        #region Methods
        public void Response(S.NPCResponse info)
        {
            GameScene.Game.NPCID = info.ObjectID;
            GameScene.Game.NPCBox.Visible = true;

            info.Page.Say = info.Page.Say.Replace('(', '[').Replace(')', ']').Replace('【', '[');

            Page = info.Page;

            foreach (MapObject mapObject in GameScene.Game.MapControl.Objects)
            {
                if (mapObject.Race == ObjectType.NPC && (int)mapObject.ObjectID == (int)info.ObjectID)
                {
                    TitleLabel.Text = ((NPCObject)mapObject).NPCInfo.NPCName;
                    break;
                }
            }


            
            PageText.Text = R.Replace(Page.Say, @"${Text}");

            int height = DXLabel.GetHeight(PageText, ClientArea.Width).Height;
            if (height > ClientArea.Height)
                SetClientSize(new Size(ClientArea.Width, height));


            ProcessText();

            Opened = true;

            
            GameScene.Game.NPCGoodsBox.Visible = false;
            
            GameScene.Game.NPCGGoodsBox.Visible = false;
            
            GameScene.Game.NPCYGoodsBox.Visible = false;
            
            GameScene.Game.NPCBaoshiduihuanBox.Visible = false;
            
            GameScene.Game.NPCFubenBiBox.Visible = false;
            GameScene.Game.NPCSellBox.Visible = false;
            GameScene.Game.NPCRepairBox.Visible = false;
            GameScene.Game.NPCRefineBox.Visible = false;
            GameScene.Game.NPCRefinementStoneBox.Visible = false;
            GameScene.Game.NPCRefineRetrieveBox.Visible = false;
            GameScene.Game.NPCAdoptCompanionBox.Visible = false;
            GameScene.Game.NPCCompanionStorageBox.Visible = false;
            GameScene.Game.NPCWeddingRingBox.Visible = false;
            GameScene.Game.NPCItemFragmentBox.Visible = false;
            
            GameScene.Game.NPCItemZaixianFragmentBox.Visible = false;
            
            GameScene.Game.NPCXiaohuiBox.Visible = false;
            
            GameScene.Game.NPCBShechengBox.Visible = false;
            
            GameScene.Game.NPCBSduihuanBox.Visible = false;
            GameScene.Game.NPCAccessoryUpgradeBox.Visible = false;
            GameScene.Game.NPCAccessoryLevelBox.Visible = false;
            
            GameScene.Game.NPCDunUpgradeBox.Visible = false;
            GameScene.Game.NPCDunLevelBox.Visible = false;
            
            GameScene.Game.NPCHuiUpgradeBox.Visible = false;
            GameScene.Game.NPCHuiLevelBox.Visible = false;
            
            GameScene.Game.NPCMingwenBox.Visible = false;
            
            GameScene.Game.NPCZhongziBox.Visible = false;
            GameScene.Game.NPCGZLKaikongBox.Visible = false;
            GameScene.Game.NPCGZLBKaikongBox.Visible = false;
            GameScene.Game.NPCQTKaikongBox.Visible = false;
            GameScene.Game.NPCXiangKanGJSTBox.Visible = false;
            GameScene.Game.NPCXiangKanGJBSTBox.Visible = false;
            GameScene.Game.NPCXiangKanZRSTBox.Visible = false;
            GameScene.Game.NPCXiangKanZRBSTBox.Visible = false;
            GameScene.Game.NPCXiangKanLHSTBox.Visible = false;
            GameScene.Game.NPCXiangKanLHBSTBox.Visible = false;
            GameScene.Game.NPCXiangKanSMSTBox.Visible = false;
            GameScene.Game.NPCXiangKanMFSTBox.Visible = false;
            GameScene.Game.NPCXiangKanSDSTBox.Visible = false;
            GameScene.Game.NPCXiangKanFYSTBox.Visible = false;
            GameScene.Game.NPCXiangKanMYSTBox.Visible = false;
            
            GameScene.Game.NPCXiangKanjinglianBox.Visible = false;
            
            GameScene.Game.NPCHuanhuaBox.Visible = false;

            GameScene.Game.NPCChaichustBox.Visible = false;
            GameScene.Game.NPCXiangkanjystbox.Visible = false;
            GameScene.Game.NPCXiangkanxxstbox.Visible = false;
            GameScene.Game.NPCXiangKanghuobox.Visible = false;
            GameScene.Game.NPCXiangKangbingbox.Visible = false;
            GameScene.Game.NPCXiangKangleibox.Visible = false;
            GameScene.Game.NPCXiangKangfengbox.Visible = false;
            GameScene.Game.NPCXiangKangshenbox.Visible = false;
            GameScene.Game.NPCXiangKanganbox.Visible = false;
            GameScene.Game.NPCXiangKanghuanbox.Visible = false;
            GameScene.Game.NPCXiangKanmofadunbox.Visible = false;
            GameScene.Game.NPCXiangKanbingdongbox.Visible = false;
            GameScene.Game.NPCXiangKanmabibox.Visible = false;
            GameScene.Game.NPCXiangKanyidongbox.Visible = false;
            GameScene.Game.NPCXiangKanchenmobox.Visible = false;
            GameScene.Game.NPCXiangKangedangbox.Visible = false;
            GameScene.Game.NPCXiangKanduobibox.Visible = false;
            GameScene.Game.NPCXiangKanqhuobox.Visible = false;
            GameScene.Game.NPCXiangKanqbingbox.Visible = false;
            GameScene.Game.NPCXiangKanqleibox.Visible = false;
            GameScene.Game.NPCXiangKanqfengbox.Visible = false;
            GameScene.Game.NPCXiangKanqshenbox.Visible = false;
            GameScene.Game.NPCXiangKanqanbox.Visible = false;
            GameScene.Game.NPCXiangKanqhuanbox.Visible = false;
            GameScene.Game.NPCXiangKanlvdubox.Visible = false;
            GameScene.Game.NPCXiangKanzymbox.Visible = false;
            GameScene.Game.NPCXiangKanmhhfbox.Visible = false;
            GameScene.Game.NPCMasterRefineBox.Visible = false;
            GameScene.Game.NPCAccessoryResetBox.Visible = false;
            
            GameScene.Game.NPCDunResetBox.Visible = false;
            
            GameScene.Game.NPCHuiResetBox.Visible = false;
            GameScene.Game.NPCWeaponCraftBox.Visible = false;
            
            GameScene.Game.NPCCDkey01Box.Visible = false;
            
            GameScene.Game.NPCCDkey02Box.Visible = false;
            
            GameScene.Game.NPCCDkey03Box.Visible = false;
            
            GameScene.Game.NPCJyhuishouBox.Visible = false;
            
            GameScene.Game.NPCGuildhuishouBox.Visible = false;
            GameScene.Game.NPCAdoptHorseBox.Visible = false;
            GameScene.Game.NPCHorseStorageBox.Visible = false;

            switch (info.Page.DialogType)
            {
                case NPCDialogType.None:
                    break;
                
                case NPCDialogType.BuySell:
                    GameScene.Game.NPCGoodsBox.Location = new Point(0, Size.Height);
                    GameScene.Game.NPCGoodsBox.Visible = Page.Goods.Count > 0;
                    GameScene.Game.NPCGoodsBox.NewGoods(Page.Goods);
                    GameScene.Game.NPCSellBox.Visible = Page.Types.Count > 0;
                    GameScene.Game.NPCSellBox.Location = GameScene.Game.NPCGoodsBox.Visible ? new Point(Size.Width - GameScene.Game.NPCSellBox.Size.Width, Size.Height) : new Point(0, Size.Height);
                    break;
                
                case NPCDialogType.BuyGSell:
                    GameScene.Game.NPCGGoodsBox.Location = new Point(0, Size.Height);
                    GameScene.Game.NPCGGoodsBox.Visible = Page.Goods.Count > 0;
                    GameScene.Game.NPCGGoodsBox.NewGoods(Page.Goods);
                    break;
                
                case NPCDialogType.BuyYSell:
                    GameScene.Game.NPCYGoodsBox.Location = new Point(0, Size.Height);
                    GameScene.Game.NPCYGoodsBox.Visible = Page.Goods.Count > 0;
                    GameScene.Game.NPCYGoodsBox.NewGoods(Page.Goods);
                    break;
                
                case NPCDialogType.ShenmiShangren:
                    GameScene.Game.NPCShenmiGoodsBox.Location = new Point(0, Size.Height);
                    GameScene.Game.NPCShenmiGoodsBox.Visible = Page.Goods.Count > 0;
                    GameScene.Game.NPCShenmiGoodsBox.NewGoods(Page.Goods);
                    break;
                
                case NPCDialogType.BuyBaoshi:
                    GameScene.Game.NPCBaoshiduihuanBox.Location = new Point(0, Size.Height);
                    GameScene.Game.NPCBaoshiduihuanBox.Visible = Page.Goods.Count > 0;
                    GameScene.Game.NPCBaoshiduihuanBox.NewGoods(Page.Goods);
                    break;
                
                case NPCDialogType.FubenBiBuy:
                    GameScene.Game.NPCFubenBiBox.Location = new Point(0, Size.Height);
                    GameScene.Game.NPCFubenBiBox.Visible = Page.Goods.Count > 0;
                    GameScene.Game.NPCFubenBiBox.NewGoods(Page.Goods);
                    break;
                case NPCDialogType.Repair:
                    GameScene.Game.NPCRepairBox.Visible = true;
                    GameScene.Game.NPCRepairBox.Location = new Point(0, Size.Height);
                    break;
                case NPCDialogType.RefinementStone:
                    GameScene.Game.NPCRefinementStoneBox.Visible = true;
                    GameScene.Game.NPCRefinementStoneBox.Location = new Point(Size.Width - GameScene.Game.NPCRefinementStoneBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.Refine:
                    GameScene.Game.NPCRefineBox.Visible = true;
                    GameScene.Game.NPCRefineBox.Location = new Point(Size.Width - GameScene.Game.NPCRefineBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.MasterRefine:
                    GameScene.Game.NPCMasterRefineBox.Visible = true;
                    GameScene.Game.NPCMasterRefineBox.Location = new Point(Size.Width - GameScene.Game.NPCRefineBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.RefineRetrieve:
                    GameScene.Game.NPCRefineRetrieveBox.Location = new Point(0, Size.Height);
                    GameScene.Game.NPCRefineRetrieveBox.Visible = true;
                    GameScene.Game.NPCRefineRetrieveBox.RefreshList();
                    break;
                case NPCDialogType.CompanionManage:
                    GameScene.Game.NPCCompanionStorageBox.Visible = true;
                    GameScene.Game.NPCCompanionStorageBox.Location = new Point(0, Size.Height);
                    GameScene.Game.NPCAdoptCompanionBox.Visible = true;
                    GameScene.Game.NPCAdoptCompanionBox.Location = new Point(Size.Width - GameScene.Game.NPCAdoptCompanionBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.HorseManage:
                    GameScene.Game.NPCHorseStorageBox.Visible = true;
                    GameScene.Game.NPCHorseStorageBox.Location = new Point(0, Size.Height);
                    GameScene.Game.NPCAdoptHorseBox.Visible = true;
                    GameScene.Game.NPCAdoptHorseBox.Location = new Point(Size.Width - GameScene.Game.NPCAdoptHorseBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.WeddingRing:
                    GameScene.Game.NPCWeddingRingBox.Visible = true;
                    GameScene.Game.NPCWeddingRingBox.Location = new Point(Size.Width - GameScene.Game.NPCWeddingRingBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.ItemFragment:
                    GameScene.Game.NPCItemFragmentBox.Visible = true;
                    GameScene.Game.NPCItemFragmentBox.Location = new Point(Size.Width - GameScene.Game.NPCItemFragmentBox.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.ZaixianItemFragment:
                    GameScene.Game.NPCItemZaixianFragmentBox.Visible = true;
                    GameScene.Game.NPCItemZaixianFragmentBox.Location = new Point(Size.Width - GameScene.Game.NPCItemZaixianFragmentBox.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.Xiaohui:
                    GameScene.Game.NPCXiaohuiBox.Visible = true;
                    GameScene.Game.NPCXiaohuiBox.Location = new Point(Size.Width - GameScene.Game.NPCXiaohuiBox.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.NPChechengbaoshi:
                    GameScene.Game.NPCBShechengBox.Visible = true;
                    GameScene.Game.NPCBShechengBox.Location = new Point(Size.Width - GameScene.Game.NPCBShechengBox.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.NPCduihuanbaoshi:
                    GameScene.Game.NPCBSduihuanBox.Visible = true;
                    GameScene.Game.NPCBSduihuanBox.Location = new Point(Size.Width - GameScene.Game.NPCBSduihuanBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.AccessoryRefineUpgrade:
                    GameScene.Game.NPCAccessoryUpgradeBox.Visible = true;
                    GameScene.Game.NPCAccessoryUpgradeBox.Location = new Point(Size.Width - GameScene.Game.NPCAccessoryUpgradeBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.AccessoryRefineLevel:
                    GameScene.Game.NPCAccessoryLevelBox.Visible = true;
                    GameScene.Game.NPCAccessoryLevelBox.Location = new Point(Size.Width - GameScene.Game.NPCAccessoryLevelBox.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.DunRefineUpgrade:
                    GameScene.Game.NPCDunUpgradeBox.Visible = true;
                    GameScene.Game.NPCDunUpgradeBox.Location = new Point(Size.Width - GameScene.Game.NPCDunUpgradeBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.DunRefineLevel:
                    GameScene.Game.NPCDunLevelBox.Visible = true;
                    GameScene.Game.NPCDunLevelBox.Location = new Point(Size.Width - GameScene.Game.NPCDunLevelBox.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.HuiRefineUpgrade:
                    GameScene.Game.NPCHuiUpgradeBox.Visible = true;
                    GameScene.Game.NPCHuiUpgradeBox.Location = new Point(Size.Width - GameScene.Game.NPCHuiUpgradeBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.HuiRefineLevel:
                    GameScene.Game.NPCHuiLevelBox.Visible = true;
                    GameScene.Game.NPCHuiLevelBox.Location = new Point(Size.Width - GameScene.Game.NPCHuiLevelBox.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.Mingwen:
                    GameScene.Game.NPCMingwenBox.Visible = true;
                    GameScene.Game.NPCMingwenBox.Location = new Point(Size.Width - GameScene.Game.NPCMingwenBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.Zhongzi:
                    GameScene.Game.NPCZhongziBox.Visible = true;
                    GameScene.Game.NPCZhongziBox.Location = new Point(Size.Width - GameScene.Game.NPCZhongziBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.GZLKaikong:
                    GameScene.Game.NPCGZLKaikongBox.Visible = true;
                    GameScene.Game.NPCGZLKaikongBox.Location = new Point(Size.Width - GameScene.Game.NPCGZLKaikongBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.GZLBKaikong:
                    GameScene.Game.NPCGZLBKaikongBox.Visible = true;
                    GameScene.Game.NPCGZLBKaikongBox.Location = new Point(Size.Width - GameScene.Game.NPCGZLBKaikongBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.QTKaikong:
                    GameScene.Game.NPCQTKaikongBox.Visible = true;
                    GameScene.Game.NPCQTKaikongBox.Location = new Point(Size.Width - GameScene.Game.NPCQTKaikongBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanGJST:
                    GameScene.Game.NPCXiangKanGJSTBox.Visible = true;
                    GameScene.Game.NPCXiangKanGJSTBox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanGJSTBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanGJBST:
                    GameScene.Game.NPCXiangKanGJBSTBox.Visible = true;
                    GameScene.Game.NPCXiangKanGJBSTBox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanGJBSTBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanZRST:
                    GameScene.Game.NPCXiangKanZRSTBox.Visible = true;
                    GameScene.Game.NPCXiangKanZRSTBox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanZRSTBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanZRBST:
                    GameScene.Game.NPCXiangKanZRBSTBox.Visible = true;
                    GameScene.Game.NPCXiangKanZRBSTBox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanZRBSTBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanLHST:
                    GameScene.Game.NPCXiangKanLHSTBox.Visible = true;
                    GameScene.Game.NPCXiangKanLHSTBox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanLHSTBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanLHBST:
                    GameScene.Game.NPCXiangKanLHBSTBox.Visible = true;
                    GameScene.Game.NPCXiangKanLHBSTBox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanLHBSTBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanSMST:
                    GameScene.Game.NPCXiangKanSMSTBox.Visible = true;
                    GameScene.Game.NPCXiangKanSMSTBox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanSMSTBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanMFST:
                    GameScene.Game.NPCXiangKanMFSTBox.Visible = true;
                    GameScene.Game.NPCXiangKanMFSTBox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanMFSTBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanSDST:
                    GameScene.Game.NPCXiangKanSDSTBox.Visible = true;
                    GameScene.Game.NPCXiangKanSDSTBox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanSDSTBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanFYST:
                    GameScene.Game.NPCXiangKanFYSTBox.Visible = true;
                    GameScene.Game.NPCXiangKanFYSTBox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanFYSTBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanMYST:
                    GameScene.Game.NPCXiangKanMYSTBox.Visible = true;
                    GameScene.Game.NPCXiangKanMYSTBox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanMYSTBox.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.XiangKanjinglian:
                    GameScene.Game.NPCXiangKanjinglianBox.Visible = true;
                    GameScene.Game.NPCXiangKanjinglianBox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanjinglianBox.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.Huanhua:
                    GameScene.Game.NPCHuanhuaBox.Visible = true;
                    GameScene.Game.NPCHuanhuaBox.Location = new Point(Size.Width - GameScene.Game.NPCHuanhuaBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.Chaichust:
                    GameScene.Game.NPCChaichustBox.Visible = true;
                    GameScene.Game.NPCChaichustBox.Location = new Point(Size.Width - GameScene.Game.NPCChaichustBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.Xiangkanjyst:
                    GameScene.Game.NPCXiangkanjystbox.Visible = true;
                    GameScene.Game.NPCXiangkanjystbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangkanjystbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.Xiangkanxxst:
                    GameScene.Game.NPCXiangkanxxstbox.Visible = true;
                    GameScene.Game.NPCXiangkanxxstbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangkanxxstbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanghuo:
                    GameScene.Game.NPCXiangKanghuobox.Visible = true;
                    GameScene.Game.NPCXiangKanghuobox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanghuobox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKangbing:
                    GameScene.Game.NPCXiangKangbingbox.Visible = true;
                    GameScene.Game.NPCXiangKangbingbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKangbingbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanglei:
                    GameScene.Game.NPCXiangKangleibox.Visible = true;
                    GameScene.Game.NPCXiangKangleibox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKangleibox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKangfeng:
                    GameScene.Game.NPCXiangKangfengbox.Visible = true;
                    GameScene.Game.NPCXiangKangfengbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKangfengbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKangshen:
                    GameScene.Game.NPCXiangKangshenbox.Visible = true;
                    GameScene.Game.NPCXiangKangshenbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKangshenbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKangan:
                    GameScene.Game.NPCXiangKanganbox.Visible = true;
                    GameScene.Game.NPCXiangKanganbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanganbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanghuan:
                    GameScene.Game.NPCXiangKanghuanbox.Visible = true;
                    GameScene.Game.NPCXiangKanghuanbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanghuanbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanmofadun:
                    GameScene.Game.NPCXiangKanmofadunbox.Visible = true;
                    GameScene.Game.NPCXiangKanmofadunbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanmofadunbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanbingdong:
                    GameScene.Game.NPCXiangKanbingdongbox.Visible = true;
                    GameScene.Game.NPCXiangKanbingdongbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanbingdongbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanmabi:
                    GameScene.Game.NPCXiangKanmabibox.Visible = true;
                    GameScene.Game.NPCXiangKanmabibox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanmabibox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanyidong:
                    GameScene.Game.NPCXiangKanyidongbox.Visible = true;
                    GameScene.Game.NPCXiangKanyidongbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanyidongbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanchenmo:
                    GameScene.Game.NPCXiangKanchenmobox.Visible = true;
                    GameScene.Game.NPCXiangKanchenmobox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanchenmobox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKangedang:
                    GameScene.Game.NPCXiangKangedangbox.Visible = true;
                    GameScene.Game.NPCXiangKangedangbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKangedangbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanduobi:
                    GameScene.Game.NPCXiangKanduobibox.Visible = true;
                    GameScene.Game.NPCXiangKanduobibox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanduobibox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanqhuo:
                    GameScene.Game.NPCXiangKanqhuobox.Visible = true;
                    GameScene.Game.NPCXiangKanqhuobox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanqhuobox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanqbing:
                    GameScene.Game.NPCXiangKanqbingbox.Visible = true;
                    GameScene.Game.NPCXiangKanqbingbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanqbingbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanqlei:
                    GameScene.Game.NPCXiangKanqleibox.Visible = true;
                    GameScene.Game.NPCXiangKanqleibox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanqleibox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanqfeng:
                    GameScene.Game.NPCXiangKanqfengbox.Visible = true;
                    GameScene.Game.NPCXiangKanqfengbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanqfengbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanqshen:
                    GameScene.Game.NPCXiangKanqshenbox.Visible = true;
                    GameScene.Game.NPCXiangKanqshenbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanqshenbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanqan:
                    GameScene.Game.NPCXiangKanqanbox.Visible = true;
                    GameScene.Game.NPCXiangKanqanbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanqanbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanqhuan:
                    GameScene.Game.NPCXiangKanqhuanbox.Visible = true;
                    GameScene.Game.NPCXiangKanqhuanbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanqhuanbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanlvdu:
                    GameScene.Game.NPCXiangKanlvdubox.Visible = true;
                    GameScene.Game.NPCXiangKanlvdubox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanlvdubox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanzym:
                    GameScene.Game.NPCXiangKanzymbox.Visible = true;
                    GameScene.Game.NPCXiangKanzymbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanzymbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.XiangKanmhhf:
                    GameScene.Game.NPCXiangKanmhhfbox.Visible = true;
                    GameScene.Game.NPCXiangKanmhhfbox.Location = new Point(Size.Width - GameScene.Game.NPCXiangKanmhhfbox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.AccessoryReset:
                    GameScene.Game.NPCAccessoryResetBox.Visible = true;
                    GameScene.Game.NPCAccessoryResetBox.Location = new Point(Size.Width - GameScene.Game.NPCAccessoryResetBox.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.DunReset:
                    GameScene.Game.NPCDunResetBox.Visible = true;
                    GameScene.Game.NPCDunResetBox.Location = new Point(Size.Width - GameScene.Game.NPCDunResetBox.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.HuiReset:
                    GameScene.Game.NPCHuiResetBox.Visible = true;
                    GameScene.Game.NPCHuiResetBox.Location = new Point(Size.Width - GameScene.Game.NPCHuiResetBox.Size.Width, Size.Height);
                    break;
                case NPCDialogType.WeaponCraft:
                    GameScene.Game.NPCWeaponCraftBox.Visible = true;
                    GameScene.Game.NPCWeaponCraftBox.Location = new Point(Size.Width - GameScene.Game.NPCWeaponCraftBox.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.CDkey01:
                    GameScene.Game.NPCCDkey01Box.Visible = true;
                    GameScene.Game.NPCCDkey01Box.Location = new Point(Size.Width - GameScene.Game.NPCCDkey01Box.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.CDkey02:
                    GameScene.Game.NPCCDkey02Box.Visible = true;
                    GameScene.Game.NPCCDkey02Box.Location = new Point(Size.Width - GameScene.Game.NPCCDkey02Box.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.CDkey03:
                    GameScene.Game.NPCCDkey03Box.Visible = true;
                    GameScene.Game.NPCCDkey03Box.Location = new Point(Size.Width - GameScene.Game.NPCCDkey03Box.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.JyhuishouBox:
                    GameScene.Game.NPCJyhuishouBox.Visible = true;
                    GameScene.Game.NPCJyhuishouBox.Location = new Point(Size.Width - GameScene.Game.NPCJyhuishouBox.Size.Width, Size.Height);
                    break;
                
                case NPCDialogType.NPCGuildhuishouBox:
                    GameScene.Game.NPCGuildhuishouBox.Visible = true;
                    
                    GameScene.Game.NPCGuildhuishouBox.Location = new Point(0, Size.Height);
                    break;
            }
        }

        private void ProcessText()
        {
            foreach (DXLabel label in Buttons)
                label.Dispose();

            Buttons.Clear();
            

            MatchCollection matches = R.Matches(Page.Say);
            List<CharacterRange> ranges = new List<CharacterRange>();

            int offset = 1;
            foreach (Match match in matches)
            {
                ranges.Add(new CharacterRange(match.Groups["Text"].Index - offset, match.Groups["Text"].Length));
                offset += 3 + match.Groups["ID"].Length;
            }

            for (int i = 0; i < ranges.Count; i++)
            {
                List<ButtonInfo> buttons = GetWordRegionsNew(DXManager.Graphics, PageText.Text, PageText.Font, PageText.DrawFormat, PageText.Size.Width, ranges[i].First, ranges[i].Length);

                List<DXLabel> labels = new List<DXLabel>();

                foreach (ButtonInfo info in buttons)
                {
                    labels.Add(new DXLabel
                    {
                        AutoSize = false,
                        Parent = PageText,
                        ForeColour = Color.Yellow,
                        Location = info.Region.Location,
                        DrawFormat = PageText.DrawFormat,
                        Text = PageText.Text.Substring(info.Index, info.Length),
                        Font = new Font(PageText.Font.FontFamily, PageText.Font.Size, FontStyle.Regular),
                        Size = info.Region.Size,
                        Outline = false,
                        Sound = SoundIndex.ButtonC,
                    });
                }

                int index = i;
                DateTime NextButtonTime = DateTime.MinValue;
                foreach (DXLabel label in labels)
                {
                    string colorfont = matches[index].Groups["ID"].Value;

                    foreach (DXLabel l in labels)
                    {
                        if (colorfont == "41")
                            l.ForeColour = Color.LawnGreen;
                        if (colorfont == "42")
                            l.ForeColour = Color.Cyan;
                        if (colorfont == "43")
                            l.ForeColour = Color.OrangeRed;
                        if (colorfont == "44")
                            l.ForeColour = Color.Yellow;
                        if (colorfont == "45")
                            l.ForeColour = Color.Coral;
                        if (colorfont == "46")
                            l.ForeColour = Color.DodgerBlue;
                        if (colorfont == "47")
                            l.ForeColour = Color.Fuchsia;
                        if (colorfont == "48")
                            l.ForeColour = Color.Khaki;
                        if (colorfont == "49")
                            l.ForeColour = Color.Teal;
                        if (colorfont == "50")
                            l.ForeColour = Color.Gray;
                    }

                    if (colorfont != "41" && colorfont != "42" && colorfont != "43" && colorfont != "44"
                        && colorfont != "45" && colorfont != "46" && colorfont != "47" && colorfont != "48"
                        && colorfont != "49" && colorfont != "50")
                    {
                        label.MouseEnter += (o, e) =>
                        {
                            if (GameScene.Game.Observer) return;
                            foreach (DXLabel l in labels)
                                l.ForeColour = Color.Red;
                        };

                        label.MouseLeave += (o, e) =>
                        {
                            if (GameScene.Game.Observer) return;
                            foreach (DXLabel l in labels)
                                l.ForeColour = Color.Yellow;
                        };
                        label.MouseClick += (o, e) =>
                        {
                            if (GameScene.Game.Observer) return;

                            if (matches[index].Groups["ID"].Value == "0")
                            {
                                Visible = false;
                                return;
                            }

                            if (CEnvir.Now < NextButtonTime) return;

                            NextButtonTime = CEnvir.Now.AddSeconds(1);

                            CEnvir.Enqueue(new C.NPCButton { ButtonID = int.Parse(matches[index].Groups["ID"].Value) });
                        };
                    }

                    Buttons.Add(label);
                }
            }

        }

        public static List<ButtonInfo> GetWordRegionsNew(Graphics graphics, string text, Font font, TextFormatFlags flags, int width, int index, int length)
        {

            List<ButtonInfo> regions = new List<ButtonInfo>();

            Size tSize = TextRenderer.MeasureText(graphics, "A", font, new Size(width, 2000), flags);
            int h = tSize.Height;
            int leading = tSize.Width - (TextRenderer.MeasureText(graphics, "AA", font, new Size(width, 2000), flags).Width - tSize.Width);

            int lineStart = 0;
            int lastHeight = h;

            
            
            Regex regex = new Regex(@"(?<Words>\S+)", RegexOptions.Compiled);

            MatchCollection matches = regex.Matches(text);

            List<CharacterRange> ranges = new List<CharacterRange>();

            foreach (Match match in matches)
                ranges.Add(new CharacterRange(match.Index, match.Length));


            ButtonInfo currentInfo = null;



            
            foreach (CharacterRange range in ranges)
            {
                int height = TextRenderer.MeasureText(graphics, text.Substring(0, range.First + range.Length), font, new Size(width, 9999), flags).Height;

                if (range.First >= index + length) break;

                if (height > lastHeight)
                {
                    lineStart = range.First; 
                    lastHeight = height;

                    
                    

                    if (range.First >= index)
                    {
                        
                        
                        Rectangle region = new Rectangle
                        {
                            X = 0,
                            Y = height - h,
                            Width = TextRenderer.MeasureText(graphics, text.Substring(range.First, range.Length), font, new Size(width, 9999), flags).Width,
                            Height = h,
                        };
                        currentInfo = new ButtonInfo { Region = region, Index = range.First, Length = range.Length };
                        regions.Add(currentInfo);
                    }

                }
                else
                {
                    
                    

                    if (range.First >= index)
                    {
                        if (currentInfo == null)
                        {
                            Rectangle region = new Rectangle
                            {
                                X = TextRenderer.MeasureText(graphics, text.Substring(lineStart, range.First - lineStart), font, new Size(width, 9999), flags).Width,
                                Y = height - h,
                                Width = TextRenderer.MeasureText(graphics, text.Substring(range.First, range.Length), font, new Size(width, 9999), flags).Width,
                                Height = h,
                            };

                            if (region.X > 0)
                                region.X -= leading;
                            currentInfo = new ButtonInfo { Region = region, Index = range.First, Length = range.Length };
                            regions.Add(currentInfo);
                        }
                        else
                        {
                            
                            currentInfo.Length = (range.First + range.Length) - currentInfo.Index;
                            currentInfo.Region.Width = TextRenderer.MeasureText(graphics, text.Substring(currentInfo.Index, currentInfo.Length), font, new Size(width, 9999), flags).Width;
                        }
                        
                        
                    }
                }
            }
            

            return regions;
            /*
            for (int i = 0; i < text.Length; i++)
            {
                Size size = TextRenderer.MeasureText(graphics, text.Substring(lineStart, i  - lineStart + 1), font, new Size(width, 9999), flags); 
                int height = TextRenderer.MeasureText(graphics, text.Substring(0, i + 1), font, new Size(width, 9999), flags).Height;

                if (i == text.Length - 1 || i == index + length)
                {
                    current.Width = lastSize.Width - current.X;
                    regions.Add(new ButtonInfo { Region = current, Text = text.Substring(textStart, i - textStart).Replace("\r", "") });
                    break;
                }

                if (height > lastHeight)
                {
                    x = 0;
                    y += lastSize.Height;
                    
                    lineStart = i;
                    size = TextRenderer.MeasureText(graphics, text.Substring(lineStart, i - lineStart + 1), font, new Size(width, 9999), flags);
                    if (size.Height > h)
                        size = new Size(size.Width, h);

                    if (i > index)
                    {
                        current.Width = lastSize.Width - current.X;
                        regions.Add(new ButtonInfo { Region =  current, Text = text.Substring(textStart, i - textStart).Replace("\r", "") });

                        current.X = x;
                        current.Y = y;
                        current.Height = h;
                        textStart = i;
                    }
                }
                if (i == index)
                {
                    current.X = x;
                    current.Y = y;
                    current.Height = h;
                    textStart = i;
                }

                x += size.Width;

                lastSize = size;
                lastHeight = height;
            }




            return regions;*/
        }
        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                Page = null;

                if (PageText != null)
                {
                    if (!PageText.IsDisposed)
                        PageText.Dispose();

                    PageText = null;
                }

                if (Buttons != null)
                {
                    for (int i = 0; i < Buttons.Count; i++)
                    {
                        if (Buttons[i] != null)
                        {
                            if (!Buttons[i].IsDisposed)
                                Buttons[i].Dispose();

                            Buttons[i] = null;
                        }
                    }

                    Buttons.Clear();
                    Buttons = null;
                }

                Opened = false;
            }

        }

        #endregion

        public class ButtonInfo
        {
            public Rectangle Region;
            public int Index;
            public int Length;
        }
    }
    
    public sealed class NPCGoodsDialog : DXWindow
    {
        #region Properties

        #region SelectedCell

        public NPCGoodsCell SelectedCell
        {
            get => _SelectedCell;
            set
            {
                if (_SelectedCell == value) return;

                NPCGoodsCell oldValue = _SelectedCell;
                _SelectedCell = value;

                OnSelectedCellChanged(oldValue, value);
            }
        }
        private NPCGoodsCell _SelectedCell;
        public event EventHandler<EventArgs> SelectedCellChanged;
        public void OnSelectedCellChanged(NPCGoodsCell oValue, NPCGoodsCell nValue)
        {
            if (oValue != null) oValue.Selected = false;
            if (nValue != null) nValue.Selected = true;

            BuyButton.Enabled = nValue != null;

            SelectedCellChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        private DXVScrollBar ScrollBar;
        public DXCheckBox GuildCheckBox;

        public List<NPCGoodsCell> Cells = new List<NPCGoodsCell>();
        private DXButton BuyButton;
        public DXControl ClientPanel;

        public override void OnClientAreaChanged(Rectangle oValue, Rectangle nValue)
        {
            base.OnClientAreaChanged(oValue, nValue);

            if (ClientPanel == null) return;

            ClientPanel.Size = ClientArea.Size;
            ClientPanel.Location = ClientArea.Location;

        }


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCGoodsDialog()
        {
            TitleLabel.Text = "商品";

            HasFooter = true;
            Movable = false;


            SetClientSize(new Size(227, 7 * 43 + 1));

            ClientPanel = new DXControl
            {
                Parent = this,
                Size = ClientArea.Size,
                Location = ClientArea.Location,
                PassThrough = true,
            };

            ScrollBar = new DXVScrollBar
            {
                Parent = this,
                Size = new Size(14, ClientArea.Height - 1),
            };
            ScrollBar.Location = new Point(ClientArea.Right - ScrollBar.Size.Width - 2, ClientArea.Y + 1);
            ScrollBar.ValueChanged += (o, e) => UpdateLocations();

            MouseWheel += ScrollBar.DoMouseWheel;

            BuyButton = new DXButton
            {
                Location = new Point(40, Size.Height - 43),
                Size = new Size(80, DefaultHeight),
                Parent = this,
                Label = { Text = "买" },
                Enabled = false,
            };
            BuyButton.MouseClick += (o, e) => Buy();

            GuildCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "使用公会经费:" },
                Enabled = false,
            };
            GuildCheckBox.Location = new Point(200, BuyButton.Location.Y + (BuyButton.Size.Height - GuildCheckBox.Size.Height) / 2);

        }

        #region Methods

        public void NewGoods(IList<NPCGood> goods)
        {
            foreach (NPCGoodsCell cell in Cells)
                cell.Dispose();

            Cells.Clear();

            foreach (NPCGood good in goods)
            {
                NPCGoodsCell cell;
                Cells.Add(cell = new NPCGoodsCell
                {
                    Parent = ClientPanel,
                    Good = good
                });
                cell.MouseClick += (o, e) => SelectedCell = cell;
                cell.MouseWheel += ScrollBar.DoMouseWheel;
                cell.MouseDoubleClick += (o, e) => Buy();
            }


            ScrollBar.MaxValue = goods.Count * 43 - 2;
            SetClientSize(new Size(ClientArea.Width, Math.Min(ScrollBar.MaxValue, 7 * 43 - 3) + 1));
            ScrollBar.VisibleSize = ClientArea.Height;
            ScrollBar.Size = new Size(ScrollBar.Size.Width, ClientArea.Height - 2);

            BuyButton.Location = new Point(30, Size.Height - 43);
            GuildCheckBox.Location = new Point(120, BuyButton.Location.Y + (BuyButton.Size.Height - GuildCheckBox.Size.Height) / 2);
            ScrollBar.Value = 0;
            UpdateLocations();
        }
        private void UpdateLocations()
        {
            int y = -ScrollBar.Value + 1;

            foreach (NPCGoodsCell cell in Cells)
            {
                cell.Location = new Point(1, y);

                y += cell.Size.Height + 3;
            }
        }

        public void Buy()
        {
            if (GameScene.Game.Observer) return;

            if (SelectedCell == null) return;

            long gold = MapObject.User.Gold;

            int shengwang = MapObject.User.Gerenshengwang;

            if (GuildCheckBox.Checked && GameScene.Game.GuildBox.GuildInfo != null)
                gold = GameScene.Game.GuildBox.GuildInfo.GuildFunds;


            if (SelectedCell.Good.Item.StackSize > 1)
            {
                long maxCount = SelectedCell.Good.Item.StackSize;

                maxCount = Math.Min(maxCount, gold / SelectedCell.Good.Cost);

                if (SelectedCell.Good.Shifoushengwang)
                {
                    maxCount = Math.Min(maxCount, shengwang / SelectedCell.Good.Shengwangdian);
                }

                if (SelectedCell.Good.Item.Weight > 0)
                {
                    switch (SelectedCell.Good.Item.ItemType)
                    {
                        case ItemType.Amulet:
                        case ItemType.Poison:
                            if (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight < SelectedCell.Good.Item.Weight)
                            {
                                GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                                return;
                            }
                            break;
                        default:
                            maxCount = Math.Min(maxCount, (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight) / SelectedCell.Good.Item.Weight);
                            break;
                    }
                }

                if (maxCount < 0)
                {
                    GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                ClientUserItem item = new ClientUserItem(SelectedCell.Good.Item, (int)Math.Min(int.MaxValue, maxCount));

                DXItemAmountWindow window = new DXItemAmountWindow("购买物品", item);
                window.ConfirmButton.MouseClick += (o, e) =>
                {
                    CEnvir.Enqueue(new C.NPCBuy { Index = SelectedCell.Good.Index, Amount = window.Amount, GuildFunds = GuildCheckBox.Checked });
                    GuildCheckBox.Checked = false;
                };
            }
            else
            {
                if (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight < SelectedCell.Good.Item.Weight)
                {
                    GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                if (SelectedCell.Good.Cost > gold)
                {
                    GameScene.Game.ReceiveChat($"你没有足够的金币来购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                if (SelectedCell.Good.Shengwangdian > shengwang)
                {
                    GameScene.Game.ReceiveChat($"你没有足够的声望来购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                CEnvir.Enqueue(new C.NPCBuy { Index = SelectedCell.Good.Index, Amount = 1, GuildFunds = GuildCheckBox.Checked });
                GuildCheckBox.Checked = false;
            }
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _SelectedCell = null;
                SelectedCellChanged = null;

                if (ScrollBar != null)
                {
                    if (!ScrollBar.IsDisposed)
                        ScrollBar.Dispose();

                    ScrollBar = null;
                }

                if (GuildCheckBox != null)
                {
                    if (!GuildCheckBox.IsDisposed)
                        GuildCheckBox.Dispose();

                    GuildCheckBox = null;
                }

                if (BuyButton != null)
                {
                    if (!BuyButton.IsDisposed)
                        BuyButton.Dispose();

                    BuyButton = null;
                }

                if (ClientPanel != null)
                {
                    if (!ClientPanel.IsDisposed)
                        ClientPanel.Dispose();

                    ClientPanel = null;
                }

                if (Cells != null)
                {
                    for (int i = 0; i < Cells.Count; i++)
                    {
                        if (Cells[i] != null)
                        {
                            if (!Cells[i].IsDisposed)
                                Cells[i].Dispose();

                            Cells[i] = null;
                        }
                    }

                    Cells.Clear();
                    Cells = null;
                }
            }

        }

        #endregion
    }

    
    public sealed class NPCGGoodsDialog : DXWindow
    {
        #region Properties

        #region SelectedCell

        public NPCGoodsCell SelectedCell
        {
            get => _SelectedCell;
            set
            {
                if (_SelectedCell == value) return;

                NPCGoodsCell oldValue = _SelectedCell;
                _SelectedCell = value;

                OnSelectedCellChanged(oldValue, value);
            }
        }
        private NPCGoodsCell _SelectedCell;
        public event EventHandler<EventArgs> SelectedCellChanged;
        public void OnSelectedCellChanged(NPCGoodsCell oValue, NPCGoodsCell nValue)
        {
            if (oValue != null) oValue.Selected = false;
            if (nValue != null) nValue.Selected = true;

            BuyButton.Enabled = nValue != null;

            SelectedCellChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        private DXVScrollBar ScrollBar;

        public List<NPCGoodsCell> Cells = new List<NPCGoodsCell>();
        private DXButton BuyButton;
        public DXControl ClientPanel;

        public override void OnClientAreaChanged(Rectangle oValue, Rectangle nValue)
        {
            base.OnClientAreaChanged(oValue, nValue);

            if (ClientPanel == null) return;

            ClientPanel.Size = ClientArea.Size;
            ClientPanel.Location = ClientArea.Location;

        }


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCGGoodsDialog()
        {
            TitleLabel.Text = "商品";

            HasFooter = true;
            Movable = false;


            SetClientSize(new Size(227, 7 * 43 + 1));

            ClientPanel = new DXControl
            {
                Parent = this,
                Size = ClientArea.Size,
                Location = ClientArea.Location,
                PassThrough = true,
            };

            ScrollBar = new DXVScrollBar
            {
                Parent = this,
                Size = new Size(14, ClientArea.Height - 1),
            };
            ScrollBar.Location = new Point(ClientArea.Right - ScrollBar.Size.Width - 2, ClientArea.Y + 1);
            ScrollBar.ValueChanged += (o, e) => UpdateLocations();

            MouseWheel += ScrollBar.DoMouseWheel;

            BuyButton = new DXButton
            {
                Location = new Point(40, Size.Height - 43),
                Size = new Size(80, DefaultHeight),
                Parent = this,
                Label = { Text = "买" },
                Enabled = false,
            };
            BuyButton.MouseClick += (o, e) => Buy();

        }

        #region Methods

        public void NewGoods(IList<NPCGood> goods)
        {
            foreach (NPCGoodsCell cell in Cells)
                cell.Dispose();

            Cells.Clear();

            foreach (NPCGood good in goods)
            {
                NPCGoodsCell cell;
                Cells.Add(cell = new NPCGoodsCell
                {
                    Parent = ClientPanel,
                    Good = good
                });
                cell.MouseClick += (o, e) => SelectedCell = cell;
                cell.MouseWheel += ScrollBar.DoMouseWheel;
                cell.MouseDoubleClick += (o, e) => Buy();
            }


            ScrollBar.MaxValue = goods.Count * 43 - 2;
            SetClientSize(new Size(ClientArea.Width, Math.Min(ScrollBar.MaxValue, 7 * 43 - 3) + 1));
            ScrollBar.VisibleSize = ClientArea.Height;
            ScrollBar.Size = new Size(ScrollBar.Size.Width, ClientArea.Height - 2);

            BuyButton.Location = new Point(30, Size.Height - 43);
            ScrollBar.Value = 0;
            UpdateLocations();
        }
        private void UpdateLocations()
        {
            int y = -ScrollBar.Value + 1;

            foreach (NPCGoodsCell cell in Cells)
            {
                cell.Location = new Point(1, y);

                y += cell.Size.Height + 3;
            }
        }

        public void Buy()
        {
            if (GameScene.Game.Observer) return;

            if (SelectedCell == null) return;

            long gold = MapObject.User.Gold;

            int shengwang = MapObject.User.Gerenshengwang;


            if (SelectedCell.Good.Item.StackSize > 1)
            {
                long maxCount = SelectedCell.Good.Item.StackSize;

                maxCount = Math.Min(maxCount, gold / SelectedCell.Good.Cost);

                if (SelectedCell.Good.Shifoushengwang)
                {
                    maxCount = Math.Min(maxCount, shengwang / SelectedCell.Good.Shengwangdian);
                }

                if (SelectedCell.Good.Item.Weight > 0)
                {
                    switch (SelectedCell.Good.Item.ItemType)
                    {
                        case ItemType.Amulet:
                        case ItemType.Poison:
                            if (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight < SelectedCell.Good.Item.Weight)
                            {
                                GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                                return;
                            }
                            break;
                        default:
                            maxCount = Math.Min(maxCount, (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight) / SelectedCell.Good.Item.Weight);
                            break;
                    }
                }

                if (maxCount < 0)
                {
                    GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                ClientUserItem item = new ClientUserItem(SelectedCell.Good.Item, (int)Math.Min(int.MaxValue, maxCount));

                DXItemAmountWindow window = new DXItemAmountWindow("购买物品", item);
                window.ConfirmButton.MouseClick += (o, e) =>
                {
                    CEnvir.Enqueue(new C.NPCGBuy { Index = SelectedCell.Good.Index, Amount = window.Amount });
                };
            }
            else
            {
                if (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight < SelectedCell.Good.Item.Weight)
                {
                    GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                if (SelectedCell.Good.Cost > gold)
                {
                    GameScene.Game.ReceiveChat($"你没有足够的金币来购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                if (SelectedCell.Good.Shengwangdian > shengwang)
                {
                    GameScene.Game.ReceiveChat($"你没有足够的声望来购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                CEnvir.Enqueue(new C.NPCGBuy { Index = SelectedCell.Good.Index, Amount = 1 });

            }
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _SelectedCell = null;
                SelectedCellChanged = null;

                if (ScrollBar != null)
                {
                    if (!ScrollBar.IsDisposed)
                        ScrollBar.Dispose();

                    ScrollBar = null;
                }

                if (BuyButton != null)
                {
                    if (!BuyButton.IsDisposed)
                        BuyButton.Dispose();

                    BuyButton = null;
                }

                if (ClientPanel != null)
                {
                    if (!ClientPanel.IsDisposed)
                        ClientPanel.Dispose();

                    ClientPanel = null;
                }

                if (Cells != null)
                {
                    for (int i = 0; i < Cells.Count; i++)
                    {
                        if (Cells[i] != null)
                        {
                            if (!Cells[i].IsDisposed)
                                Cells[i].Dispose();

                            Cells[i] = null;
                        }
                    }

                    Cells.Clear();
                    Cells = null;
                }
            }

        }

        #endregion
    }

    
    public sealed class NPCYGoodsDialog : DXWindow
    {
        #region Properties

        #region SelectedCell

        public NPCGoodsCell SelectedCell
        {
            get => _SelectedCell;
            set
            {
                if (_SelectedCell == value) return;

                NPCGoodsCell oldValue = _SelectedCell;
                _SelectedCell = value;

                OnSelectedCellChanged(oldValue, value);
            }
        }
        private NPCGoodsCell _SelectedCell;
        public event EventHandler<EventArgs> SelectedCellChanged;
        public void OnSelectedCellChanged(NPCGoodsCell oValue, NPCGoodsCell nValue)
        {
            if (oValue != null) oValue.Selected = false;
            if (nValue != null) nValue.Selected = true;

            BuyButton.Enabled = nValue != null;

            SelectedCellChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        private DXVScrollBar ScrollBar;
        public DXCheckBox GuildCheckBox;

        public List<NPCGoodsCell> Cells = new List<NPCGoodsCell>();
        private DXButton BuyButton;
        public DXControl ClientPanel;

        public override void OnClientAreaChanged(Rectangle oValue, Rectangle nValue)
        {
            base.OnClientAreaChanged(oValue, nValue);

            if (ClientPanel == null) return;

            ClientPanel.Size = ClientArea.Size;
            ClientPanel.Location = ClientArea.Location;

        }


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCYGoodsDialog()
        {
            TitleLabel.Text = "商品";

            HasFooter = true;
            Movable = false;


            SetClientSize(new Size(227, 7 * 43 + 1));

            ClientPanel = new DXControl
            {
                Parent = this,
                Size = ClientArea.Size,
                Location = ClientArea.Location,
                PassThrough = true,
            };

            ScrollBar = new DXVScrollBar
            {
                Parent = this,
                Size = new Size(14, ClientArea.Height - 1),
            };
            ScrollBar.Location = new Point(ClientArea.Right - ScrollBar.Size.Width - 2, ClientArea.Y + 1);
            ScrollBar.ValueChanged += (o, e) => UpdateLocations();

            MouseWheel += ScrollBar.DoMouseWheel;

            BuyButton = new DXButton
            {
                Location = new Point(40, Size.Height - 43),
                Size = new Size(80, DefaultHeight),
                Parent = this,
                Label = { Text = "买" },
                Enabled = false,
            };
            BuyButton.MouseClick += (o, e) => Buy();

            GuildCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "使用公会经费:" },
                Enabled = false,
            };
            GuildCheckBox.Location = new Point(200, BuyButton.Location.Y + (BuyButton.Size.Height - GuildCheckBox.Size.Height) / 2);

        }

        #region Methods

        public void NewGoods(IList<NPCGood> goods)
        {
            foreach (NPCGoodsCell cell in Cells)
                cell.Dispose();

            Cells.Clear();

            foreach (NPCGood good in goods)
            {
                NPCGoodsCell cell;
                Cells.Add(cell = new NPCGoodsCell
                {
                    Parent = ClientPanel,
                    Good = good
                });
                cell.MouseClick += (o, e) => SelectedCell = cell;
                cell.MouseWheel += ScrollBar.DoMouseWheel;
                cell.MouseDoubleClick += (o, e) => Buy();
            }


            ScrollBar.MaxValue = goods.Count * 43 - 2;
            SetClientSize(new Size(ClientArea.Width, Math.Min(ScrollBar.MaxValue, 7 * 43 - 3) + 1));
            ScrollBar.VisibleSize = ClientArea.Height;
            ScrollBar.Size = new Size(ScrollBar.Size.Width, ClientArea.Height - 2);

            BuyButton.Location = new Point(30, Size.Height - 43);
            GuildCheckBox.Location = new Point(120, BuyButton.Location.Y + (BuyButton.Size.Height - GuildCheckBox.Size.Height) / 2);
            ScrollBar.Value = 0;
            UpdateLocations();
        }
        private void UpdateLocations()
        {
            int y = -ScrollBar.Value + 1;

            foreach (NPCGoodsCell cell in Cells)
            {
                cell.Location = new Point(1, y);

                y += cell.Size.Height + 3;
            }
        }

        public void Buy()
        {
            if (GameScene.Game.Observer) return;

            if (SelectedCell == null) return;

            if (!GuildCheckBox.Checked)
            {
                GameScene.Game.ReceiveChat("打勾“使用公会经费”选项后才能购买", MessageType.System);
                return;
            }

            long gold = 0;

            int shengwang = MapObject.User.Gerenshengwang;

            if (GuildCheckBox.Checked && GameScene.Game.GuildBox.GuildInfo != null)
                gold = GameScene.Game.GuildBox.GuildInfo.GuildFunds;

            if (SelectedCell.Good.Item.StackSize > 1)
            {
                long maxCount = SelectedCell.Good.Item.StackSize;

                maxCount = Math.Min(maxCount, gold / SelectedCell.Good.Cost);

                if (SelectedCell.Good.Shifoushengwang)
                {
                    maxCount = Math.Min(maxCount, shengwang / SelectedCell.Good.Shengwangdian);
                }

                if (SelectedCell.Good.Item.Weight > 0)
                {
                    switch (SelectedCell.Good.Item.ItemType)
                    {
                        case ItemType.Amulet:
                        case ItemType.Poison:
                            if (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight < SelectedCell.Good.Item.Weight)
                            {
                                GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                                return;
                            }
                            break;
                        default:
                            maxCount = Math.Min(maxCount, (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight) / SelectedCell.Good.Item.Weight);
                            break;
                    }
                }

                if (maxCount < 0)
                {
                    GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                ClientUserItem item = new ClientUserItem(SelectedCell.Good.Item, (int)Math.Min(int.MaxValue, maxCount));

                DXItemAmountWindow window = new DXItemAmountWindow("购买物品", item);
                window.ConfirmButton.MouseClick += (o, e) =>
                {
                    CEnvir.Enqueue(new C.NPCYBuy { Index = SelectedCell.Good.Index, Amount = window.Amount, GuildFunds = GuildCheckBox.Checked });
                    GuildCheckBox.Checked = false;
                };
            }
            else
            {
                if (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight < SelectedCell.Good.Item.Weight)
                {
                    GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                if (SelectedCell.Good.Cost > gold)
                {
                    GameScene.Game.ReceiveChat($"你没有足够的公会经费来购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                if (SelectedCell.Good.Shengwangdian > shengwang)
                {
                    GameScene.Game.ReceiveChat($"你没有足够的声望来购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                CEnvir.Enqueue(new C.NPCYBuy { Index = SelectedCell.Good.Index, Amount = 1, GuildFunds = GuildCheckBox.Checked });
                GuildCheckBox.Checked = false;
            }
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _SelectedCell = null;
                SelectedCellChanged = null;

                if (ScrollBar != null)
                {
                    if (!ScrollBar.IsDisposed)
                        ScrollBar.Dispose();

                    ScrollBar = null;
                }

                if (GuildCheckBox != null)
                {
                    if (!GuildCheckBox.IsDisposed)
                        GuildCheckBox.Dispose();

                    GuildCheckBox = null;
                }

                if (BuyButton != null)
                {
                    if (!BuyButton.IsDisposed)
                        BuyButton.Dispose();

                    BuyButton = null;
                }

                if (ClientPanel != null)
                {
                    if (!ClientPanel.IsDisposed)
                        ClientPanel.Dispose();

                    ClientPanel = null;
                }

                if (Cells != null)
                {
                    for (int i = 0; i < Cells.Count; i++)
                    {
                        if (Cells[i] != null)
                        {
                            if (!Cells[i].IsDisposed)
                                Cells[i].Dispose();

                            Cells[i] = null;
                        }
                    }

                    Cells.Clear();
                    Cells = null;
                }
            }

        }

        #endregion
    }

    
    public sealed class NPCShenmiGoodsDialog : DXWindow
    {
        #region Properties

        #region SelectedCell

        public NPCShenmiGoodsCell SelectedCell
        {
            get => _SelectedCell;
            set
            {
                if (_SelectedCell == value) return;

                NPCShenmiGoodsCell oldValue = _SelectedCell;
                _SelectedCell = value;

                OnSelectedCellChanged(oldValue, value);
            }
        }
        private NPCShenmiGoodsCell _SelectedCell;
        public event EventHandler<EventArgs> SelectedCellChanged;
        public void OnSelectedCellChanged(NPCShenmiGoodsCell oValue, NPCShenmiGoodsCell nValue)
        {
            if (oValue != null) oValue.Selected = false;
            if (nValue != null) nValue.Selected = true;

            BuyButton.Enabled = nValue != null;

            SelectedCellChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        private DXVScrollBar ScrollBar;
        public DXCheckBox GuildCheckBox;

        public List<NPCShenmiGoodsCell> Cells = new List<NPCShenmiGoodsCell>();
        private DXButton BuyButton;
        public DXControl ClientPanel;

        public override void OnClientAreaChanged(Rectangle oValue, Rectangle nValue)
        {
            base.OnClientAreaChanged(oValue, nValue);

            if (ClientPanel == null) return;

            ClientPanel.Size = ClientArea.Size;
            ClientPanel.Location = ClientArea.Location;

        }


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCShenmiGoodsDialog()
        {
            TitleLabel.Text = "神秘商店";

            HasFooter = true;
            Movable = false;


            SetClientSize(new Size(227, 4 * 43 + 1));

            ClientPanel = new DXControl
            {
                Parent = this,
                Size = ClientArea.Size,
                Location = ClientArea.Location,
                PassThrough = true,
            };

            ScrollBar = new DXVScrollBar
            {
                Parent = this,
                Size = new Size(14, ClientArea.Height - 1),
            };
            ScrollBar.Location = new Point(ClientArea.Right - ScrollBar.Size.Width - 2, ClientArea.Y + 1);
            ScrollBar.ValueChanged += (o, e) => UpdateLocations();

            MouseWheel += ScrollBar.DoMouseWheel;

            BuyButton = new DXButton
            {
                Location = new Point(40, Size.Height - 43),
                Size = new Size(80, DefaultHeight),
                Parent = this,
                Label = { Text = "买" },
                Enabled = false,
            };
            BuyButton.MouseClick += (o, e) => Buy();

            GuildCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "使用公会经费:" },
                Enabled = false,
            };
            GuildCheckBox.Location = new Point(200, BuyButton.Location.Y + (BuyButton.Size.Height - GuildCheckBox.Size.Height) / 2);

        }

        #region Methods


        public void NewGoods(IList<NPCGood> goods)
        {
            foreach (NPCShenmiGoodsCell cell in Cells)
                cell.Dispose();

            Cells.Clear();

            foreach (NPCGood good in goods)
            {
                NPCShenmiGoodsCell cell;
                Cells.Add(cell = new NPCShenmiGoodsCell
                {
                    Parent = ClientPanel,
                    Good = good
                });
                cell.MouseClick += (o, e) => SelectedCell = cell;
                cell.MouseWheel += ScrollBar.DoMouseWheel;
                cell.MouseDoubleClick += (o, e) => Buy();
            }


            ScrollBar.MaxValue = goods.Count * 43 - 2;
            SetClientSize(new Size(ClientArea.Width, Math.Min(ScrollBar.MaxValue, 4 * 43 - 3) + 1));
            ScrollBar.VisibleSize = ClientArea.Height;
            ScrollBar.Size = new Size(ScrollBar.Size.Width, ClientArea.Height - 2);

            BuyButton.Location = new Point(30, Size.Height - 43);
            GuildCheckBox.Location = new Point(120, BuyButton.Location.Y + (BuyButton.Size.Height - GuildCheckBox.Size.Height) / 2);
            ScrollBar.Value = 0;
            UpdateLocations();
        }
        private void UpdateLocations()
        {
            int y = -ScrollBar.Value + 1;

            foreach (NPCShenmiGoodsCell cell in Cells)
            {
                cell.Location = new Point(1, y);

                y += cell.Size.Height + 3;
            }
        }

        public void Buy()
        {

            if (GameScene.Game.Observer) return;

            if (SelectedCell == null) return;

            long gold = MapObject.User.Gold;

            int shengwang = MapObject.User.Gerenshengwang;

            if (GuildCheckBox.Checked && GameScene.Game.GuildBox.GuildInfo != null)
                gold = GameScene.Game.GuildBox.GuildInfo.GuildFunds;

            if (SelectedCell.Good.Item.StackSize > 1)
            {
                long maxCount = SelectedCell.Good.Item.StackSize;


                switch (SelectedCell.Good.Shibiema)
                {
                    case 1:
                        maxCount = SelectedCell.Good.ItemCount - SelectedCell.Good.Amount;
                        break;
                    case 2:
                        maxCount = SelectedCell.Good.ItemCount - SelectedCell.Good.Amount;
                        break;
                    case 3:
                        maxCount = SelectedCell.Good.ItemCount - SelectedCell.Good.Amount;
                        break;
                    case 4:
                        maxCount = SelectedCell.Good.ItemCount - SelectedCell.Good.Amount;
                        break;
                    case 5:
                        maxCount = SelectedCell.Good.ItemCount - SelectedCell.Good.Amount;
                        break;
                    case 6:
                        maxCount = SelectedCell.Good.ItemCount - SelectedCell.Good.Amount;
                        break;
                    case 7:
                        maxCount = SelectedCell.Good.ItemCount - SelectedCell.Good.Amount;
                        break;
                    case 8:
                        maxCount = SelectedCell.Good.ItemCount - SelectedCell.Good.Amount;
                        break;
                    case 9:
                        maxCount = SelectedCell.Good.ItemCount - SelectedCell.Good.Amount;
                        break;
                    case 10:
                        maxCount = SelectedCell.Good.ItemCount - SelectedCell.Good.Amount;
                        break;
                    default:
                        return;
                }

                maxCount = Math.Min(maxCount, gold / SelectedCell.Good.Cost);

                if (SelectedCell.Good.Shifoushengwang)
                {
                    maxCount = Math.Min(maxCount, shengwang / SelectedCell.Good.Shengwangdian);
                }

                if (SelectedCell.Good.Item.Weight > 0)
                {
                    switch (SelectedCell.Good.Item.ItemType)
                    {
                        case ItemType.Amulet:
                        case ItemType.Poison:
                            if (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight < SelectedCell.Good.Item.Weight)
                            {
                                GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                                return;
                            }
                            break;
                        default:
                            maxCount = Math.Min(maxCount, (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight) / SelectedCell.Good.Item.Weight);
                            break;
                    }
                }

                if (maxCount < 0)
                {
                    GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                ClientUserItem item = new ClientUserItem(SelectedCell.Good.Item, (int)Math.Min(int.MaxValue, maxCount));

                DXItemAmountWindow window = new DXItemAmountWindow("购买物品", item);
                window.ConfirmButton.MouseClick += (o, e) =>
                {
                    CEnvir.Enqueue(new C.NPCShenmiSRBuy { Index = SelectedCell.Good.Index, Amount = window.Amount, GuildFunds = GuildCheckBox.Checked });
                    GuildCheckBox.Checked = false;
                };
            }
            else
            {
                switch (SelectedCell.Good.Shibiema)
                {
                    case 1:
                        if (SelectedCell.Good.ItemCount - SelectedCell.Good.Amount == 0)
                        {
                            GameScene.Game.ReceiveChat($"{SelectedCell.Good.Item.ItemName}已卖完了", MessageType.System);
                            return;
                        }
                        break;
                    case 2:
                        if (SelectedCell.Good.ItemCount - SelectedCell.Good.Amount == 0)
                        {
                            GameScene.Game.ReceiveChat($"{SelectedCell.Good.Item.ItemName}已卖完了", MessageType.System);
                            return;
                        }
                        break;
                    case 3:
                        if (SelectedCell.Good.ItemCount - SelectedCell.Good.Amount == 0)
                        {
                            GameScene.Game.ReceiveChat($"{SelectedCell.Good.Item.ItemName}已卖完了", MessageType.System);
                            return;
                        }
                        break;
                    case 4:
                        if (SelectedCell.Good.ItemCount - SelectedCell.Good.Amount == 0)
                        {
                            GameScene.Game.ReceiveChat($"{SelectedCell.Good.Item.ItemName}已卖完了", MessageType.System);
                            return;
                        }
                        break;
                    case 5:
                        if (SelectedCell.Good.ItemCount - SelectedCell.Good.Amount == 0)
                        {
                            GameScene.Game.ReceiveChat($"{SelectedCell.Good.Item.ItemName}已卖完了", MessageType.System);
                            return;
                        }
                        break;
                    case 6:
                        if (SelectedCell.Good.ItemCount - SelectedCell.Good.Amount == 0)
                        {
                            GameScene.Game.ReceiveChat($"{SelectedCell.Good.Item.ItemName}已卖完了", MessageType.System);
                            return;
                        }
                        break;
                    case 7:
                        if (SelectedCell.Good.ItemCount - SelectedCell.Good.Amount == 0)
                        {
                            GameScene.Game.ReceiveChat($"{SelectedCell.Good.Item.ItemName}已卖完了", MessageType.System);
                            return;
                        }
                        break;
                    case 8:
                        if (SelectedCell.Good.ItemCount - SelectedCell.Good.Amount == 0)
                        {
                            GameScene.Game.ReceiveChat($"{SelectedCell.Good.Item.ItemName}已卖完了", MessageType.System);
                            return;
                        }
                        break;
                    case 9:
                        if (SelectedCell.Good.ItemCount - SelectedCell.Good.Amount == 0)
                        {
                            GameScene.Game.ReceiveChat($"{SelectedCell.Good.Item.ItemName}已卖完了", MessageType.System);
                            return;
                        }
                        break;
                    case 10:
                        if (SelectedCell.Good.ItemCount - SelectedCell.Good.Amount == 0)
                        {
                            GameScene.Game.ReceiveChat($"{SelectedCell.Good.Item.ItemName}已卖完了", MessageType.System);
                            return;
                        }
                        break;
                    default:
                        return;
                }

                if (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight < SelectedCell.Good.Item.Weight)
                {
                    GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                if (SelectedCell.Good.Cost > gold)
                {
                    GameScene.Game.ReceiveChat($"你没有足够的金币来购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                if (SelectedCell.Good.Shengwangdian > shengwang)
                {
                    GameScene.Game.ReceiveChat($"你没有足够的声望来购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                CEnvir.Enqueue(new C.NPCShenmiSRBuy { Index = SelectedCell.Good.Index, Amount = 1, GuildFunds = GuildCheckBox.Checked });
                GuildCheckBox.Checked = false;
            }
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _SelectedCell = null;
                SelectedCellChanged = null;

                if (ScrollBar != null)
                {
                    if (!ScrollBar.IsDisposed)
                        ScrollBar.Dispose();

                    ScrollBar = null;
                }

                if (GuildCheckBox != null)
                {
                    if (!GuildCheckBox.IsDisposed)
                        GuildCheckBox.Dispose();

                    GuildCheckBox = null;
                }

                if (BuyButton != null)
                {
                    if (!BuyButton.IsDisposed)
                        BuyButton.Dispose();

                    BuyButton = null;
                }

                if (ClientPanel != null)
                {
                    if (!ClientPanel.IsDisposed)
                        ClientPanel.Dispose();

                    ClientPanel = null;
                }

                if (Cells != null)
                {
                    for (int i = 0; i < Cells.Count; i++)
                    {
                        if (Cells[i] != null)
                        {
                            if (!Cells[i].IsDisposed)
                                Cells[i].Dispose();

                            Cells[i] = null;
                        }
                    }

                    Cells.Clear();
                    Cells = null;
                }
            }

        }

        #endregion
    }
    
    public sealed class NPCShenmiGoodsCell : DXControl
    {
        #region Properties

        #region Good
        public NPCGood Good
        {
            get => _Good;
            set
            {
                if (_Good == value) return;

                NPCGood oldValue = _Good;
                _Good = value;

                OnGoodChanged(oldValue, value);
            }
        }
        private NPCGood _Good;
        public event EventHandler<EventArgs> GoodChanged;
        public void OnGoodChanged(NPCGood oValue, NPCGood nValue)
        {
            ItemCell.Item = new ClientUserItem(Good.Item, 1) { Flags = UserItemFlags.Locked };

            switch (Good.Item.ItemType)
            {
                case ItemType.Weapon:
                case ItemType.Armour:
                case ItemType.Helmet:
                case ItemType.Necklace:
                case ItemType.Bracelet:
                case ItemType.Ring:
                case ItemType.Shoes:
                case ItemType.Book:
                case ItemType.Baoshi:
                case ItemType.Consumable:
                case ItemType.Nothing:
                case ItemType.Fabao:
                case ItemType.Torch:
                case ItemType.Ore:
                case ItemType.Scroll:
                case ItemType.DarkStone:
                case ItemType.RefineSpecial:
                case ItemType.HorseArmour:
                case ItemType.Flower:
                case ItemType.CompanionFood:
                case ItemType.CompanionBag:
                case ItemType.CompanionHead:
                case ItemType.CompanionBack:
                case ItemType.System:
                case ItemType.Emblem:
                case ItemType.Shield:
                case ItemType.Shizhuang:
                    ItemCell.Item.Flags |= UserItemFlags.NonRefinable;
                    break;
            }
            ItemNameLabel.Text = Good.Item.ItemName;

            CostLabel.Text = Good.Cost.ToString("##,##0");
            CostLabel.Location = new Point(GoldIcon.Location.X - CostLabel.Size.Width, GoldIcon.Location.Y + GoldIcon.Size.Height - CostLabel.Size.Height);

            CostLabel.ForeColour = Good.Cost > MapObject.User.Gold ? Color.Red : Color.Yellow;

            if (Good.Shifoushengwang)
            {
                ShengwangIcon.Visible = true;

                ShengwangLabel.Text = Good.Shengwangdian.ToString("##,##0");
                ShengwangLabel.Location = new Point(ShengwangIcon.Location.X - ShengwangLabel.Size.Width, ShengwangIcon.Location.Y + ShengwangIcon.Size.Height - ShengwangLabel.Size.Height);

                ShengwangLabel.ForeColour = Good.Shengwangdian > MapObject.User.Gerenshengwang ? Color.Red : Color.LimeGreen;
            }
            else
            {
                ShengwangIcon.Visible = false;
            }

            switch (Good.Item.ItemType)
            {
                case ItemType.Weapon:
                case ItemType.Armour:
                case ItemType.Helmet:
                case ItemType.Necklace:
                case ItemType.Bracelet:
                case ItemType.Ring:
                case ItemType.Shoes:
                case ItemType.Book:
                case ItemType.Baoshi:
                case ItemType.Consumable:
                case ItemType.Nothing:
                case ItemType.Fabao:
                case ItemType.Torch:
                case ItemType.Ore:
                case ItemType.Scroll:
                case ItemType.DarkStone:
                case ItemType.RefineSpecial:
                case ItemType.HorseArmour:
                case ItemType.Flower:
                case ItemType.CompanionFood:
                case ItemType.CompanionBag:
                case ItemType.CompanionHead:
                case ItemType.CompanionBack:
                case ItemType.System:
                case ItemType.Emblem:
                case ItemType.Shield:
                case ItemType.Shizhuang:
                    
                    switch (Good.Shibiema)
                    {
                        case 1:
                            if (Good.ItemCount - Good.Amount > 0)
                            {
                                RequirementLabel.Text = $"剩下{Good.ItemCount - GameScene.Game.User.ItemCountyi}个";
                                RequirementLabel.ForeColour = Color.Aquamarine;
                            }
                            else
                            {
                                RequirementLabel.Text = "已卖完";
                                RequirementLabel.ForeColour = Color.Red;
                            }
                            break;
                        case 2:
                            if (Good.ItemCount - Good.Amount > 0)
                            {
                                RequirementLabel.Text = $"剩下{Good.ItemCount - GameScene.Game.User.ItemCounter}个";
                                RequirementLabel.ForeColour = Color.Aquamarine;
                            }
                            else
                            {
                                RequirementLabel.Text = "已卖完";
                                RequirementLabel.ForeColour = Color.Red;
                            }
                            break;
                        case 3:
                            if (Good.ItemCount - Good.Amount > 0)
                            {
                                RequirementLabel.Text = $"剩下{Good.ItemCount - GameScene.Game.User.ItemCountsan}个";
                                RequirementLabel.ForeColour = Color.Aquamarine;
                            }
                            else
                            {
                                RequirementLabel.Text = "已卖完";
                                RequirementLabel.ForeColour = Color.Red;
                            }
                            break;
                        case 4:
                            if (Good.ItemCount - Good.Amount > 0)
                            {
                                RequirementLabel.Text = $"剩下{Good.ItemCount - GameScene.Game.User.ItemCountsi}个";
                                RequirementLabel.ForeColour = Color.Aquamarine;
                            }
                            else
                            {
                                RequirementLabel.Text = "已卖完";
                                RequirementLabel.ForeColour = Color.Red;
                            }
                            break;
                        case 5:
                            if (Good.ItemCount - Good.Amount > 0)
                            {
                                RequirementLabel.Text = $"剩下{Good.ItemCount - GameScene.Game.User.ItemCountwu}个";
                                RequirementLabel.ForeColour = Color.Aquamarine;
                            }
                            else
                            {
                                RequirementLabel.Text = "已卖完";
                                RequirementLabel.ForeColour = Color.Red;
                            }
                            UpdateColours();
                            break;
                        case 6:
                            if (Good.ItemCount - Good.Amount > 0)
                            {
                                RequirementLabel.Text = $"剩下{Good.ItemCount - GameScene.Game.User.ItemCountliu}个";
                                RequirementLabel.ForeColour = Color.Aquamarine;
                            }
                            else
                            {
                                RequirementLabel.Text = "已卖完";
                                RequirementLabel.ForeColour = Color.Red;
                            }
                            break;
                        case 7:
                            if (Good.ItemCount - Good.Amount > 0)
                            {
                                RequirementLabel.Text = $"剩下{Good.ItemCount - GameScene.Game.User.ItemCountqi}个";
                                RequirementLabel.ForeColour = Color.Aquamarine;
                            }
                            else
                            {
                                RequirementLabel.Text = "已卖完";
                                RequirementLabel.ForeColour = Color.Red;
                            }
                            break;
                        case 8:
                            if (Good.ItemCount - Good.Amount > 0)
                            {
                                RequirementLabel.Text = $"剩下{Good.ItemCount - GameScene.Game.User.ItemCountba}个";
                                RequirementLabel.ForeColour = Color.Aquamarine;
                            }
                            else
                            {
                                RequirementLabel.Text = "已卖完";
                                RequirementLabel.ForeColour = Color.Red;
                            }
                            break;
                        case 9:
                            if (Good.ItemCount - Good.Amount > 0)
                            {
                                RequirementLabel.Text = $"剩下{Good.ItemCount - GameScene.Game.User.ItemCountjiu}个";
                                RequirementLabel.ForeColour = Color.Aquamarine;
                            }
                            else
                            {
                                RequirementLabel.Text = "已卖完";
                                RequirementLabel.ForeColour = Color.Red;
                            }
                            break;
                        case 10:
                            if (Good.ItemCount - Good.Amount > 0)
                            {
                                RequirementLabel.Text = $"剩下{Good.ItemCount - GameScene.Game.User.ItemCountshi}个";
                                RequirementLabel.ForeColour = Color.Aquamarine;
                            }
                            else
                            {
                                RequirementLabel.Text = "已卖完";
                                RequirementLabel.ForeColour = Color.Red;
                            }
                            break;
                    }

                    break;

            }


            GoodChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        #region Selected

        public bool Selected
        {
            get => _Selected;
            set
            {
                if (_Selected == value) return;

                bool oldValue = _Selected;
                _Selected = value;

                OnSelectedChanged(oldValue, value);
            }
        }
        private bool _Selected;
        public event EventHandler<EventArgs> SelectedChanged;
        public void OnSelectedChanged(bool oValue, bool nValue)
        {
            Border = Selected;
            BackColour = Selected ? Color.FromArgb(80, 80, 125) : Color.FromArgb(25, 20, 0);
            ItemCell.BorderColour = Selected ? Color.FromArgb(198, 166, 99) : Color.FromArgb(99, 83, 50);
            SelectedChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        public DXItemCell ItemCell;

        public DXImageControl GoldIcon, ShengwangIcon;
        public DXLabel ItemNameLabel, RequirementLabel, CostLabel, ShengwangLabel;

        #endregion

        public NPCShenmiGoodsCell()
        {
            DrawTexture = true;
            BackColour = Color.FromArgb(25, 20, 0);
            
            
            BorderColour = Color.FromArgb(198, 166, 99);
            Size = new Size(219, 40);

            ItemCell = new DXItemCell
            {
                Parent = this,
                Location = new Point((Size.Height - DXItemCell.CellHeight) / 2, (Size.Height - DXItemCell.CellHeight) / 2),
                FixedBorder = true,
                Border = true,
                ReadOnly = true,
                ItemGrid = new ClientUserItem[1],
                Slot = 0,
                FixedBorderColour = true,
                ShowCountLabel = false,
            };
            ItemNameLabel = new DXLabel
            {
                Parent = this,
                Location = new Point(ItemCell.Location.X * 2 + ItemCell.Size.Width, ItemCell.Location.Y),
                ForeColour = Color.White,
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
            };

            RequirementLabel = new DXLabel
            {
                Parent = this,
                Text = "剩下",
                IsControl = false,
            };
            RequirementLabel.Location = new Point(ItemCell.Location.X * 2 + ItemCell.Size.Width, ItemCell.Location.Y + ItemCell.Size.Height - RequirementLabel.Size.Height);


            GoldIcon = new DXImageControl
            {
                LibraryFile = LibraryFile.Inventory,
                Index = 121,
                Parent = this,
                IsControl = false,
            };
            GoldIcon.Location = new Point(Size.Width - GoldIcon.Size.Width - ItemCell.Location.X - 10, Size.Height - GoldIcon.Size.Height - ItemCell.Location.X);

            ShengwangIcon = new DXImageControl
            {
                LibraryFile = LibraryFile.Inventory,
                Index = 128,
                Parent = this,
                IsControl = false,
                Visible = false,
            };
            ShengwangIcon.Location = new Point(Size.Width - ShengwangIcon.Size.Width - ItemCell.Location.X - 10, ItemCell.Location.Y);


            CostLabel = new DXLabel
            {
                Parent = this,
                IsControl = false,
            };

            ShengwangLabel = new DXLabel
            {
                Parent = this,
                IsControl = false,
            };
        }

        #region Methods

        public void UpdateColours()
        {
            CostLabel.ForeColour = Good.Cost > MapObject.User.Gold ? Color.Red : Color.Yellow;
        }

        public override void OnMouseEnter()
        {
            base.OnMouseEnter();

            GameScene.Game.MouseItem = ItemCell.Item;
        }
        public override void OnMouseLeave()
        {
            base.OnMouseLeave();

            GameScene.Game.MouseItem = null;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _Good = null;
                GoodChanged = null;

                _Selected = false;
                SelectedChanged = null;

                if (ItemCell != null)
                {
                    if (!ItemCell.IsDisposed)
                        ItemCell.Dispose();

                    ItemCell = null;
                }

                if (GoldIcon != null)
                {
                    if (!GoldIcon.IsDisposed)
                        GoldIcon.Dispose();

                    GoldIcon = null;
                }

                if (ShengwangIcon != null)
                {
                    if (!ShengwangIcon.IsDisposed)
                        ShengwangIcon.Dispose();

                    ShengwangIcon = null;
                }

                if (ItemNameLabel != null)
                {
                    if (!ItemNameLabel.IsDisposed)
                        ItemNameLabel.Dispose();

                    ItemNameLabel = null;
                }

                if (RequirementLabel != null)
                {
                    if (!RequirementLabel.IsDisposed)
                        RequirementLabel.Dispose();

                    RequirementLabel = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }

                if (ShengwangLabel != null)
                {
                    if (!ShengwangLabel.IsDisposed)
                        ShengwangLabel.Dispose();

                    ShengwangLabel = null;
                }
            }

        }

        #endregion
    }

    
    public sealed class NPCBaoshiduihuanDialog : DXWindow
    {
        #region Properties

        #region SelectedCell

        public NPCBSGoodsCell SelectedCell
        {
            get => _SelectedCell;
            set
            {
                if (_SelectedCell == value) return;

                NPCBSGoodsCell oldValue = _SelectedCell;
                _SelectedCell = value;

                OnSelectedCellChanged(oldValue, value);
            }
        }
        private NPCBSGoodsCell _SelectedCell;
        public event EventHandler<EventArgs> SelectedCellChanged;
        public void OnSelectedCellChanged(NPCBSGoodsCell oValue, NPCBSGoodsCell nValue)
        {
            if (oValue != null) oValue.Selected = false;
            if (nValue != null) nValue.Selected = true;

            BuyButton.Enabled = nValue != null;

            SelectedCellChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        private DXVScrollBar ScrollBar;

        public List<NPCBSGoodsCell> Cells = new List<NPCBSGoodsCell>();
        private DXButton BuyButton;
        public DXControl ClientPanel;

        public override void OnClientAreaChanged(Rectangle oValue, Rectangle nValue)
        {
            base.OnClientAreaChanged(oValue, nValue);

            if (ClientPanel == null) return;

            ClientPanel.Size = ClientArea.Size;
            ClientPanel.Location = ClientArea.Location;

        }


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCBaoshiduihuanDialog()
        {
            TitleLabel.Text = "宝石商店";

            HasFooter = true;
            Movable = false;


            SetClientSize(new Size(227, 7 * 43 + 1));

            ClientPanel = new DXControl
            {
                Parent = this,
                Size = ClientArea.Size,
                Location = ClientArea.Location,
                PassThrough = true,
            };

            ScrollBar = new DXVScrollBar
            {
                Parent = this,
                Size = new Size(14, ClientArea.Height - 1),
            };
            ScrollBar.Location = new Point(ClientArea.Right - ScrollBar.Size.Width - 2, ClientArea.Y + 1);
            ScrollBar.ValueChanged += (o, e) => UpdateLocations();

            MouseWheel += ScrollBar.DoMouseWheel;

            BuyButton = new DXButton
            {
                Location = new Point(40, Size.Height - 43),
                Size = new Size(80, DefaultHeight),
                Parent = this,
                Label = { Text = "买" },
                Enabled = false,
            };
            BuyButton.MouseClick += (o, e) => Buy();

        }

        #region Methods

        public void NewGoods(IList<NPCGood> goods)
        {
            foreach (NPCBSGoodsCell cell in Cells)
                cell.Dispose();

            Cells.Clear();

            foreach (NPCGood good in goods)
            {
                NPCBSGoodsCell cell;
                Cells.Add(cell = new NPCBSGoodsCell
                {
                    Parent = ClientPanel,
                    Good = good
                });
                cell.MouseClick += (o, e) => SelectedCell = cell;
                cell.MouseWheel += ScrollBar.DoMouseWheel;
                cell.MouseDoubleClick += (o, e) => Buy();
            }


            ScrollBar.MaxValue = goods.Count * 43 - 2;
            SetClientSize(new Size(ClientArea.Width, Math.Min(ScrollBar.MaxValue, 7 * 43 - 3) + 1));
            ScrollBar.VisibleSize = ClientArea.Height;
            ScrollBar.Size = new Size(ScrollBar.Size.Width, ClientArea.Height - 2);

            BuyButton.Location = new Point(30, Size.Height - 43);
            ScrollBar.Value = 0;
            UpdateLocations();
        }
        private void UpdateLocations()
        {
            int y = -ScrollBar.Value + 1;

            foreach (NPCBSGoodsCell cell in Cells)
            {
                cell.Location = new Point(1, y);

                y += cell.Size.Height + 3;
            }
        }

        public void Buy()
        {
            if (GameScene.Game.Observer) return;

            if (SelectedCell == null) return;

            int shengwang = MapObject.User.Gerenshengwang;

            if (SelectedCell.Good.Item.StackSize > 1)
            {
                long maxCount = SelectedCell.Good.Item.StackSize;

                if (SelectedCell.Good.Shifoushengwang)
                {
                    maxCount = Math.Min(maxCount, shengwang / SelectedCell.Good.Shengwangdian);
                }

                if (SelectedCell.Good.Item.Weight > 0)
                {
                    switch (SelectedCell.Good.Item.ItemType)
                    {
                        case ItemType.Poison:
                        case ItemType.Amulet:
                            if (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight < SelectedCell.Good.Item.Weight)
                            {
                                GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                                return;
                            }
                            break;
                        default:
                            maxCount = Math.Min(maxCount, (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight) / SelectedCell.Good.Item.Weight);
                            break;
                    }
                }

                if (maxCount < 0)
                {
                    GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                ClientUserItem item = new ClientUserItem(SelectedCell.Good.Item, (int)Math.Min(int.MaxValue, maxCount));

                DXItemAmountWindow window = new DXItemAmountWindow("购买物品", item);
                window.ConfirmButton.MouseClick += (o, e) =>
                {
                    CEnvir.Enqueue(new C.NPCBaoshiBuy { Index = SelectedCell.Good.Index, Amount = window.Amount });
                };
            }
            else
            {
                if (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight < SelectedCell.Good.Item.Weight)
                {
                    GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                if (SelectedCell.Good.Shengwangdian > shengwang)
                {
                    GameScene.Game.ReceiveChat($"你没有足够的声望来购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                CEnvir.Enqueue(new C.NPCBaoshiBuy { Index = SelectedCell.Good.Index, Amount = 1 });

            }
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _SelectedCell = null;
                SelectedCellChanged = null;

                if (ScrollBar != null)
                {
                    if (!ScrollBar.IsDisposed)
                        ScrollBar.Dispose();

                    ScrollBar = null;
                }


                if (BuyButton != null)
                {
                    if (!BuyButton.IsDisposed)
                        BuyButton.Dispose();

                    BuyButton = null;
                }

                if (ClientPanel != null)
                {
                    if (!ClientPanel.IsDisposed)
                        ClientPanel.Dispose();

                    ClientPanel = null;
                }

                if (Cells != null)
                {
                    for (int i = 0; i < Cells.Count; i++)
                    {
                        if (Cells[i] != null)
                        {
                            if (!Cells[i].IsDisposed)
                                Cells[i].Dispose();

                            Cells[i] = null;
                        }
                    }

                    Cells.Clear();
                    Cells = null;
                }
            }

        }

        #endregion
    }
    
    public sealed class NPCBSGoodsCell : DXControl
    {
        #region Properties

        #region Good

        public NPCGood Good
        {
            get => _Good;
            set
            {
                if (_Good == value) return;

                NPCGood oldValue = _Good;
                _Good = value;

                OnGoodChanged(oldValue, value);
            }
        }
        private NPCGood _Good;
        public event EventHandler<EventArgs> GoodChanged;
        public void OnGoodChanged(NPCGood oValue, NPCGood nValue)
        {
            ItemCell.Item = new ClientUserItem(Good.Item, 1) { Flags = UserItemFlags.Locked };

            switch (Good.Item.ItemType)
            {
                case ItemType.Weapon:
                case ItemType.Armour:
                case ItemType.Helmet:
                case ItemType.Necklace:
                case ItemType.Bracelet:
                case ItemType.Ring:
                case ItemType.Shoes:
                case ItemType.Book:
                    ItemCell.Item.Flags |= UserItemFlags.NonRefinable;
                    break;
            }
            ItemNameLabel.Text = Good.Item.ItemName;

            CostLabel.Text = $"{3 + Good.Rate}个宝石卷[{Good.Item.Weight - 1}级]";
            CostLabel.Location = new Point(GoldIcon.Location.X - CostLabel.Size.Width, GoldIcon.Location.Y + GoldIcon.Size.Height - CostLabel.Size.Height);

            if (Good.Shifoushengwang)
            {
                ShengwangLabel.Text = Good.Shengwangdian.ToString("##,##0");
                ShengwangLabel.Location = new Point(ShengwangIcon.Location.X - ShengwangLabel.Size.Width, ShengwangIcon.Location.Y + ShengwangIcon.Size.Height - ShengwangLabel.Size.Height);

                ShengwangLabel.ForeColour = Good.Shengwangdian > MapObject.User.Gerenshengwang ? Color.Red : Color.LimeGreen;
            }

            switch (Good.Item.ItemType)
            {
                case ItemType.Nothing:
                    RequirementLabel.Text = string.Empty;
                    break;
                case ItemType.Meat:
                    RequirementLabel.Text = $"品质: {Good.Item.Durability / 1000}";
                    RequirementLabel.ForeColour = Color.Wheat;
                    break;
                case ItemType.Ore:
                    RequirementLabel.Text = $"纯度: {Good.Item.Durability / 1000}";
                    RequirementLabel.ForeColour = Color.Wheat;
                    break;
                case ItemType.Consumable:
                case ItemType.Scroll:
                case ItemType.Weapon:
                case ItemType.Armour:
                case ItemType.Torch:
                case ItemType.Helmet:
                case ItemType.Necklace:
                case ItemType.Bracelet:
                case ItemType.Ring:
                case ItemType.Shoes:
                case ItemType.Poison:
                case ItemType.Amulet:
                case ItemType.DarkStone:
                case ItemType.Baoshi:
                    if (GameScene.Game.CanUseItem(ItemCell.Item))
                    {
                        RequirementLabel.Text = "可用物品";
                        RequirementLabel.ForeColour = Color.Aquamarine;
                    }
                    else
                    {
                        RequirementLabel.Text = "不可用物品";
                        RequirementLabel.ForeColour = Color.Red;
                    }

                    if (Good.Shifoushengwang)
                    {
                        ShengwangIcon.Visible = true;
                    }
                    else
                    {
                        ShengwangIcon.Visible = false;
                    }
                    break;
            }


            GoodChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        #region Selected

        public bool Selected
        {
            get => _Selected;
            set
            {
                if (_Selected == value) return;

                bool oldValue = _Selected;
                _Selected = value;

                OnSelectedChanged(oldValue, value);
            }
        }
        private bool _Selected;
        public event EventHandler<EventArgs> SelectedChanged;
        public void OnSelectedChanged(bool oValue, bool nValue)
        {
            Border = Selected;
            BackColour = Selected ? Color.FromArgb(80, 80, 125) : Color.FromArgb(25, 20, 0);
            ItemCell.BorderColour = Selected ? Color.FromArgb(198, 166, 99) : Color.FromArgb(99, 83, 50);
            SelectedChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        public DXItemCell ItemCell;

        public DXImageControl GoldIcon, ShengwangIcon;
        public DXLabel ItemNameLabel, RequirementLabel, CostLabel, ShengwangLabel;

        #endregion

        public NPCBSGoodsCell()
        {
            DrawTexture = true;
            BackColour = Color.FromArgb(25, 20, 0);
            
            
            BorderColour = Color.FromArgb(198, 166, 99);
            Size = new Size(219, 40);

            ItemCell = new DXItemCell
            {
                Parent = this,
                Location = new Point((Size.Height - DXItemCell.CellHeight) / 2, (Size.Height - DXItemCell.CellHeight) / 2),
                FixedBorder = true,
                Border = true,
                ReadOnly = true,
                ItemGrid = new ClientUserItem[1],
                Slot = 0,
                FixedBorderColour = true,
                ShowCountLabel = false,
            };
            ItemNameLabel = new DXLabel
            {
                Parent = this,
                Location = new Point(ItemCell.Location.X * 2 + ItemCell.Size.Width, ItemCell.Location.Y),
                ForeColour = Color.White,
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
            };

            RequirementLabel = new DXLabel
            {
                Parent = this,
                Text = "需求",
                IsControl = false,
            };
            RequirementLabel.Location = new Point(ItemCell.Location.X * 2 + ItemCell.Size.Width, ItemCell.Location.Y + ItemCell.Size.Height - RequirementLabel.Size.Height);


            GoldIcon = new DXImageControl
            {

            };
            GoldIcon.Location = new Point(Size.Width - GoldIcon.Size.Width - ItemCell.Location.X - 10, Size.Height - GoldIcon.Size.Height - ItemCell.Location.X);

            ShengwangIcon = new DXImageControl
            {
                LibraryFile = LibraryFile.Inventory,
                Index = 128,
                Parent = this,
                IsControl = false,
                Visible = false,
            };
            ShengwangIcon.Location = new Point(Size.Width - ShengwangIcon.Size.Width - ItemCell.Location.X - 10, ItemCell.Location.Y);


            CostLabel = new DXLabel
            {
                Parent = this,
                IsControl = false,
            };

            ShengwangLabel = new DXLabel
            {
                Parent = this,
                IsControl = false,
            };
        }

        #region Methods

        public void UpdateColours()
        {

            

            switch (Good.Item.ItemType)
            {
                case ItemType.Consumable:
                case ItemType.Scroll:
                case ItemType.Weapon:
                case ItemType.Armour:
                case ItemType.Torch:
                case ItemType.Helmet:
                case ItemType.Necklace:
                case ItemType.Bracelet:
                case ItemType.Ring:
                case ItemType.Shoes:
                case ItemType.Poison:
                case ItemType.Amulet:
                case ItemType.DarkStone:
                    RequirementLabel.ForeColour = GameScene.Game.CanUseItem(ItemCell.Item) ? Color.Aquamarine : Color.Red;
                    break;
            }




        }

        public override void OnMouseEnter()
        {
            base.OnMouseEnter();

            GameScene.Game.MouseItem = ItemCell.Item;
        }
        public override void OnMouseLeave()
        {
            base.OnMouseLeave();

            GameScene.Game.MouseItem = null;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _Good = null;
                GoodChanged = null;

                _Selected = false;
                SelectedChanged = null;

                if (ItemCell != null)
                {
                    if (!ItemCell.IsDisposed)
                        ItemCell.Dispose();

                    ItemCell = null;
                }

                if (GoldIcon != null)
                {
                    if (!GoldIcon.IsDisposed)
                        GoldIcon.Dispose();

                    GoldIcon = null;
                }

                if (ShengwangIcon != null)
                {
                    if (!ShengwangIcon.IsDisposed)
                        ShengwangIcon.Dispose();

                    ShengwangIcon = null;
                }

                if (ItemNameLabel != null)
                {
                    if (!ItemNameLabel.IsDisposed)
                        ItemNameLabel.Dispose();

                    ItemNameLabel = null;
                }

                if (RequirementLabel != null)
                {
                    if (!RequirementLabel.IsDisposed)
                        RequirementLabel.Dispose();

                    RequirementLabel = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }

                if (ShengwangLabel != null)
                {
                    if (!ShengwangLabel.IsDisposed)
                        ShengwangLabel.Dispose();

                    ShengwangLabel = null;
                }
            }

        }

        #endregion
    }
    
    public sealed class NPCFubenBiDialog : DXWindow
    {
        #region Properties

        #region SelectedCell

        public NPCFubenBiGoodsCell SelectedCell
        {
            get => _SelectedCell;
            set
            {
                if (_SelectedCell == value) return;

                NPCFubenBiGoodsCell oldValue = _SelectedCell;
                _SelectedCell = value;

                OnSelectedCellChanged(oldValue, value);
            }
        }
        private NPCFubenBiGoodsCell _SelectedCell;
        public event EventHandler<EventArgs> SelectedCellChanged;
        public void OnSelectedCellChanged(NPCFubenBiGoodsCell oValue, NPCFubenBiGoodsCell nValue)
        {
            if (oValue != null) oValue.Selected = false;
            if (nValue != null) nValue.Selected = true;

            BuyButton.Enabled = nValue != null;

            SelectedCellChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        private DXVScrollBar ScrollBar;

        public List<NPCFubenBiGoodsCell> Cells = new List<NPCFubenBiGoodsCell>();
        private DXButton BuyButton;
        public DXControl ClientPanel;

        public override void OnClientAreaChanged(Rectangle oValue, Rectangle nValue)
        {
            base.OnClientAreaChanged(oValue, nValue);

            if (ClientPanel == null) return;

            ClientPanel.Size = ClientArea.Size;
            ClientPanel.Location = ClientArea.Location;

        }


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCFubenBiDialog()
        {
            TitleLabel.Text = "副本币商店";

            HasFooter = true;
            Movable = false;


            SetClientSize(new Size(327, 7 * 43 + 1));

            ClientPanel = new DXControl
            {
                Parent = this,
                Size = ClientArea.Size,
                Location = ClientArea.Location,
                PassThrough = true,
            };

            ScrollBar = new DXVScrollBar
            {
                Parent = this,
                Size = new Size(14, ClientArea.Height - 1),
            };
            ScrollBar.Location = new Point(ClientArea.Right - ScrollBar.Size.Width - 2, ClientArea.Y + 1);
            ScrollBar.ValueChanged += (o, e) => UpdateLocations();

            MouseWheel += ScrollBar.DoMouseWheel;

            BuyButton = new DXButton
            {
                Location = new Point(40, Size.Height - 43),
                Size = new Size(80, DefaultHeight),
                Parent = this,
                Label = { Text = "买" },
                Enabled = false,
            };
            BuyButton.MouseClick += (o, e) => Buy();

        }

        #region Methods

        public void NewGoods(IList<NPCGood> goods)
        {
            foreach (NPCFubenBiGoodsCell cell in Cells)
                cell.Dispose();

            Cells.Clear();

            foreach (NPCGood good in goods)
            {
                NPCFubenBiGoodsCell cell;
                Cells.Add(cell = new NPCFubenBiGoodsCell
                {
                    Parent = ClientPanel,
                    Good = good
                });
                cell.MouseClick += (o, e) => SelectedCell = cell;
                cell.MouseWheel += ScrollBar.DoMouseWheel;
                cell.MouseDoubleClick += (o, e) => Buy();
            }


            ScrollBar.MaxValue = goods.Count * 43 - 2;
            SetClientSize(new Size(ClientArea.Width, Math.Min(ScrollBar.MaxValue, 7 * 43 - 3) + 1));
            ScrollBar.VisibleSize = ClientArea.Height;
            ScrollBar.Size = new Size(ScrollBar.Size.Width, ClientArea.Height - 2);

            BuyButton.Location = new Point(140, Size.Height - 43);
            ScrollBar.Value = 0;
            UpdateLocations();
        }
        private void UpdateLocations()
        {
            int y = -ScrollBar.Value + 1;

            foreach (NPCFubenBiGoodsCell cell in Cells)
            {
                cell.Location = new Point(1, y);

                y += cell.Size.Height + 3;
            }
        }

        public void Buy()
        {
            if (GameScene.Game.Observer) return;

            if (SelectedCell == null) return;

            int shengwang = MapObject.User.Gerenshengwang;

            if (SelectedCell.Good.Item.StackSize > 1)
            {
                long maxCount = SelectedCell.Good.Item.StackSize;

                if (SelectedCell.Good.Shifoushengwang)
                {
                    maxCount = Math.Min(maxCount, shengwang / SelectedCell.Good.Shengwangdian);
                }

                if (SelectedCell.Good.Item.Weight > 0)
                {
                    switch (SelectedCell.Good.Item.ItemType)
                    {
                        case ItemType.Poison:
                        case ItemType.Amulet:
                            if (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight < SelectedCell.Good.Item.Weight)
                            {
                                GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                                return;
                            }
                            break;
                        default:
                            maxCount = Math.Min(maxCount, (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight) / SelectedCell.Good.Item.Weight);
                            break;
                    }
                }

                if (maxCount < 0)
                {
                    GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                ClientUserItem item = new ClientUserItem(SelectedCell.Good.Item, (int)Math.Min(int.MaxValue, maxCount));

                DXItemAmountWindow window = new DXItemAmountWindow("购买物品", item);
                window.ConfirmButton.MouseClick += (o, e) =>
                {
                    CEnvir.Enqueue(new C.NPCFubenBiBuy { Index = SelectedCell.Good.Index, Amount = window.Amount });
                };
            }
            else
            {
                if (MapObject.User.Stats[Stat.BagWeight] - MapObject.User.BagWeight < SelectedCell.Good.Item.Weight)
                {
                    GameScene.Game.ReceiveChat($"背包超重,无法购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                if (SelectedCell.Good.Shengwangdian > shengwang)
                {
                    GameScene.Game.ReceiveChat($"你没有足够的声望来购买 '{SelectedCell.Good.Item.ItemName}'.", MessageType.System);
                    return;
                }

                CEnvir.Enqueue(new C.NPCFubenBiBuy { Index = SelectedCell.Good.Index, Amount = 1 });

            }
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _SelectedCell = null;
                SelectedCellChanged = null;

                if (ScrollBar != null)
                {
                    if (!ScrollBar.IsDisposed)
                        ScrollBar.Dispose();

                    ScrollBar = null;
                }


                if (BuyButton != null)
                {
                    if (!BuyButton.IsDisposed)
                        BuyButton.Dispose();

                    BuyButton = null;
                }

                if (ClientPanel != null)
                {
                    if (!ClientPanel.IsDisposed)
                        ClientPanel.Dispose();

                    ClientPanel = null;
                }

                if (Cells != null)
                {
                    for (int i = 0; i < Cells.Count; i++)
                    {
                        if (Cells[i] != null)
                        {
                            if (!Cells[i].IsDisposed)
                                Cells[i].Dispose();

                            Cells[i] = null;
                        }
                    }

                    Cells.Clear();
                    Cells = null;
                }
            }

        }

        #endregion
    }
    
    public sealed class NPCFubenBiGoodsCell : DXControl
    {
        #region Properties
        #region Good

        public NPCGood Good
        {
            get => _Good;
            set
            {
                if (_Good == value) return;

                NPCGood oldValue = _Good;
                _Good = value;

                OnGoodChanged(oldValue, value);
            }
        }
        private NPCGood _Good;
        public event EventHandler<EventArgs> GoodChanged;
        public void OnGoodChanged(NPCGood oValue, NPCGood nValue)
        {
            ItemCell.Item = new ClientUserItem(Good.Item, 1) { Flags = UserItemFlags.Locked };

            switch (Good.Item.ItemType)
            {
                case ItemType.Weapon:
                case ItemType.Armour:
                case ItemType.Helmet:
                case ItemType.Necklace:
                case ItemType.Bracelet:
                case ItemType.Ring:
                case ItemType.Shoes:
                case ItemType.Book:
                    ItemCell.Item.Flags |= UserItemFlags.NonRefinable;
                    break;
            }
            ItemNameLabel.Text = Good.Item.ItemName;

            CostLabel.Text = $"{Good.Rate}个副本币[{GameScene.Game.MapControl.MapInfo.Description}]";
            CostLabel.Location = new Point(GoldIcon.Location.X - CostLabel.Size.Width, GoldIcon.Location.Y + GoldIcon.Size.Height - CostLabel.Size.Height);

            if (Good.Shifoushengwang)
            {
                ShengwangLabel.Text = Good.Shengwangdian.ToString("##,##0");
                ShengwangLabel.Location = new Point(ShengwangIcon.Location.X - ShengwangLabel.Size.Width, ShengwangIcon.Location.Y + ShengwangIcon.Size.Height - ShengwangLabel.Size.Height);

                ShengwangLabel.ForeColour = Good.Shengwangdian > MapObject.User.Gerenshengwang ? Color.Red : Color.LimeGreen;
            }

            switch (Good.Item.ItemType)
            {
                case ItemType.Nothing:
                    RequirementLabel.Text = string.Empty;
                    break;
                case ItemType.Meat:
                    RequirementLabel.Text = $"品质: {Good.Item.Durability / 1000}";
                    RequirementLabel.ForeColour = Color.Wheat;
                    break;
                case ItemType.Ore:
                    RequirementLabel.Text = $"纯度: {Good.Item.Durability / 1000}";
                    RequirementLabel.ForeColour = Color.Wheat;
                    break;
                case ItemType.Consumable:
                case ItemType.Scroll:
                case ItemType.Weapon:
                case ItemType.Armour:
                case ItemType.Torch:
                case ItemType.Helmet:
                case ItemType.Necklace:
                case ItemType.Bracelet:
                case ItemType.Ring:
                case ItemType.Shoes:
                case ItemType.Poison:
                case ItemType.Amulet:
                case ItemType.DarkStone:
                case ItemType.Baoshi:
                    if (GameScene.Game.CanUseItem(ItemCell.Item))
                    {
                        RequirementLabel.Text = "可用物品";
                        RequirementLabel.ForeColour = Color.Aquamarine;
                    }
                    else
                    {
                        RequirementLabel.Text = "不可用物品";
                        RequirementLabel.ForeColour = Color.Red;
                    }

                    if (Good.Shifoushengwang)
                    {
                        ShengwangIcon.Visible = true;
                    }
                    else
                    {
                        ShengwangIcon.Visible = false;
                    }
                    break;
            }


            GoodChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        #region Selected

        public bool Selected
        {
            get => _Selected;
            set
            {
                if (_Selected == value) return;

                bool oldValue = _Selected;
                _Selected = value;

                OnSelectedChanged(oldValue, value);
            }
        }
        private bool _Selected;
        public event EventHandler<EventArgs> SelectedChanged;
        public void OnSelectedChanged(bool oValue, bool nValue)
        {
            Border = Selected;
            BackColour = Selected ? Color.FromArgb(80, 80, 125) : Color.FromArgb(25, 20, 0);
            ItemCell.BorderColour = Selected ? Color.FromArgb(198, 166, 99) : Color.FromArgb(99, 83, 50);
            SelectedChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        public DXItemCell ItemCell;

        public DXImageControl GoldIcon, ShengwangIcon;
        public DXLabel ItemNameLabel, RequirementLabel, CostLabel, ShengwangLabel;

        #endregion

        public NPCFubenBiGoodsCell()
        {
            DrawTexture = true;
            BackColour = Color.FromArgb(25, 20, 0);
            
            
            BorderColour = Color.FromArgb(198, 166, 99);
            Size = new Size(319, 40);

            ItemCell = new DXItemCell
            {
                Parent = this,
                Location = new Point((Size.Height - DXItemCell.CellHeight) / 2, (Size.Height - DXItemCell.CellHeight) / 2),
                FixedBorder = true,
                Border = true,
                ReadOnly = true,
                ItemGrid = new ClientUserItem[1],
                Slot = 0,
                FixedBorderColour = true,
                ShowCountLabel = false,
            };
            ItemNameLabel = new DXLabel
            {
                Parent = this,
                Location = new Point(ItemCell.Location.X * 2 + ItemCell.Size.Width, ItemCell.Location.Y),
                ForeColour = Color.White,
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
            };

            RequirementLabel = new DXLabel
            {
                Parent = this,
                Text = "需求",
                IsControl = false,
            };
            RequirementLabel.Location = new Point(ItemCell.Location.X * 2 + ItemCell.Size.Width, ItemCell.Location.Y + ItemCell.Size.Height - RequirementLabel.Size.Height);


            GoldIcon = new DXImageControl
            {

            };
            GoldIcon.Location = new Point(Size.Width - GoldIcon.Size.Width - ItemCell.Location.X - 10, Size.Height - GoldIcon.Size.Height - ItemCell.Location.X);

            ShengwangIcon = new DXImageControl
            {
                LibraryFile = LibraryFile.Inventory,
                Index = 128,
                Parent = this,
                IsControl = false,
                Visible = false,
            };
            ShengwangIcon.Location = new Point(Size.Width - ShengwangIcon.Size.Width - ItemCell.Location.X - 10, ItemCell.Location.Y);


            CostLabel = new DXLabel
            {
                Parent = this,
                IsControl = false,
            };

            ShengwangLabel = new DXLabel
            {
                Parent = this,
                IsControl = false,
            };
        }

        #region Methods

        public void UpdateColours()
        {

            

            switch (Good.Item.ItemType)
            {
                case ItemType.Consumable:
                case ItemType.Scroll:
                case ItemType.Weapon:
                case ItemType.Armour:
                case ItemType.Torch:
                case ItemType.Helmet:
                case ItemType.Necklace:
                case ItemType.Bracelet:
                case ItemType.Ring:
                case ItemType.Shoes:
                case ItemType.Poison:
                case ItemType.Amulet:
                case ItemType.DarkStone:
                    RequirementLabel.ForeColour = GameScene.Game.CanUseItem(ItemCell.Item) ? Color.Aquamarine : Color.Red;
                    break;
            }




        }

        public override void OnMouseEnter()
        {
            base.OnMouseEnter();

            GameScene.Game.MouseItem = ItemCell.Item;
        }
        public override void OnMouseLeave()
        {
            base.OnMouseLeave();

            GameScene.Game.MouseItem = null;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _Good = null;
                GoodChanged = null;

                _Selected = false;
                SelectedChanged = null;

                if (ItemCell != null)
                {
                    if (!ItemCell.IsDisposed)
                        ItemCell.Dispose();

                    ItemCell = null;
                }

                if (GoldIcon != null)
                {
                    if (!GoldIcon.IsDisposed)
                        GoldIcon.Dispose();

                    GoldIcon = null;
                }

                if (ShengwangIcon != null)
                {
                    if (!ShengwangIcon.IsDisposed)
                        ShengwangIcon.Dispose();

                    ShengwangIcon = null;
                }

                if (ItemNameLabel != null)
                {
                    if (!ItemNameLabel.IsDisposed)
                        ItemNameLabel.Dispose();

                    ItemNameLabel = null;
                }

                if (RequirementLabel != null)
                {
                    if (!RequirementLabel.IsDisposed)
                        RequirementLabel.Dispose();

                    RequirementLabel = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }

                if (ShengwangLabel != null)
                {
                    if (!ShengwangLabel.IsDisposed)
                        ShengwangLabel.Dispose();

                    ShengwangLabel = null;
                }
            }

        }

        #endregion
    }
    public sealed class NPCGoodsCell : DXControl
    {
        #region Properties

        #region Good

        public NPCGood Good
        {
            get => _Good;
            set
            {
                if (_Good == value) return;

                NPCGood oldValue = _Good;
                _Good = value;

                OnGoodChanged(oldValue, value);
            }
        }
        private NPCGood _Good;
        public event EventHandler<EventArgs> GoodChanged;
        public void OnGoodChanged(NPCGood oValue, NPCGood nValue)
        {
            ItemCell.Item = new ClientUserItem(Good.Item, 1) { Flags = UserItemFlags.Locked };

            switch (Good.Item.ItemType)
            {
                case ItemType.Weapon:
                case ItemType.Armour:
                case ItemType.Helmet:
                case ItemType.Necklace:
                case ItemType.Bracelet:
                case ItemType.Ring:
                case ItemType.Shoes:
                case ItemType.Book:
                    ItemCell.Item.Flags |= UserItemFlags.NonRefinable;
                    break;
            }
            ItemNameLabel.Text = Good.Item.ItemName;

            CostLabel.Text = Good.Cost.ToString("##,##0");
            CostLabel.Location = new Point(GoldIcon.Location.X - CostLabel.Size.Width, GoldIcon.Location.Y + GoldIcon.Size.Height - CostLabel.Size.Height);

            CostLabel.ForeColour = Good.Cost > MapObject.User.Gold ? Color.Red : Color.Yellow;

            if (Good.Shifoushengwang)
            {
                ShengwangLabel.Text = Good.Shengwangdian.ToString("##,##0");
                ShengwangLabel.Location = new Point(ShengwangIcon.Location.X - ShengwangLabel.Size.Width, ShengwangIcon.Location.Y + ShengwangIcon.Size.Height - ShengwangLabel.Size.Height);

                ShengwangLabel.ForeColour = Good.Shengwangdian > MapObject.User.Gerenshengwang ? Color.Red : Color.LimeGreen;
            }

            switch (Good.Item.ItemType)
            {
                case ItemType.Nothing:
                    RequirementLabel.Text = string.Empty;
                    if (Good.Shifoushengwang)
                    {
                        ShengwangIcon.Visible = true;
                    }
                    else
                    {
                        ShengwangIcon.Visible = false;
                    }
                    break;
                case ItemType.Meat:
                    RequirementLabel.Text = $"品质: {Good.Item.Durability / 1000}";
                    RequirementLabel.ForeColour = Color.Wheat;
                    break;
                case ItemType.Ore:
                    RequirementLabel.Text = $"纯度: {Good.Item.Durability / 1000}";
                    RequirementLabel.ForeColour = Color.Wheat;
                    break;
                case ItemType.Consumable:
                case ItemType.Scroll:
                case ItemType.Weapon:
                case ItemType.Armour:
                case ItemType.Torch:
                case ItemType.Helmet:
                case ItemType.Necklace:
                case ItemType.Bracelet:
                case ItemType.Ring:
                case ItemType.Shoes:
                case ItemType.Poison:
                case ItemType.Amulet:
                case ItemType.DarkStone:

                    if (GameScene.Game.CanUseItem(ItemCell.Item))
                    {
                        RequirementLabel.Text = "可用物品";
                        RequirementLabel.ForeColour = Color.Aquamarine;
                    }
                    else
                    {
                        RequirementLabel.Text = "不可用物品";
                        RequirementLabel.ForeColour = Color.Red;
                    }

                    if (Good.Shifoushengwang)
                    {
                        ShengwangIcon.Visible = true;
                    }
                    else
                    {
                        ShengwangIcon.Visible = false;
                    }
                    break;
            }


            GoodChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        #region Selected

        public bool Selected
        {
            get => _Selected;
            set
            {
                if (_Selected == value) return;

                bool oldValue = _Selected;
                _Selected = value;

                OnSelectedChanged(oldValue, value);
            }
        }
        private bool _Selected;
        public event EventHandler<EventArgs> SelectedChanged;
        public void OnSelectedChanged(bool oValue, bool nValue)
        {
            Border = Selected;
            BackColour = Selected ? Color.FromArgb(80, 80, 125) : Color.FromArgb(25, 20, 0);
            ItemCell.BorderColour = Selected ? Color.FromArgb(198, 166, 99) : Color.FromArgb(99, 83, 50);
            SelectedChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        public DXItemCell ItemCell;

        public DXImageControl GoldIcon, ShengwangIcon;
        public DXLabel ItemNameLabel, RequirementLabel, CostLabel, ShengwangLabel;

        #endregion

        public NPCGoodsCell()
        {
            DrawTexture = true;
            BackColour = Color.FromArgb(25, 20, 0);
            
            
            BorderColour = Color.FromArgb(198, 166, 99);
            Size = new Size(219, 40);

            ItemCell = new DXItemCell
            {
                Parent = this,
                Location = new Point((Size.Height - DXItemCell.CellHeight) / 2, (Size.Height - DXItemCell.CellHeight) / 2),
                FixedBorder = true,
                Border = true,
                ReadOnly = true,
                ItemGrid = new ClientUserItem[1],
                Slot = 0,
                FixedBorderColour = true,
                ShowCountLabel = false,
            };
            ItemNameLabel = new DXLabel
            {
                Parent = this,
                Location = new Point(ItemCell.Location.X * 2 + ItemCell.Size.Width, ItemCell.Location.Y),
                ForeColour = Color.White,
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
            };

            RequirementLabel = new DXLabel
            {
                Parent = this,
                Text = "需求",
                IsControl = false,
            };
            RequirementLabel.Location = new Point(ItemCell.Location.X * 2 + ItemCell.Size.Width, ItemCell.Location.Y + ItemCell.Size.Height - RequirementLabel.Size.Height);


            GoldIcon = new DXImageControl
            {
                LibraryFile = LibraryFile.Inventory,
                Index = 121,
                Parent = this,
                IsControl = false,
            };
            GoldIcon.Location = new Point(Size.Width - GoldIcon.Size.Width - ItemCell.Location.X - 10, Size.Height - GoldIcon.Size.Height - ItemCell.Location.X);

            ShengwangIcon = new DXImageControl
            {
                LibraryFile = LibraryFile.Inventory,
                Index = 128,
                Parent = this,
                IsControl = false,
                Visible = false,
            };
            ShengwangIcon.Location = new Point(Size.Width - ShengwangIcon.Size.Width - ItemCell.Location.X - 10, ItemCell.Location.Y);


            CostLabel = new DXLabel
            {
                Parent = this,
                IsControl = false,
            };

            ShengwangLabel = new DXLabel
            {
                Parent = this,
                IsControl = false,
            };
        }

        #region Methods

        public void UpdateColours()
        {

            CostLabel.ForeColour = Good.Cost > MapObject.User.Gold ? Color.Red : Color.Yellow;

            switch (Good.Item.ItemType)
            {
                case ItemType.Consumable:
                case ItemType.Scroll:
                case ItemType.Weapon:
                case ItemType.Armour:
                case ItemType.Torch:
                case ItemType.Helmet:
                case ItemType.Necklace:
                case ItemType.Bracelet:
                case ItemType.Ring:
                case ItemType.Shoes:
                case ItemType.Poison:
                case ItemType.Amulet:
                case ItemType.DarkStone:
                case ItemType.Baoshi:
                    RequirementLabel.ForeColour = GameScene.Game.CanUseItem(ItemCell.Item) ? Color.Aquamarine : Color.Red;
                    break;
            }

        }

        public override void OnMouseEnter()
        {
            base.OnMouseEnter();

            GameScene.Game.MouseItem = ItemCell.Item;
        }
        public override void OnMouseLeave()
        {
            base.OnMouseLeave();

            GameScene.Game.MouseItem = null;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _Good = null;
                GoodChanged = null;

                _Selected = false;
                SelectedChanged = null;

                if (ItemCell != null)
                {
                    if (!ItemCell.IsDisposed)
                        ItemCell.Dispose();

                    ItemCell = null;
                }

                if (GoldIcon != null)
                {
                    if (!GoldIcon.IsDisposed)
                        GoldIcon.Dispose();

                    GoldIcon = null;
                }

                if (ShengwangIcon != null)
                {
                    if (!ShengwangIcon.IsDisposed)
                        ShengwangIcon.Dispose();

                    ShengwangIcon = null;
                }

                if (ItemNameLabel != null)
                {
                    if (!ItemNameLabel.IsDisposed)
                        ItemNameLabel.Dispose();

                    ItemNameLabel = null;
                }

                if (RequirementLabel != null)
                {
                    if (!RequirementLabel.IsDisposed)
                        RequirementLabel.Dispose();

                    RequirementLabel = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }

                if (ShengwangLabel != null)
                {
                    if (!ShengwangLabel.IsDisposed)
                        ShengwangLabel.Dispose();

                    ShengwangLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCSellDialog : DXWindow
    {
        #region Properties

        public DXItemGrid Grid;
        public DXButton SellButton;
        public DXLabel GoldLabel;
        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
                Grid.ClearLinks();
        }


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCSellDialog()
        {
            TitleLabel.Text = "卖出物品";

            Grid = new DXItemGrid
            {
                GridSize = new Size(7, 7),
                Parent = this,
                GridType = GridType.Sell,
                Linked = true
            };

            Movable = false;
            SetClientSize(new Size(Grid.Size.Width, Grid.Size.Height + 50));
            Grid.Location = ClientArea.Location;

            foreach (DXItemCell cell in Grid.Grid)
            {
                cell.LinkChanged += Cell_LinkChanged;
            }


            GoldLabel = new DXLabel
            {
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp
            };

            new DXLabel
            {
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter | TextFormatFlags.HorizontalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "销售总额",
                Size = new Size(79, 20),
                IsControl = false,
            };

            DXButton selectAll = new DXButton
            {
                Label = { Text = "角包全选" },
                Location = new Point(ClientArea.X, GoldLabel.Location.Y + GoldLabel.Size.Height + 7),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(60, SmallButtonHeight)
            };
            selectAll.MouseClick += (o, e) =>
            {
                foreach (DXItemCell cell in GameScene.Game.InventoryBox.Grid.Grid)
                {
                    if (!cell.CheckLink(Grid)) continue;

                    cell.MoveItem(Grid, true);
                }
            };

            DXButton CompanionselectAll = new DXButton
            {
                Label = { Text = "宠包全选" },
                Location = new Point(ClientArea.Right - 178, GoldLabel.Location.Y + GoldLabel.Size.Height + 7),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(60, SmallButtonHeight)
            };
            CompanionselectAll.MouseClick += (o, e) =>
            {
                foreach (DXItemCell cell in GameScene.Game.CompanionBox.InventoryGrid.Grid)
                {
                    if (!cell.CheckLink(Grid)) continue;

                    cell.MoveItem(Grid, true);
                }
            };

            SellButton = new DXButton
            {
                Label = { Text = "卖" },
                Location = new Point(ClientArea.Right - 61, GoldLabel.Location.Y + GoldLabel.Size.Height + 7),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(60, SmallButtonHeight),
                Enabled = false,
            };
            SellButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                List<CellLinkInfo> links = new List<CellLinkInfo>();

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCSell { Links = links });
            };
        }

        #region Methods
        private void Cell_LinkChanged(object sender, EventArgs e)
        {
            long sum = 0;
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                if (cell.Link?.Item == null) continue;

                count++;
                sum += cell.Link.Item.Price(cell.LinkedCount);
            }


            GoldLabel.Text = sum.ToString("#,##0");

            SellButton.Enabled = count > 0;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (SellButton != null)
                {
                    if (!SellButton.IsDisposed)
                        SellButton.Dispose();

                    SellButton = null;
                }

                if (GoldLabel != null)
                {
                    if (!GoldLabel.IsDisposed)
                        GoldLabel.Dispose();

                    GoldLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCRepairDialog : DXWindow
    {
        #region Properties
        public DXItemGrid Grid;

        public DXLabel GoldLabel;
        public DXButton RepairButton, GuildStorageButton;
        public DXCheckBox SpecialCheckBox;
        public DXCheckBox GuildCheckBox;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
            {
                GameScene.Game.InventoryBox.Visible = true;
                GameScene.Game.CharacterBox.Visible = true;
                GameScene.Game.StorageBox.Visible = true;
            }

            if (!IsVisible)
                Grid.ClearLinks();
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCRepairDialog()
        {
            TitleLabel.Text = "修理物品";
            Movable = false;

            Grid = new DXItemGrid
            {
                GridSize = new Size(14, 5),
                Parent = this,
                GridType = GridType.Repair,
                Linked = true
            };

            SetClientSize(new Size(Grid.Size.Width, Grid.Size.Height + 70));
            Grid.Location = ClientArea.Location;

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();


            GoldLabel = new DXLabel
            {
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 65),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
            };

            new DXLabel
            {
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter | TextFormatFlags.HorizontalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 65),
                Text = "修理费用:",
                Size = new Size(79, 20),
                IsControl = false,
            };

            DXButton inventory = new DXButton
            {
                Label = { Text = "背包" },
                Location = new Point(ClientArea.X, GoldLabel.Location.Y + GoldLabel.Size.Height + 5),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(79, SmallButtonHeight)
            };
            inventory.MouseClick += (o, e) =>
            {
                foreach (DXItemCell cell in GameScene.Game.InventoryBox.Grid.Grid)
                {
                    if (!cell.CheckLink(Grid)) continue;

                    cell.MoveItem(Grid, true);
                }
            };

            DXButton equipment = new DXButton
            {
                Label = { Text = "装备" },
                Location = new Point(ClientArea.X + 5 + inventory.Size.Width, GoldLabel.Location.Y + GoldLabel.Size.Height + 5),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(79, SmallButtonHeight)
            };
            equipment.MouseClick += (o, e) =>
            {
                foreach (DXItemCell cell in GameScene.Game.CharacterBox.Grid)
                {
                    if (!cell.CheckLink(Grid)) continue;

                    cell.MoveItem(Grid, true);
                }
            };


            DXButton storage = new DXButton
            {
                Label = { Text = "仓库" },
                Location = new Point(ClientArea.X, GoldLabel.Location.Y + GoldLabel.Size.Height + inventory.Size.Height + 5 + 5),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(79, SmallButtonHeight),
            };
            storage.MouseClick += (o, e) =>
            {
                foreach (DXItemCell cell in GameScene.Game.StorageBox.Grid.Grid)
                {
                    if (!cell.CheckLink(Grid)) continue;

                    cell.MoveItem(Grid, true);
                }
            };

            GuildStorageButton = new DXButton
            {
                Label = { Text = "公会仓库" },
                Location = new Point(ClientArea.X + inventory.Size.Width + 5, GoldLabel.Location.Y + GoldLabel.Size.Height + inventory.Size.Height + 5 + 5),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(79, SmallButtonHeight),
                Enabled = false,
            };
            GuildStorageButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.GuildBox.GuildInfo == null) return;

                foreach (DXItemCell cell in GameScene.Game.GuildBox.StorageGrid.Grid)
                {
                    if (!cell.CheckLink(Grid)) continue;

                    cell.MoveItem(Grid, true);
                }
            };


            SpecialCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "特殊修理" },
                Checked = Config.SpecialRepair,
            };
            SpecialCheckBox.Location = new Point(ClientArea.Right - 80 - SpecialCheckBox.Size.Width - 5, GoldLabel.Location.Y + GoldLabel.Size.Height + 7);
            SpecialCheckBox.CheckedChanged += (o, e) =>
            {
                Config.SpecialRepair = SpecialCheckBox.Checked;

                if (SpecialCheckBox.Checked)
                    foreach (DXItemCell cell in Grid.Grid)
                    {
                        if (cell.Item == null) continue;
                        if (CEnvir.Now > cell.Item.NextSpecialRepair) continue;


                        cell.Link = null;
                    }

                CalculateCost();
            };


            GuildCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "使用公会经费" },
                Enabled = false,
            };
            GuildCheckBox.Location = new Point(ClientArea.Right - 80 - GuildCheckBox.Size.Width - 5, GoldLabel.Location.Y + GoldLabel.Size.Height + SpecialCheckBox.Size.Height + 5 + 7);
            GuildCheckBox.CheckedChanged += (o, e) => CalculateCost();


            RepairButton = new DXButton
            {
                Label = { Text = "修理" },
                Location = new Point(ClientArea.Right - 80, GoldLabel.Location.Y + GoldLabel.Size.Height + 5),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(79, SmallButtonHeight),
                Enabled = false,
            };
            RepairButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                List<CellLinkInfo> links = new List<CellLinkInfo>();

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCRepair { Links = links, Special = SpecialCheckBox.Checked, GuildFunds = GuildCheckBox.Checked });

                GuildCheckBox.Checked = false;
            };
        }

        #region Methods
        private void CalculateCost()
        {
            int sum = 0;

            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                if (cell.Link?.Item == null) continue;

                sum += cell.Link.Item.RepairCost(SpecialCheckBox.Checked);
                count++;
            }

            if (GuildCheckBox.Checked)
            {
                GoldLabel.ForeColour = sum > GameScene.Game.GuildBox.GuildInfo.GuildFunds ? Color.Red : Color.White;
            }
            else
            {
                GoldLabel.ForeColour = sum > MapObject.User.Gold ? Color.Red : Color.White;
            }

            GoldLabel.Text = sum.ToString("#,##0");

            if (GuildCheckBox.Checked)
            {
                RepairButton.Enabled = sum <= GameScene.Game.GuildBox.GuildInfo.GuildFunds && count > 0;
            }
            else
            {
                RepairButton.Enabled = sum <= MapObject.User.Gold && count > 0;
            }

        }
        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (GoldLabel != null)
                {
                    if (!GoldLabel.IsDisposed)
                        GoldLabel.Dispose();

                    GoldLabel = null;
                }

                if (RepairButton != null)
                {
                    if (!RepairButton.IsDisposed)
                        RepairButton.Dispose();

                    RepairButton = null;
                }

                if (GuildStorageButton != null)
                {
                    if (!GuildStorageButton.IsDisposed)
                        GuildStorageButton.Dispose();

                    GuildStorageButton = null;
                }

                if (SpecialCheckBox != null)
                {
                    if (!SpecialCheckBox.IsDisposed)
                        SpecialCheckBox.Dispose();

                    SpecialCheckBox = null;
                }

                if (GuildCheckBox != null)
                {
                    if (!GuildCheckBox.IsDisposed)
                        GuildCheckBox.Dispose();

                    GuildCheckBox = null;
                }

            }

        }

        #endregion
    }

    public sealed class NPCRefineDialog : DXWindow
    {
        #region Properties

        #region RefineType

        public RefineType RefineType
        {
            get => _RefineType;
            set
            {
                if (_RefineType == value) return;

                RefineType oldValue = _RefineType;
                _RefineType = value;

                OnRefineTypeChanged(oldValue, value);
            }
        }
        private RefineType _RefineType;
        public event EventHandler<EventArgs> RefineTypeChanged;
        public void OnRefineTypeChanged(RefineType oValue, RefineType nValue)
        {
            switch (oValue)
            {
                case RefineType.None:
                    SubmitButton.Enabled = true;
                    break;
                case RefineType.Durability:
                    DurabilityCheckBox.Checked = false;
                    break;
                case RefineType.DC:
                    DCCheckBox.Checked = false;
                    break;
                case RefineType.SpellPower:
                    SPCheckBox.Checked = false;
                    break;
                case RefineType.Fire:
                    FireCheckBox.Checked = false;
                    break;
                case RefineType.Ice:
                    IceCheckBox.Checked = false;
                    break;
                case RefineType.Lightning:
                    LightningCheckBox.Checked = false;
                    break;
                case RefineType.Wind:
                    WindCheckBox.Checked = false;
                    break;
                case RefineType.Holy:
                    HolyCheckBox.Checked = false;
                    break;
                case RefineType.Dark:
                    DarkCheckBox.Checked = false;
                    break;
                case RefineType.Phantom:
                    PhantomCheckBox.Checked = false;
                    break;
            }

            switch (nValue)
            {
                case RefineType.None:
                    SubmitButton.Enabled = false;
                    break;
                case RefineType.Durability:
                    DurabilityCheckBox.Checked = true;
                    break;
                case RefineType.DC:
                    DCCheckBox.Checked = true;
                    break;
                case RefineType.SpellPower:
                    SPCheckBox.Checked = true;
                    break;
                case RefineType.Fire:
                    FireCheckBox.Checked = true;
                    break;
                case RefineType.Ice:
                    IceCheckBox.Checked = true;
                    break;
                case RefineType.Lightning:
                    LightningCheckBox.Checked = true;
                    break;
                case RefineType.Wind:
                    WindCheckBox.Checked = true;
                    break;
                case RefineType.Holy:
                    HolyCheckBox.Checked = true;
                    break;
                case RefineType.Dark:
                    DarkCheckBox.Checked = true;
                    break;
                case RefineType.Phantom:
                    PhantomCheckBox.Checked = true;
                    break;
            }

            RefineTypeChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        #region RefineQuality

        public RefineQuality RefineQuality
        {
            get => _RefineQuality;
            set
            {
                if (_RefineQuality == value) return;

                RefineQuality oldValue = _RefineQuality;
                _RefineQuality = value;

                OnRefineQualityChanged(oldValue, value);
            }
        }
        private RefineQuality _RefineQuality;
        public event EventHandler<EventArgs> RefineQualityChanged;
        public void OnRefineQualityChanged(RefineQuality oValue, RefineQuality nValue)
        {
            switch (nValue)
            {
                case RefineQuality.Rush:
                    DurationLabel.Text = "";
                    break;
                default:
                    DurationLabel.Text = Functions.ToString(CartoonGlobals.RefineTimes[nValue], false);
                    break;
            }

            RefineQualityChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        public DXItemGrid BlackIronGrid, AccessoryGrid, SpecialGrid;

        public DXCheckBox DurabilityCheckBox, DCCheckBox, SPCheckBox, FireCheckBox, IceCheckBox, LightningCheckBox, WindCheckBox, HolyCheckBox, DarkCheckBox, PhantomCheckBox;
        public DXButton SubmitButton;

        public DXComboBox RefineQualityBox;
        public DXLabel DurationLabel;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                BlackIronGrid.ClearLinks();
                AccessoryGrid.ClearLinks();
                SpecialGrid.ClearLinks();
            }
        }


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCRefineDialog()
        {
            TitleLabel.Text = "精炼";



            SetClientSize(new Size(491, 130));

            DXLabel label = new DXLabel
            {
                Text = "黑铁矿石",
                Location = ClientArea.Location,
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };

            BlackIronGrid = new DXItemGrid
            {
                GridSize = new Size(5, 1),
                Parent = this,
                GridType = GridType.RefineBlackIronOre,
                Linked = true,
                Location = new Point(label.Location.X + 5, label.Location.Y + label.Size.Height + 5)
            };

            label = new DXLabel
            {
                Text = "饰品",
                Location = new Point(label.Location.X, BlackIronGrid.Location.Y + BlackIronGrid.Size.Height + 10),
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };

            AccessoryGrid = new DXItemGrid
            {
                GridSize = new Size(3, 1),
                Parent = this,
                GridType = GridType.RefineAccessory,
                Linked = true,
                Location = new Point(label.Location.X + 5, label.Location.Y + label.Size.Height + 5)
            };

            label = new DXLabel
            {
                Text = "特殊",
                Location = new Point(AccessoryGrid.Location.X + AccessoryGrid.Size.Width + DXItemCell.CellWidth - 7, label.Location.Y),
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };

            SpecialGrid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.RefineSpecial,
                Linked = true,
                Location = new Point(label.Location.X + 5, label.Location.Y + label.Size.Height + 5)
            };


            SetClientSize(new Size(491, SpecialGrid.Location.Y + SpecialGrid.Size.Height - ClientArea.Y + 2));

            DCCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "破坏" },
                ReadOnly = true,
            };
            DCCheckBox.MouseClick += (o, e) => RefineType = RefineType.DC;
            SPCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "全系列魔法" },
                ReadOnly = true,
            };
            SPCheckBox.MouseClick += (o, e) => RefineType = RefineType.SpellPower;

            FireCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "火" },
                ReadOnly = true,
            };
            FireCheckBox.MouseClick += (o, e) => RefineType = RefineType.Fire;

            IceCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "冰" },
                ReadOnly = true,
            };
            IceCheckBox.MouseClick += (o, e) => RefineType = RefineType.Ice;

            LightningCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "雷" },
                ReadOnly = true,
            };
            LightningCheckBox.MouseClick += (o, e) => RefineType = RefineType.Lightning;

            WindCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "风" },
                ReadOnly = true,
            };
            WindCheckBox.MouseClick += (o, e) => RefineType = RefineType.Wind;

            HolyCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "神圣" },
                ReadOnly = true,
            };
            HolyCheckBox.MouseClick += (o, e) => RefineType = RefineType.Holy;

            DarkCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "暗黑" },
                ReadOnly = true,
            };
            DarkCheckBox.MouseClick += (o, e) => RefineType = RefineType.Dark;


            PhantomCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "幻影" },
                ReadOnly = true,
            };
            PhantomCheckBox.MouseClick += (o, e) => RefineType = RefineType.Phantom;


            DCCheckBox.Location = new Point(ClientArea.Right - DCCheckBox.Size.Width - 240, ClientArea.Y + 50);
            SPCheckBox.Location = new Point(ClientArea.Right - SPCheckBox.Size.Width - 156, ClientArea.Y + 50);

            FireCheckBox.Location = new Point(ClientArea.Right - FireCheckBox.Size.Width - 240, ClientArea.Y + 73);
            IceCheckBox.Location = new Point(ClientArea.Right - IceCheckBox.Size.Width - 156, ClientArea.Y + 73);
            LightningCheckBox.Location = new Point(ClientArea.Right - LightningCheckBox.Size.Width - 81, ClientArea.Y + 73);
            WindCheckBox.Location = new Point(ClientArea.Right - WindCheckBox.Size.Width - 5, ClientArea.Y + 73);
            HolyCheckBox.Location = new Point(ClientArea.Right - HolyCheckBox.Size.Width - 240, ClientArea.Y + 90);
            DarkCheckBox.Location = new Point(ClientArea.Right - DarkCheckBox.Size.Width - 156, ClientArea.Y + 90);
            PhantomCheckBox.Location = new Point(ClientArea.Right - PhantomCheckBox.Size.Width - 240, ClientArea.Y + 107);

            SubmitButton = new DXButton
            {
                Label = { Text = "提交" },
                Size = new Size(80, SmallButtonHeight),
                Parent = this,
                ButtonType = ButtonType.SmallButton,
                Enabled = false,
            };
            SubmitButton.Location = new Point(ClientArea.Right - SubmitButton.Size.Width, ClientArea.Bottom - SubmitButton.Size.Height);
            SubmitButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                List<CellLinkInfo> ores = new List<CellLinkInfo>();
                List<CellLinkInfo> items = new List<CellLinkInfo>();
                List<CellLinkInfo> specials = new List<CellLinkInfo>();

                foreach (DXItemCell cell in BlackIronGrid.Grid)
                {
                    if (cell.Link == null) continue;

                    ores.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }
                foreach (DXItemCell cell in AccessoryGrid.Grid)
                {
                    if (cell.Link == null) continue;

                    items.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }
                foreach (DXItemCell cell in SpecialGrid.Grid)
                {
                    if (cell.Link == null) continue;

                    specials.Add(new CellLinkInfo { Count = 1, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCRefine { RefineType = RefineType, RefineQuality = RefineQuality, Ores = ores, Items = items, Specials = specials });

            };

            RefineQualityBox = new DXComboBox
            {
                Parent = this,
                Size = new Size(80, DXComboBox.DefaultNormalHeight),
            };
            RefineQualityBox.SelectedItemChanged += (o, e) => RefineQuality = (RefineQuality?)RefineQualityBox.SelectedItem ?? RefineQuality.Quick;
            RefineQualityBox.Location = new Point(ClientArea.Right - RefineQualityBox.Size.Width - 160, BlackIronGrid.Location.Y);

            

            new DXListBoxItem
            {
                Parent = RefineQualityBox.ListBox,
                Label = { Text = $"马上" },
                Item = RefineQuality.Rush
            };
            new DXListBoxItem
            {
                Parent = RefineQualityBox.ListBox,
                Label = { Text = $"快速" },
                Item = RefineQuality.Quick
            };
            new DXListBoxItem
            {
                Parent = RefineQualityBox.ListBox,
                Label = { Text = $"标准" },
                Item = RefineQuality.Standard
            };
            new DXListBoxItem
            {
                Parent = RefineQualityBox.ListBox,
                Label = { Text = $"谨慎" },
                Item = RefineQuality.Careful
            };
            new DXListBoxItem
            {
                Parent = RefineQualityBox.ListBox,
                Label = { Text = $"精确" },
                Item = RefineQuality.Precise
            };

            label = new DXLabel
            {
                Parent = this,
                Text = "品质:",
            };

            label.Location = new Point(RefineQualityBox.Location.X - label.Size.Width - 5, RefineQualityBox.Location.Y + (RefineQualityBox.Size.Height - label.Size.Height) / 2);


            DurationLabel = new DXLabel
            {
                Parent = this,
                Location = new Point(RefineQualityBox.Location.X + RefineQualityBox.Size.Width + 5, RefineQualityBox.Location.Y + (RefineQualityBox.Size.Height - label.Size.Height) / 2)
            };

            RefineQualityBox.ListBox.SelectItem(RefineQuality.Quick);
        }

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _RefineType = 0;
                RefineTypeChanged = null;

                _RefineQuality = 0;
                RefineQualityChanged = null;

                if (BlackIronGrid != null)
                {
                    if (!BlackIronGrid.IsDisposed)
                        BlackIronGrid.Dispose();

                    BlackIronGrid = null;
                }

                if (AccessoryGrid != null)
                {
                    if (!AccessoryGrid.IsDisposed)
                        AccessoryGrid.Dispose();

                    AccessoryGrid = null;
                }

                if (SpecialGrid != null)
                {
                    if (!SpecialGrid.IsDisposed)
                        SpecialGrid.Dispose();

                    SpecialGrid = null;
                }

                if (DurabilityCheckBox != null)
                {
                    if (!DurabilityCheckBox.IsDisposed)
                        DurabilityCheckBox.Dispose();

                    DurabilityCheckBox = null;
                }

                if (DCCheckBox != null)
                {
                    if (!DCCheckBox.IsDisposed)
                        DCCheckBox.Dispose();

                    DCCheckBox = null;
                }

                if (SPCheckBox != null)
                {
                    if (!SPCheckBox.IsDisposed)
                        SPCheckBox.Dispose();

                    SPCheckBox = null;
                }

                if (FireCheckBox != null)
                {
                    if (!FireCheckBox.IsDisposed)
                        FireCheckBox.Dispose();

                    FireCheckBox = null;
                }

                if (IceCheckBox != null)
                {
                    if (!IceCheckBox.IsDisposed)
                        IceCheckBox.Dispose();

                    IceCheckBox = null;
                }

                if (LightningCheckBox != null)
                {
                    if (!LightningCheckBox.IsDisposed)
                        LightningCheckBox.Dispose();

                    LightningCheckBox = null;
                }

                if (WindCheckBox != null)
                {
                    if (!WindCheckBox.IsDisposed)
                        WindCheckBox.Dispose();

                    WindCheckBox = null;
                }

                if (HolyCheckBox != null)
                {
                    if (!HolyCheckBox.IsDisposed)
                        HolyCheckBox.Dispose();

                    HolyCheckBox = null;
                }

                if (DarkCheckBox != null)
                {
                    if (!DarkCheckBox.IsDisposed)
                        DarkCheckBox.Dispose();

                    DarkCheckBox = null;
                }

                if (PhantomCheckBox != null)
                {
                    if (!PhantomCheckBox.IsDisposed)
                        PhantomCheckBox.Dispose();

                    PhantomCheckBox = null;
                }

                if (SubmitButton != null)
                {
                    if (!SubmitButton.IsDisposed)
                        SubmitButton.Dispose();

                    SubmitButton = null;
                }

                if (RefineQualityBox != null)
                {
                    if (!RefineQualityBox.IsDisposed)
                        RefineQualityBox.Dispose();

                    RefineQualityBox = null;
                }

                if (DurationLabel != null)
                {
                    if (!DurationLabel.IsDisposed)
                        DurationLabel.Dispose();

                    DurationLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCRefineRetrieveDialog : DXWindow
    {
        #region Properties

        #region SelectedCell

        public NPCRefineCell SelectedCell
        {
            get => _SelectedCell;
            set
            {
                if (_SelectedCell == value) return;

                NPCRefineCell oldValue = _SelectedCell;
                _SelectedCell = value;

                OnSelectedCellChanged(oldValue, value);
            }
        }
        private NPCRefineCell _SelectedCell;
        public event EventHandler<EventArgs> SelectedCellChanged;
        public void OnSelectedCellChanged(NPCRefineCell oValue, NPCRefineCell nValue)
        {
            if (oValue != null) oValue.Selected = false;
            if (nValue != null) nValue.Selected = true;

            RetrieveButton.Enabled = nValue != null;

            SelectedCellChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        public List<ClientRefineInfo> Refines = new List<ClientRefineInfo>();
        private DXVScrollBar ScrollBar;

        public List<NPCRefineCell> Cells = new List<NPCRefineCell>();
        private DXButton RetrieveButton;
        public DXControl ClientPanel;

        public override void OnClientAreaChanged(Rectangle oValue, Rectangle nValue)
        {
            base.OnClientAreaChanged(oValue, nValue);

            if (ClientPanel == null) return;

            ClientPanel.Size = ClientArea.Size;
            ClientPanel.Location = ClientArea.Location;

        }


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCRefineRetrieveDialog()
        {
            TitleLabel.Text = "精炼";

            HasFooter = true;
            Movable = false;


            SetClientSize(new Size(491, 302));

            ClientPanel = new DXControl
            {
                Parent = this,
                Size = ClientArea.Size,
                Location = ClientArea.Location,
                PassThrough = true,
            };

            ScrollBar = new DXVScrollBar
            {
                Parent = this,
                Size = new Size(14, ClientArea.Height - 1),
            };
            ScrollBar.Location = new Point(ClientArea.Right - ScrollBar.Size.Width - 2, ClientArea.Y + 1);
            ScrollBar.ValueChanged += (o, e) => UpdateLocations();

            MouseWheel += ScrollBar.DoMouseWheel;

            RetrieveButton = new DXButton
            {
                Location = new Point((Size.Width - 80) / 2, Size.Height - 43),
                Size = new Size(80, DefaultHeight),
                Parent = this,
                Label = { Text = "取回" },
                Enabled = false,
            };
            RetrieveButton.MouseClick += (o, e) => Retrieve();
        }

        #region Methods
        public void RefreshList()
        {
            foreach (NPCRefineCell cell in Cells)
                cell.Dispose();

            Cells.Clear();

            foreach (ClientRefineInfo refine in Refines)
            {
                NPCRefineCell cell;
                Cells.Add(cell = new NPCRefineCell
                {
                    Parent = ClientPanel,
                    Refine = refine
                });
                cell.MouseClick += (o, e) => SelectedCell = cell;
                cell.MouseWheel += ScrollBar.DoMouseWheel;
                cell.MouseDoubleClick += (o, e) => Retrieve();
            }


            ScrollBar.MaxValue = Refines.Count * 43 - 2;
            SetClientSize(new Size(ClientArea.Width, Math.Min(Math.Max(3 * 43 - 2, ScrollBar.MaxValue), 7 * 43 - 3) + 1));
            ScrollBar.VisibleSize = ClientArea.Height;
            ScrollBar.Size = new Size(ScrollBar.Size.Width, ClientArea.Height - 2);

            RetrieveButton.Location = new Point((Size.Width - 80) / 2, Size.Height - 43);
            ScrollBar.Value = 0;
            UpdateLocations();
        }
        private void UpdateLocations()
        {
            int y = -ScrollBar.Value + 1;

            foreach (NPCRefineCell cell in Cells)
            {
                cell.Location = new Point(1, y);

                y += cell.Size.Height + 3;
            }
        }

        public void Retrieve()
        {
            if (GameScene.Game.Observer) return;
            if (SelectedCell == null) return;

            CEnvir.Enqueue(new C.NPCRefineRetrieve { Index = SelectedCell.Refine.Index });

        }
        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _SelectedCell = null;
                SelectedCellChanged = null;

                Refines.Clear();
                Refines = null;

                if (ScrollBar != null)
                {
                    if (!ScrollBar.IsDisposed)
                        ScrollBar.Dispose();

                    ScrollBar = null;
                }

                if (Cells != null)
                {
                    for (int i = 0; i < Cells.Count; i++)
                    {
                        if (Cells[i] != null)
                        {
                            if (!Cells[i].IsDisposed)
                                Cells[i].Dispose();

                            Cells[i] = null;
                        }

                    }
                    Cells.Clear();
                    Cells = null;
                }

                if (RetrieveButton != null)
                {
                    if (!RetrieveButton.IsDisposed)
                        RetrieveButton.Dispose();

                    RetrieveButton = null;
                }

                if (ClientPanel != null)
                {
                    if (!ClientPanel.IsDisposed)
                        ClientPanel.Dispose();

                    ClientPanel = null;
                }

            }

        }

        #endregion
    }

    public sealed class NPCRefineCell : DXControl
    {
        #region Properties

        #region Refine

        public ClientRefineInfo Refine
        {
            get => _Refine;
            set
            {
                if (_Refine == value) return;

                ClientRefineInfo oldValue = _Refine;
                _Refine = value;

                OnRefineChanged(oldValue, value);
            }
        }
        private ClientRefineInfo _Refine;
        public event EventHandler<EventArgs> RefineChanged;
        public void OnRefineChanged(ClientRefineInfo oValue, ClientRefineInfo nValue)
        {
            ItemCell.Item = Refine.Weapon;
            ItemNameLabel.Text = Refine.Weapon.Info.ItemName;

            switch (Refine.Type)
            {
                case RefineType.Durability:
                    RefineTypeLabel.Text = "持久";
                    break;
                case RefineType.DC:
                    RefineTypeLabel.Text = "破坏";
                    break;
                case RefineType.SpellPower:
                    RefineTypeLabel.Text = "全系列魔法";
                    break;
                case RefineType.Fire:
                    RefineTypeLabel.Text = "火元素";
                    break;
                case RefineType.Ice:
                    RefineTypeLabel.Text = "冰元素";
                    break;
                case RefineType.Lightning:
                    RefineTypeLabel.Text = "雷元素";
                    break;
                case RefineType.Wind:
                    RefineTypeLabel.Text = "风元素";
                    break;
                case RefineType.Holy:
                    RefineTypeLabel.Text = "神圣元素";
                    break;
                case RefineType.Dark:
                    RefineTypeLabel.Text = "暗黑元素";
                    break;
                case RefineType.Phantom:
                    RefineTypeLabel.Text = "幻影元素";
                    break;
                case RefineType.Reset:
                    RefineTypeLabel.Text = "重置";
                    break;
            }

            MaxChanceLabel.Text = $"{Refine.MaxChance}%";
            ChanceLabel.Text = $"{Refine.Chance}%";

            if (CEnvir.Now > Refine.RetrieveTime)
            {
                RetrieveTimeLabel.Text = "完成";
                RetrieveTimeLabel.ForeColour = Color.LightSeaGreen;
            }
            else
            {
                RetrieveTimeLabel.Text = Functions.ToString(Refine.RetrieveTime - CEnvir.Now, true, true);

                RetrieveTimeLabel.ProcessAction = () =>
                {
                    if (Refine == null || CEnvir.Now > Refine.RetrieveTime)
                    {
                        RetrieveTimeLabel.Text = "完成";
                        RetrieveTimeLabel.ForeColour = Color.LightSeaGreen;
                        RetrieveTimeLabel.ProcessAction = null;
                        return;
                    }

                    RetrieveTimeLabel.Text = Functions.ToString(Refine.RetrieveTime - CEnvir.Now, true, true);
                    RetrieveTimeLabel.ForeColour = Color.White;
                };
            }

            RefineChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        #region Selected

        public bool Selected
        {
            get => _Selected;
            set
            {
                if (_Selected == value) return;

                bool oldValue = _Selected;
                _Selected = value;

                OnSelectedChanged(oldValue, value);
            }
        }
        private bool _Selected;
        public event EventHandler<EventArgs> SelectedChanged;
        public void OnSelectedChanged(bool oValue, bool nValue)
        {
            Border = Selected;
            BackColour = Selected ? Color.FromArgb(80, 80, 125) : Color.FromArgb(25, 20, 0);
            ItemCell.BorderColour = Selected ? Color.FromArgb(198, 166, 99) : Color.FromArgb(99, 83, 50);
            SelectedChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        public DXItemCell ItemCell;

        public DXLabel ItemNameLabel, RefineTypeLabel, ChanceLabel, MaxChanceLabel, RetrieveTimeLabel;

        #endregion

        public NPCRefineCell()
        {
            DrawTexture = true;
            BackColour = Color.FromArgb(25, 20, 0);

            BorderColour = Color.FromArgb(198, 166, 99);
            Size = new Size(483, 40);


            ItemCell = new DXItemCell
            {
                Parent = this,
                Location = new Point((Size.Height - DXItemCell.CellHeight) / 2, (Size.Height - DXItemCell.CellHeight) / 2),
                FixedBorder = true,
                Border = true,
                ReadOnly = true,
                ItemGrid = new ClientUserItem[1],
                Slot = 0,
                FixedBorderColour = true,
                ShowCountLabel = false,
            };
            ItemNameLabel = new DXLabel
            {
                Parent = this,
                Location = new Point(ItemCell.Location.X * 2 + ItemCell.Size.Width, ItemCell.Location.Y),
                ForeColour = Color.White,
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
            };

            RefineTypeLabel = new DXLabel
            {
                Parent = this,
                Text = "精炼类型:",
                IsControl = false,
            };
            RefineTypeLabel.Location = new Point(ItemCell.Location.X * 2 + ItemCell.Size.Width, ItemCell.Location.Y + ItemCell.Size.Height - RefineTypeLabel.Size.Height);


            RefineTypeLabel = new DXLabel
            {
                Parent = this,
                Text = "没有",
                IsControl = false,
                ForeColour = Color.White,
                Location = new Point(RefineTypeLabel.Location.X + RefineTypeLabel.Size.Width, RefineTypeLabel.Location.Y)
            };

            ChanceLabel = new DXLabel
            {
                Parent = this,
                Text = "成功几率:",
                IsControl = false,
            };
            ChanceLabel.Location = new Point(300 - ChanceLabel.Size.Width, ItemNameLabel.Location.Y);

            ChanceLabel = new DXLabel
            {
                Parent = this,
                Text = "0%",
                IsControl = false,
                ForeColour = Color.White,
                Location = new Point(ChanceLabel.Location.X + ChanceLabel.Size.Width, ChanceLabel.Location.Y)
            };

            MaxChanceLabel = new DXLabel
            {
                Parent = this,
                Text = "最大几率:",
                IsControl = false,
            };
            MaxChanceLabel.Location = new Point(300 - MaxChanceLabel.Size.Width, RefineTypeLabel.Location.Y);

            MaxChanceLabel = new DXLabel
            {
                Parent = this,
                Text = "0%",
                IsControl = false,
                ForeColour = Color.White,
                Location = new Point(MaxChanceLabel.Location.X + MaxChanceLabel.Size.Width, MaxChanceLabel.Location.Y)
            };


            RetrieveTimeLabel = new DXLabel
            {
                Parent = this,
                Text = "剩余时间:",
                IsControl = false,
            };
            RetrieveTimeLabel.Location = new Point(390 - RetrieveTimeLabel.Size.Width, RefineTypeLabel.Location.Y);

            RetrieveTimeLabel = new DXLabel
            {
                Parent = this,
                Text = "0 秒",
                IsControl = false,
                ForeColour = Color.White,
                Location = new Point(RetrieveTimeLabel.Location.X + RetrieveTimeLabel.Size.Width, RetrieveTimeLabel.Location.Y)
            };

        }

        #region Methods
        public override void OnMouseEnter()
        {
            base.OnMouseEnter();

            GameScene.Game.MouseItem = ItemCell.Item;
        }
        public override void OnMouseLeave()
        {
            base.OnMouseLeave();

            GameScene.Game.MouseItem = null;
        }
        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _Refine = null;
                RefineChanged = null;

                _Selected = false;
                SelectedChanged = null;

                if (ItemCell != null)
                {
                    if (!ItemCell.IsDisposed)
                        ItemCell.Dispose();

                    ItemCell = null;
                }

                if (ItemNameLabel != null)
                {
                    if (!ItemNameLabel.IsDisposed)
                        ItemNameLabel.Dispose();

                    ItemNameLabel = null;
                }

                if (RefineTypeLabel != null)
                {
                    if (!RefineTypeLabel.IsDisposed)
                        RefineTypeLabel.Dispose();

                    RefineTypeLabel = null;
                }

                if (ChanceLabel != null)
                {
                    if (!ChanceLabel.IsDisposed)
                        ChanceLabel.Dispose();

                    ChanceLabel = null;
                }

                if (MaxChanceLabel != null)
                {
                    if (!MaxChanceLabel.IsDisposed)
                        MaxChanceLabel.Dispose();

                    MaxChanceLabel = null;
                }

                if (RetrieveTimeLabel != null)
                {
                    if (!RetrieveTimeLabel.IsDisposed)
                        RetrieveTimeLabel.Dispose();

                    RetrieveTimeLabel = null;
                }

            }

        }

        #endregion
    }

    public sealed class NPCQuestDialog : DXWindow
    {
        #region Properties

        #region NPCInfo

        public NPCInfo NPCInfo
        {
            get => _NPCInfo;
            set
            {
                if (_NPCInfo == value) return;

                NPCInfo oldValue = _NPCInfo;
                _NPCInfo = value;

                OnNPCInfoChanged(oldValue, value);
            }
        }
        private NPCInfo _NPCInfo;
        public event EventHandler<EventArgs> NPCInfoChanged;
        public void OnNPCInfoChanged(NPCInfo oValue, NPCInfo nValue)
        {
            NPCInfoChanged?.Invoke(this, EventArgs.Empty);


            UpdateQuestDisplay();
        }

        #endregion

        #region SelectedQuest

        public NPCQuestRow SelectedQuest
        {
            get => _SelectedQuest;
            set
            {
                if (_SelectedQuest == value) return;

                NPCQuestRow oldValue = _SelectedQuest;
                _SelectedQuest = value;

                OnSelectedQuestChanged(oldValue, value);
            }
        }
        private NPCQuestRow _SelectedQuest;
        public event EventHandler<EventArgs> SelectedQuestChanged;
        public void OnSelectedQuestChanged(NPCQuestRow oValue, NPCQuestRow nValue)
        {
            if (oValue != null)
                oValue.Selected = false;

            foreach (DXItemCell cell in RewardGrid.Grid)
            {
                cell.Item = null;
                cell.Tag = null;
            }

            foreach (DXItemCell cell in ChoiceGrid.Grid)
            {
                cell.Item = null;
                cell.Tag = null;
            }

            if (SelectedQuest?.QuestInfo == null)
            {
                TasksLabel.Text = string.Empty;
                DescriptionLabel.Text = string.Empty;

                AcceptButton.Visible = false;
                CompleteButton.Visible = false;
                EndLabel.Text = string.Empty;
                return;
            }

            SelectedQuest.Selected = true;

            int standard = 0, choice = 0;
            HasChoice = false;

            foreach (QuestReward reward in SelectedQuest.QuestInfo.Rewards)
            {
                switch (MapObject.User.Class)
                {
                    case MirClass.Warrior:
                        if ((reward.Class & RequiredClass.Warrior) != RequiredClass.Warrior) continue;
                        break;
                    case MirClass.Wizard:
                        if ((reward.Class & RequiredClass.Wizard) != RequiredClass.Wizard) continue;
                        break;
                    case MirClass.Taoist:
                        if ((reward.Class & RequiredClass.Taoist) != RequiredClass.Taoist) continue;
                        break;
                    case MirClass.Assassin:
                        if ((reward.Class & RequiredClass.Assassin) != RequiredClass.Assassin) continue;
                        break;
                }

                UserItemFlags flags = UserItemFlags.None;
                TimeSpan duration = TimeSpan.FromSeconds(reward.Duration);

                if (reward.Bound)
                    flags |= UserItemFlags.Bound;

                if (duration != TimeSpan.Zero)
                    flags |= UserItemFlags.Expirable;

                ClientUserItem item = new ClientUserItem(reward.Item, reward.Amount)
                {
                    Flags = flags,
                    ExpireTime = duration
                };

                if (reward.Choice)
                {
                    if (choice >= ChoiceGrid.Grid.Length) continue;

                    HasChoice = true;

                    ChoiceGrid.Grid[choice].Item = item;
                    ChoiceGrid.Grid[choice].Tag = reward;
                    choice++;
                }
                else
                {
                    if (standard >= RewardGrid.Grid.Length) continue;

                    RewardGrid.Grid[standard].Item = item;
                    RewardGrid.Grid[standard].Tag = reward;
                    standard++;
                }
            }

            if (HasChoice)
                SelectedCell = null;


            DescriptionLabel.Text = GameScene.Game.GetQuestText(SelectedQuest.QuestInfo, SelectedQuest.UserQuest, false);
            TasksLabel.Text = GameScene.Game.GetTaskText(SelectedQuest.QuestInfo, SelectedQuest.UserQuest);

            EndLabel.Text = SelectedQuest.QuestInfo.FinishNPC.RegionName;

            AcceptButton.Visible = SelectedQuest.UserQuest == null;
            CompleteButton.Visible = SelectedQuest.UserQuest != null && SelectedQuest.UserQuest.IsComplete;

            SelectedQuestChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        #region SelectedCell

        public DXItemCell SelectedCell
        {
            get => _SelectedCell;
            set
            {
                DXItemCell oldValue = _SelectedCell;
                _SelectedCell = value;

                OnSelectedCellChanged(oldValue, value);
            }
        }
        private DXItemCell _SelectedCell;
        public event EventHandler<EventArgs> SelectedCellChanged;
        public void OnSelectedCellChanged(DXItemCell oValue, DXItemCell nValue)
        {
            if (oValue != null)
            {
                oValue.FixedBorder = false;
                oValue.Border = false;
                oValue.FixedBorderColour = false;
                oValue.BorderColour = Color.Lime;
            }

            if (nValue != null)
            {
                nValue.Border = true;
                nValue.FixedBorder = true;
                nValue.FixedBorderColour = true;
                nValue.BorderColour = Color.Lime;
            }

            SelectedCellChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        public NPCQuestRow[] Rows;

        public List<QuestInfo> Quests = new List<QuestInfo>();

        public DXVScrollBar ScrollBar;

        public DXLabel TasksLabel, DescriptionLabel, EndLabel;

        public DXItemGrid RewardGrid, ChoiceGrid;

        public DXButton AcceptButton, CompleteButton;

        public ClientUserItem[] RewardArray, ChoiceArray;

        public bool HasChoice;


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCQuestDialog()
        {
            TitleLabel.Text = "支线任务";

            HasFooter = false;
            Movable = false;
            SetClientSize(new Size(300, 547));
            Location = new Point(GameScene.Game.NPCBox.Size.Width, 0);

            DXLabel label = new DXLabel
            {
                Text = "日志",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                ForeColour = Color.FromArgb(198, 166, 99),
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = ClientArea.Location,
            };

            Rows = new NPCQuestRow[6];

            DXControl panel = new DXControl
            {
                Size = new Size(ClientArea.Width, 2 + Rows.Length * 22),
                Location = new Point(ClientArea.X, ClientArea.Top + label.Size.Height),
                Parent = this,
                DrawTexture = true,
            };


            for (int i = 0; i < Rows.Length; i++)
            {
                Rows[i] = new NPCQuestRow
                {
                    Parent = panel,
                    Location = new Point(2, 2 + i * 22)
                };
                int index = i;
                Rows[index].MouseClick += (o, e) =>
                {
                    if (Rows[index].QuestInfo == null) return;

                    SelectedQuest = Rows[index];
                };
            }

            ScrollBar = new DXVScrollBar
            {
                Parent = panel,
                Location = new Point(panel.Size.Width - 15, 3),
                Size = new Size(14, Rows.Length * 22 - 4),
                VisibleSize = Rows.Length,
                Change = 1,
            };
            ScrollBar.ValueChanged += (o, e) => UpdateScrollBar();

            label = new DXLabel
            {
                Text = "任务内容",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = new Point(ClientArea.X, panel.Location.Y + panel.Size.Height + 5),
            };


            DescriptionLabel = new DXLabel
            {
                AutoSize = false,
                Size = new Size(ClientArea.Width - 4, 80),
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                Location = new Point(ClientArea.X + 3, label.Location.Y + label.Size.Height + 5),
                Parent = this,
            };

            label = new DXLabel
            {
                Text = "完成条件",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = new Point(ClientArea.X, DescriptionLabel.Location.Y + DescriptionLabel.Size.Height + 5),
            };


            TasksLabel = new DXLabel
            {
                AutoSize = false,
                Size = new Size(ClientArea.Width - 4, 80),
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                Location = new Point(ClientArea.X + 3, label.Location.Y + label.Size.Height + 5),
                Parent = this,
            };

            label = new DXLabel
            {
                Text = "任务奖励",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = new Point(ClientArea.X, TasksLabel.Location.Y + TasksLabel.Size.Height + 5),
            };

            RewardArray = new ClientUserItem[8];
            RewardGrid = new DXItemGrid
            {
                Parent = this,
                Location = new Point(ClientArea.X + 2, label.Location.Y + label.Size.Height + 5),
                GridSize = new Size(RewardArray.Length, 1),
                ItemGrid = RewardArray,
                ReadOnly = true,
            };

            label = new DXLabel
            {
                Text = "奖励选择",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = new Point(RewardGrid.Location.X, TasksLabel.Location.Y + TasksLabel.Size.Height + 68),
            };

            ChoiceArray = new ClientUserItem[8];
            ChoiceGrid = new DXItemGrid
            {
                Parent = this,
                Location = new Point(RewardGrid.Location.X + 2, label.Location.Y + label.Size.Height + 5),
                GridSize = new Size(ChoiceArray.Length, 1),
                ItemGrid = ChoiceArray,
                ReadOnly = true,
            };

            foreach (DXItemCell cell in ChoiceGrid.Grid)
            {

                cell.MouseClick += (o, e) =>
                {
                    if (((DXItemCell)o).Item == null) return;

                    SelectedCell = (DXItemCell)o;
                };
            }

            label = new DXLabel
            {
                Text = "结束:",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = new Point(ClientArea.X, ChoiceGrid.Location.Y + ChoiceGrid.Size.Height + 10),
            };

            EndLabel = new DXLabel
            {
                Parent = this,
                ForeColour = Color.White,
                Location = new Point(label.Location.X + label.Size.Width - 8, label.Location.Y + (label.Size.Height - 12) / 2),
            };
            EndLabel.MouseClick += (o, e) =>
            {
                if (SelectedQuest?.QuestInfo?.FinishNPC?.Region?.Map == null) return;

                GameScene.Game.BigMapBox.Visible = true;
                GameScene.Game.BigMapBox.Opacity = 1F;
                GameScene.Game.BigMapBox.SelectedInfo = SelectedQuest.QuestInfo.FinishNPC.Region.Map;

            };


            AcceptButton = new DXButton
            {
                Label = { Text = "接受" },
                Parent = this,
                Location = new Point(ClientArea.X + (ClientArea.Size.Width - 100), label.Location.Y + label.Size.Height + 5),
                Size = new Size(100, SmallButtonHeight),
                ButtonType = ButtonType.SmallButton,
                Visible = false,
            };
            AcceptButton.MouseClick += (o, e) =>
            {
                if (SelectedQuest?.QuestInfo == null) return;

                CEnvir.Enqueue(new C.QuestAccept { Index = SelectedQuest.QuestInfo.Index });
            };

            CompleteButton = new DXButton
            {
                Label = { Text = "完成" },
                Parent = this,
                Location = new Point(ClientArea.X + (ClientArea.Size.Width - 100), ChoiceGrid.Location.Y + ChoiceGrid.Size.Height + 10),
                Size = new Size(100, SmallButtonHeight),
                ButtonType = ButtonType.SmallButton,
                Visible = false,
            };
            CompleteButton.MouseClick += (o, e) =>
            {
                if (SelectedQuest?.QuestInfo == null) return;

                if (HasChoice && SelectedCell == null)
                {
                    GameScene.Game.ReceiveChat("请选择奖励.", MessageType.System);
                    return;
                }

                CEnvir.Enqueue(new C.QuestComplete { Index = SelectedQuest.QuestInfo.Index, ChoiceIndex = ((QuestReward)SelectedCell?.Tag)?.Index ?? 0 });
            };
        }

        #region Methods

        public void UpdateQuestDisplay()
        {
            if (NPCInfo == null)
            {
                Visible = false;
                return;
            }

            Quests.Clear();

            List<QuestInfo> availableQuests = new List<QuestInfo>(), currentQuests = new List<QuestInfo>(), completeQuests = new List<QuestInfo>();

            foreach (QuestInfo quest in NPCInfo.StartQuests)
            {
                if (!GameScene.Game.CanAccept(quest)) continue;

                availableQuests.Add(quest);
            }

            foreach (QuestInfo quest in NPCInfo.FinishQuests)
            {
                ClientUserQuest userQuest = GameScene.Game.QuestLog.FirstOrDefault(x => x.Quest == quest);

                if (userQuest == null || userQuest.Completed) continue;

                if (!userQuest.IsComplete)
                    currentQuests.Add(quest);
                else
                    completeQuests.Add(quest);
            }


            completeQuests.Sort((x1, x2) => string.Compare(x1.QuestName, x2.QuestName, StringComparison.Ordinal));
            availableQuests.Sort((x1, x2) => string.Compare(x1.QuestName, x2.QuestName, StringComparison.Ordinal));
            currentQuests.Sort((x1, x2) => string.Compare(x1.QuestName, x2.QuestName, StringComparison.Ordinal));

            Quests.AddRange(completeQuests);
            Quests.AddRange(availableQuests);
            Quests.AddRange(currentQuests);

            Visible = Quests.Count > 0;

            if (Quests.Count == 0) return;

            QuestInfo previousQuest = SelectedQuest?.QuestInfo;

            _SelectedQuest = null;

            UpdateScrollBar();

            if (previousQuest != null)
            {
                foreach (NPCQuestRow row in Rows)
                {
                    if (row.QuestInfo != previousQuest) continue;

                    _SelectedQuest = row;
                    break;
                }
            }

            if (SelectedQuest == null)
                SelectedQuest = Rows[0];

            if (SelectedQuest?.QuestInfo != null)
            {
                DescriptionLabel.Text = GameScene.Game.GetQuestText(SelectedQuest.QuestInfo, SelectedQuest.UserQuest, false);
                TasksLabel.Text = GameScene.Game.GetTaskText(SelectedQuest.QuestInfo, SelectedQuest.UserQuest);

                AcceptButton.Visible = SelectedQuest.UserQuest == null;
                CompleteButton.Visible = SelectedQuest.UserQuest != null && SelectedQuest.UserQuest.IsComplete;
            }
        }

        public void UpdateScrollBar()
        {
            ScrollBar.MaxValue = Quests.Count;

            for (int i = 0; i < Rows.Length; i++)
            {
                Rows[i].QuestInfo = i + ScrollBar.Value >= Quests.Count ? null : Quests[i + ScrollBar.Value];
            }


        }
        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _NPCInfo = null;
                NPCInfoChanged = null;

                Quests.Clear();
                Quests = null;

                HasChoice = false;

                _SelectedQuest = null;
                SelectedQuestChanged = null;

                _SelectedCell = null;
                SelectedCellChanged = null;

                if (Rows != null)
                {
                    for (int i = 0; i < Rows.Length; i++)
                    {
                        if (Rows[i] != null)
                        {
                            if (!Rows[i].IsDisposed)
                                Rows[i].Dispose();

                            Rows[i] = null;
                        }

                    }

                    Rows = null;
                }

                if (ScrollBar != null)
                {
                    if (!ScrollBar.IsDisposed)
                        ScrollBar.Dispose();

                    ScrollBar = null;
                }

                if (TasksLabel != null)
                {
                    if (!TasksLabel.IsDisposed)
                        TasksLabel.Dispose();

                    TasksLabel = null;
                }

                if (DescriptionLabel != null)
                {
                    if (!DescriptionLabel.IsDisposed)
                        DescriptionLabel.Dispose();

                    DescriptionLabel = null;
                }

                if (EndLabel != null)
                {
                    if (!EndLabel.IsDisposed)
                        EndLabel.Dispose();

                    EndLabel = null;
                }

                if (RewardGrid != null)
                {
                    if (!RewardGrid.IsDisposed)
                        RewardGrid.Dispose();

                    RewardGrid = null;
                }

                if (ChoiceGrid != null)
                {
                    if (!ChoiceGrid.IsDisposed)
                        ChoiceGrid.Dispose();

                    ChoiceGrid = null;
                }

                if (AcceptButton != null)
                {
                    if (!AcceptButton.IsDisposed)
                        AcceptButton.Dispose();

                    AcceptButton = null;
                }

                if (CompleteButton != null)
                {
                    if (!CompleteButton.IsDisposed)
                        CompleteButton.Dispose();

                    CompleteButton = null;
                }

                RewardArray = null;
                ChoiceArray = null;
            }

        }

        #endregion
    }

    public sealed class NPCQuestRow : DXControl
    {
        #region Properties

        #region QuestInfo

        public QuestInfo QuestInfo
        {
            get => _QuestInfo;
            set
            {
                QuestInfo oldValue = _QuestInfo;
                _QuestInfo = value;

                OnQuestInfoChanged(oldValue, value);
            }
        }
        private QuestInfo _QuestInfo;
        public event EventHandler<EventArgs> QuestInfoChanged;
        public void OnQuestInfoChanged(QuestInfo oValue, QuestInfo nValue)
        {
            if (QuestInfo == null)
            {
                Selected = false;
                UserQuest = null;
                QuestNameLabel.Text = string.Empty;
                QuestIcon.Visible = false;
            }
            else
            {
                UserQuest = GameScene.Game.QuestLog.FirstOrDefault(x => x.Quest == QuestInfo);
                QuestNameLabel.Text = QuestInfo.QuestName;
                QuestIcon.Visible = true;
            }

            if (UserQuest == null)
                QuestIcon.BaseIndex = 83; 
            else if (!UserQuest.IsComplete)
                QuestIcon.BaseIndex = 85; 
            else
                QuestIcon.BaseIndex = 93; 

            QuestInfoChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        #region UserQuest

        public ClientUserQuest UserQuest
        {
            get => _UserQuest;
            set
            {
                ClientUserQuest oldValue = _UserQuest;
                _UserQuest = value;

                OnUserQuestChanged(oldValue, value);
            }
        }
        private ClientUserQuest _UserQuest;
        public event EventHandler<EventArgs> UserQuestChanged;
        public void OnUserQuestChanged(ClientUserQuest oValue, ClientUserQuest nValue)
        {
            UserQuestChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        #region Selected

        public bool Selected
        {
            get => _Selected;
            set
            {
                if (_Selected == value) return;

                bool oldValue = _Selected;
                _Selected = value;

                OnSelectedChanged(oldValue, value);
            }
        }
        private bool _Selected;
        public event EventHandler<EventArgs> SelectedChanged;
        public void OnSelectedChanged(bool oValue, bool nValue)
        {
            Border = Selected;
            BackColour = Selected ? Color.FromArgb(80, 80, 125) : Color.FromArgb(25, 20, 0);

            SelectedChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        public DXAnimatedControl QuestIcon;
        public DXLabel QuestNameLabel;

        #endregion

        public NPCQuestRow()
        {
            DrawTexture = true;
            BackColour = Color.FromArgb(25, 20, 0);

            BorderColour = Color.FromArgb(198, 166, 99);
            Size = new Size(280, 20);

            QuestIcon = new DXAnimatedControl
            {
                Parent = this,
                Location = new Point(2, 2),
                Loop = true,
                LibraryFile = LibraryFile.Interface,
                BaseIndex = 83,
                FrameCount = 2,
                AnimationDelay = TimeSpan.FromSeconds(1),
                Visible = false,
                IsControl = false,
            };

            QuestNameLabel = new DXLabel
            {
                Location = new Point(20, 2),
                Parent = this,
                ForeColour = Color.White,
                IsControl = false,
            };
        }

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _QuestInfo = null;
                QuestInfoChanged = null;

                _UserQuest = null;
                UserQuestChanged = null;

                _Selected = false;
                SelectedChanged = null;

                if (QuestIcon != null)
                {
                    if (!QuestIcon.IsDisposed)
                        QuestIcon.Dispose();

                    QuestIcon = null;
                }

                if (QuestNameLabel != null)
                {
                    if (!QuestNameLabel.IsDisposed)
                        QuestNameLabel.Dispose();

                    QuestNameLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class MeiriNPCQuestDialog : DXWindow
    {
        #region Properties

        #region NPCInfo

        public NPCInfo NPCInfo
        {
            get => _NPCInfo;
            set
            {
                if (_NPCInfo == value) return;

                NPCInfo oldValue = _NPCInfo;
                _NPCInfo = value;

                OnNPCInfoChanged(oldValue, value);
            }
        }
        private NPCInfo _NPCInfo;
        public event EventHandler<EventArgs> NPCInfoChanged;
        public void OnNPCInfoChanged(NPCInfo oValue, NPCInfo nValue)
        {
            NPCInfoChanged?.Invoke(this, EventArgs.Empty);


            UpdateQuestDisplay();
        }

        #endregion

        #region SelectedQuest

        public MeiriNPCQuestRow SelectedQuest
        {
            get => _SelectedQuest;
            set
            {
                if (_SelectedQuest == value) return;

                MeiriNPCQuestRow oldValue = _SelectedQuest;
                _SelectedQuest = value;

                OnSelectedQuestChanged(oldValue, value);
            }
        }
        private MeiriNPCQuestRow _SelectedQuest;
        public event EventHandler<EventArgs> SelectedQuestChanged;
        public void OnSelectedQuestChanged(MeiriNPCQuestRow oValue, MeiriNPCQuestRow nValue)
        {
            if (oValue != null)
                oValue.Selected = false;

            foreach (DXItemCell cell in RewardGrid.Grid)
            {
                cell.Item = null;
                cell.Tag = null;
            }

            foreach (DXItemCell cell in ChoiceGrid.Grid)
            {
                cell.Item = null;
                cell.Tag = null;
            }

            if (SelectedQuest?.QuestInfo == null)
            {
                TasksLabel.Text = string.Empty;
                DescriptionLabel.Text = string.Empty;
                TypeLabel.Text = string.Empty;
                AcceptButton.Visible = false;
                CompleteButton.Visible = false;
                EndLabel.Text = string.Empty;
                return;
            }

            SelectedQuest.Selected = true;

            int standard = 0, choice = 0;
            HasChoice = false;

            foreach (MeiriQuestReward reward in SelectedQuest.QuestInfo.Rewards)
            {
                switch (MapObject.User.Class)
                {
                    case MirClass.Warrior:
                        if ((reward.Class & RequiredClass.Warrior) != RequiredClass.Warrior) continue;
                        break;
                    case MirClass.Wizard:
                        if ((reward.Class & RequiredClass.Wizard) != RequiredClass.Wizard) continue;
                        break;
                    case MirClass.Taoist:
                        if ((reward.Class & RequiredClass.Taoist) != RequiredClass.Taoist) continue;
                        break;
                    case MirClass.Assassin:
                        if ((reward.Class & RequiredClass.Assassin) != RequiredClass.Assassin) continue;
                        break;
                }

                UserItemFlags flags = UserItemFlags.None;
                TimeSpan duration = TimeSpan.FromSeconds(reward.Duration);

                if (reward.Bound)
                    flags |= UserItemFlags.Bound;

                if (duration != TimeSpan.Zero)
                    flags |= UserItemFlags.Expirable;

                ClientUserItem item = new ClientUserItem(reward.Item, reward.Amount)
                {
                    Flags = flags,
                    ExpireTime = duration
                };

                if (reward.Choice)
                {
                    if (choice >= ChoiceGrid.Grid.Length) continue;

                    HasChoice = true;

                    ChoiceGrid.Grid[choice].Item = item;
                    ChoiceGrid.Grid[choice].Tag = reward;
                    choice++;
                }
                else
                {
                    if (standard >= RewardGrid.Grid.Length) continue;

                    RewardGrid.Grid[standard].Item = item;
                    RewardGrid.Grid[standard].Tag = reward;
                    standard++;
                }
            }

            if (HasChoice)
                SelectedCell = null;


            DescriptionLabel.Text = GameScene.Game.MeiriGetQuestText(SelectedQuest.QuestInfo, SelectedQuest.UserQuest, false);
            TasksLabel.Text = GameScene.Game.MeiriGetTaskText(SelectedQuest.QuestInfo, SelectedQuest.UserQuest);
            if (SelectedQuest.QuestInfo.Type == QuestType.None)
                TypeLabel.Text = "普通任务";
            else if (SelectedQuest.QuestInfo.Type == QuestType.DailyCount)
                TypeLabel.Text = "特殊任务";
            else if (SelectedQuest.QuestInfo.Type == QuestType.DailyRandom)
                TypeLabel.Text = "随机任务";
            else if (SelectedQuest.QuestInfo.Type == QuestType.Repeatable)
                TypeLabel.Text = "重复任务";
            else if (SelectedQuest.QuestInfo.Type == QuestType.Event)
                TypeLabel.Text = "事件任务";

            EndLabel.Text = SelectedQuest.QuestInfo.FinishNPC.RegionName;

            AcceptButton.Visible = SelectedQuest.UserQuest == null;
            CompleteButton.Visible = SelectedQuest.UserQuest != null && SelectedQuest.UserQuest.IsComplete;

            SelectedQuestChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        #region SelectedCell

        public DXItemCell SelectedCell
        {
            get => _SelectedCell;
            set
            {
                DXItemCell oldValue = _SelectedCell;
                _SelectedCell = value;

                OnSelectedCellChanged(oldValue, value);
            }
        }
        private DXItemCell _SelectedCell;
        public event EventHandler<EventArgs> SelectedCellChanged;
        public void OnSelectedCellChanged(DXItemCell oValue, DXItemCell nValue)
        {
            if (oValue != null)
            {
                oValue.FixedBorder = false;
                oValue.Border = false;
                oValue.FixedBorderColour = false;
                oValue.BorderColour = Color.Lime;
            }

            if (nValue != null)
            {
                nValue.Border = true;
                nValue.FixedBorder = true;
                nValue.FixedBorderColour = true;
                nValue.BorderColour = Color.Lime;
            }

            SelectedCellChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        public MeiriNPCQuestRow[] Rows;

        public List<MeiriQuestInfo> Quests = new List<MeiriQuestInfo>();

        public DXVScrollBar ScrollBar;

        public DXLabel TasksLabel, DescriptionLabel, EndLabel, TypeLabel;

        public DXItemGrid RewardGrid, ChoiceGrid;

        public DXButton AcceptButton, CompleteButton;

        public ClientUserItem[] RewardArray, ChoiceArray;

        public bool HasChoice;


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public MeiriNPCQuestDialog()
        {
            TitleLabel.Text = "每日任务";

            HasFooter = false;
            Movable = false;
            SetClientSize(new Size(300, 547));
            Location = new Point(GameScene.Game.NPCBox.Size.Width, 0);

            DXLabel label = new DXLabel
            {
                Text = "日志　　任务类型:",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                ForeColour = Color.FromArgb(198, 166, 99),
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = ClientArea.Location,
            };

            TypeLabel = new DXLabel
            {
                ForeColour = Color.White,
                Location = new Point(label.Location.X + label.Size.Width, label.Location.Y),
                Font = new Font(Config.FontName, CEnvir.FontSize(10f), FontStyle.Bold),
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Parent = this
            };

            Rows = new MeiriNPCQuestRow[6];

            DXControl panel = new DXControl
            {
                Size = new Size(ClientArea.Width, 2 + Rows.Length * 22),
                Location = new Point(ClientArea.X, ClientArea.Top + label.Size.Height),
                Parent = this,
                DrawTexture = true,
            };


            for (int i = 0; i < Rows.Length; i++)
            {
                Rows[i] = new MeiriNPCQuestRow
                {
                    Parent = panel,
                    Location = new Point(2, 2 + i * 22)
                };
                int index = i;
                Rows[index].MouseClick += (o, e) =>
                {
                    if (Rows[index].QuestInfo == null) return;

                    SelectedQuest = Rows[index];
                };
            }

            ScrollBar = new DXVScrollBar
            {
                Parent = panel,
                Location = new Point(panel.Size.Width - 15, 3),
                Size = new Size(14, Rows.Length * 22 - 4),
                VisibleSize = Rows.Length,
                Change = 1,
            };
            ScrollBar.ValueChanged += (o, e) => UpdateScrollBar();

            label = new DXLabel
            {
                Text = "任务内容",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = new Point(ClientArea.X, panel.Location.Y + panel.Size.Height + 5),
            };

            DescriptionLabel = new DXLabel
            {
                AutoSize = false,
                Size = new Size(ClientArea.Width - 4, 80),
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                Location = new Point(ClientArea.X + 3, label.Location.Y + label.Size.Height + 5),
                Parent = this,
            };

            label = new DXLabel
            {
                Text = "完成条件",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = new Point(ClientArea.X, DescriptionLabel.Location.Y + DescriptionLabel.Size.Height + 5),
            };


            TasksLabel = new DXLabel
            {
                AutoSize = false,
                Size = new Size(ClientArea.Width - 4, 80),
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                Location = new Point(ClientArea.X + 3, label.Location.Y + label.Size.Height + 5),
                Parent = this,
            };

            label = new DXLabel
            {
                Text = "任务奖励",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = new Point(ClientArea.X, TasksLabel.Location.Y + TasksLabel.Size.Height + 5),
            };

            RewardArray = new ClientUserItem[8];
            RewardGrid = new DXItemGrid
            {
                Parent = this,
                Location = new Point(ClientArea.X + 2, label.Location.Y + label.Size.Height + 5),
                GridSize = new Size(RewardArray.Length, 1),
                ItemGrid = RewardArray,
                ReadOnly = true,
            };

            label = new DXLabel
            {
                Text = "奖励选择",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = new Point(RewardGrid.Location.X, TasksLabel.Location.Y + TasksLabel.Size.Height + 68),
            };

            ChoiceArray = new ClientUserItem[8];
            ChoiceGrid = new DXItemGrid
            {
                Parent = this,
                Location = new Point(RewardGrid.Location.X + 2, label.Location.Y + label.Size.Height + 5),
                GridSize = new Size(ChoiceArray.Length, 1),
                ItemGrid = ChoiceArray,
                ReadOnly = true,
            };

            foreach (DXItemCell cell in ChoiceGrid.Grid)
            {

                cell.MouseClick += (o, e) =>
                {
                    if (((DXItemCell)o).Item == null) return;

                    SelectedCell = (DXItemCell)o;
                };
            }

            label = new DXLabel
            {
                Text = "结束:",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = new Point(ClientArea.X, ChoiceGrid.Location.Y + ChoiceGrid.Size.Height + 10),
            };

            EndLabel = new DXLabel
            {
                Parent = this,
                ForeColour = Color.White,
                Location = new Point(label.Location.X + label.Size.Width - 8, label.Location.Y + (label.Size.Height - 12) / 2),
            };
            EndLabel.MouseClick += (o, e) =>
            {
                if (SelectedQuest?.QuestInfo?.FinishNPC?.Region?.Map == null) return;

                GameScene.Game.BigMapBox.Visible = true;
                GameScene.Game.BigMapBox.Opacity = 1F;
                GameScene.Game.BigMapBox.SelectedInfo = SelectedQuest.QuestInfo.FinishNPC.Region.Map;

            };


            AcceptButton = new DXButton
            {
                Label = { Text = "接受" },
                Parent = this,
                Location = new Point(ClientArea.X + (ClientArea.Size.Width - 100), label.Location.Y + label.Size.Height + 5),
                Size = new Size(100, SmallButtonHeight),
                ButtonType = ButtonType.SmallButton,
                Visible = false,
            };
            AcceptButton.MouseClick += (o, e) =>
            {
                if (SelectedQuest?.QuestInfo == null) return;

                CEnvir.Enqueue(new C.MeiriQuestAccept { Index = SelectedQuest.QuestInfo.Index });
            };

            CompleteButton = new DXButton
            {
                Label = { Text = "完成" },
                Parent = this,
                Location = new Point(ClientArea.X + (ClientArea.Size.Width - 100), ChoiceGrid.Location.Y + ChoiceGrid.Size.Height + 10),
                Size = new Size(100, SmallButtonHeight),
                ButtonType = ButtonType.SmallButton,
                Visible = false,
            };
            CompleteButton.MouseClick += (o, e) =>
            {
                if (SelectedQuest?.QuestInfo == null) return;

                if (HasChoice && SelectedCell == null)
                {
                    GameScene.Game.ReceiveChat("请选择奖励.", MessageType.System);
                    return;
                }

                CEnvir.Enqueue(new C.MeiriQuestComplete { Index = SelectedQuest.QuestInfo.Index, ChoiceIndex = ((MeiriQuestReward)SelectedCell?.Tag)?.Index ?? 0 });
            };
        }

        #region Methods

        public void UpdateQuestDisplay()
        {
            if (NPCInfo == null)
            {
                Visible = false;
                return;
            }

            Quests.Clear();

            List<MeiriQuestInfo> availableQuests = new List<MeiriQuestInfo>(), currentQuests = new List<MeiriQuestInfo>(), completeQuests = new List<MeiriQuestInfo>();

            foreach (MeiriQuestInfo quest in NPCInfo.MeiriStartQuests)
            {
                if (quest.Type == QuestType.DailyRandom || !GameScene.Game.MeiriCanAccept(quest)) continue;

                availableQuests.Add(quest);
            }

            foreach (MeiriQuestInfo quest in NPCInfo.MeiriFinishQuests)
            {
                ClientMeiriUserQuest userQuest = GameScene.Game.MeiriQuestLog.FirstOrDefault(x => x.Quest == quest);

                if (userQuest == null || userQuest.Completed) continue;

                if (!userQuest.IsComplete)
                    currentQuests.Add(quest);
                else
                    completeQuests.Add(quest);
            }


            completeQuests.Sort((x1, x2) => string.Compare(x1.QuestName, x2.QuestName, StringComparison.Ordinal));
            availableQuests.Sort((x1, x2) => string.Compare(x1.QuestName, x2.QuestName, StringComparison.Ordinal));
            currentQuests.Sort((x1, x2) => string.Compare(x1.QuestName, x2.QuestName, StringComparison.Ordinal));

            Quests.AddRange(completeQuests);
            Quests.AddRange(availableQuests);
            Quests.AddRange(currentQuests);

            Visible = Quests.Count > 0;

            if (Quests.Count == 0) return;

            MeiriQuestInfo previousQuest = SelectedQuest?.QuestInfo;

            _SelectedQuest = null;

            UpdateScrollBar();

            if (previousQuest != null)
            {
                foreach (MeiriNPCQuestRow row in Rows)
                {
                    if (row.QuestInfo != previousQuest) continue;

                    _SelectedQuest = row;
                    break;
                }
            }

            if (SelectedQuest == null)
                SelectedQuest = Rows[0];

            if (SelectedQuest?.QuestInfo != null)
            {
                DescriptionLabel.Text = GameScene.Game.MeiriGetQuestText(SelectedQuest.QuestInfo, SelectedQuest.UserQuest, false);
                TasksLabel.Text = GameScene.Game.MeiriGetTaskText(SelectedQuest.QuestInfo, SelectedQuest.UserQuest);

                AcceptButton.Visible = SelectedQuest.UserQuest == null;
                CompleteButton.Visible = SelectedQuest.UserQuest != null && SelectedQuest.UserQuest.IsComplete;
            }
        }

        public void UpdateScrollBar()
        {
            ScrollBar.MaxValue = Quests.Count;

            for (int i = 0; i < Rows.Length; i++)
            {
                Rows[i].QuestInfo = i + ScrollBar.Value >= Quests.Count ? null : Quests[i + ScrollBar.Value];
            }


        }
        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _NPCInfo = null;
                NPCInfoChanged = null;

                Quests.Clear();
                Quests = null;

                HasChoice = false;

                _SelectedQuest = null;
                SelectedQuestChanged = null;

                _SelectedCell = null;
                SelectedCellChanged = null;

                if (Rows != null)
                {
                    for (int i = 0; i < Rows.Length; i++)
                    {
                        if (Rows[i] != null)
                        {
                            if (!Rows[i].IsDisposed)
                                Rows[i].Dispose();

                            Rows[i] = null;
                        }

                    }

                    Rows = null;
                }

                if (ScrollBar != null)
                {
                    if (!ScrollBar.IsDisposed)
                        ScrollBar.Dispose();

                    ScrollBar = null;
                }

                if (TasksLabel != null)
                {
                    if (!TasksLabel.IsDisposed)
                        TasksLabel.Dispose();

                    TasksLabel = null;
                }

                if (DescriptionLabel != null)
                {
                    if (!DescriptionLabel.IsDisposed)
                        DescriptionLabel.Dispose();

                    DescriptionLabel = null;
                }

                if (TypeLabel != null)
                {
                    if (!TypeLabel.IsDisposed)
                        TypeLabel.Dispose();

                    TypeLabel = null;
                }

                if (EndLabel != null)
                {
                    if (!EndLabel.IsDisposed)
                        EndLabel.Dispose();

                    EndLabel = null;
                }

                if (RewardGrid != null)
                {
                    if (!RewardGrid.IsDisposed)
                        RewardGrid.Dispose();

                    RewardGrid = null;
                }

                if (ChoiceGrid != null)
                {
                    if (!ChoiceGrid.IsDisposed)
                        ChoiceGrid.Dispose();

                    ChoiceGrid = null;
                }

                if (AcceptButton != null)
                {
                    if (!AcceptButton.IsDisposed)
                        AcceptButton.Dispose();

                    AcceptButton = null;
                }

                if (CompleteButton != null)
                {
                    if (!CompleteButton.IsDisposed)
                        CompleteButton.Dispose();

                    CompleteButton = null;
                }

                RewardArray = null;
                ChoiceArray = null;
            }

        }

        #endregion
    }

    public sealed class MeiriNPCQuestRow : DXControl
    {
        #region Properties

        #region QuestInfo

        public MeiriQuestInfo QuestInfo
        {
            get => _QuestInfo;
            set
            {
                MeiriQuestInfo oldValue = _QuestInfo;
                _QuestInfo = value;

                OnQuestInfoChanged(oldValue, value);
            }
        }
        private MeiriQuestInfo _QuestInfo;
        public event EventHandler<EventArgs> QuestInfoChanged;
        public void OnQuestInfoChanged(MeiriQuestInfo oValue, MeiriQuestInfo nValue)
        {
            if (QuestInfo == null)
            {
                Selected = false;
                UserQuest = null;
                QuestNameLabel.Text = string.Empty;
                QuestIcon.Visible = false;
            }
            else
            {
                UserQuest = GameScene.Game.MeiriQuestLog.FirstOrDefault(x => x.Quest == QuestInfo);
                QuestNameLabel.Text = QuestInfo.QuestName;
                QuestIcon.Visible = true;
            }

            if (UserQuest == null)
                QuestIcon.BaseIndex = 83; 
            else if (!UserQuest.IsComplete)
                QuestIcon.BaseIndex = 85; 
            else
                QuestIcon.BaseIndex = 93; 

            QuestInfoChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        #region UserQuest

        public ClientMeiriUserQuest UserQuest
        {
            get => _UserQuest;
            set
            {
                ClientMeiriUserQuest oldValue = _UserQuest;
                _UserQuest = value;

                OnUserQuestChanged(oldValue, value);
            }
        }
        private ClientMeiriUserQuest _UserQuest;
        public event EventHandler<EventArgs> UserQuestChanged;
        public void OnUserQuestChanged(ClientMeiriUserQuest oValue, ClientMeiriUserQuest nValue)
        {
            UserQuestChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        #region Selected

        public bool Selected
        {
            get => _Selected;
            set
            {
                if (_Selected == value) return;

                bool oldValue = _Selected;
                _Selected = value;

                OnSelectedChanged(oldValue, value);
            }
        }
        private bool _Selected;
        public event EventHandler<EventArgs> SelectedChanged;
        public void OnSelectedChanged(bool oValue, bool nValue)
        {
            Border = Selected;
            BackColour = Selected ? Color.FromArgb(80, 80, 125) : Color.FromArgb(25, 20, 0);

            SelectedChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        public DXAnimatedControl QuestIcon;
        public DXLabel QuestNameLabel;

        #endregion

        public MeiriNPCQuestRow()
        {
            DrawTexture = true;
            BackColour = Color.FromArgb(25, 20, 0);

            BorderColour = Color.FromArgb(198, 166, 99);
            Size = new Size(280, 20);

            QuestIcon = new DXAnimatedControl
            {
                Parent = this,
                Location = new Point(2, 2),
                Loop = true,
                LibraryFile = LibraryFile.Interface,
                BaseIndex = 83,
                FrameCount = 2,
                AnimationDelay = TimeSpan.FromSeconds(1),
                Visible = false,
                IsControl = false,
            };

            QuestNameLabel = new DXLabel
            {
                Location = new Point(20, 2),
                Parent = this,
                ForeColour = Color.White,
                IsControl = false,
            };
        }

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _QuestInfo = null;
                QuestInfoChanged = null;

                _UserQuest = null;
                UserQuestChanged = null;

                _Selected = false;
                SelectedChanged = null;

                if (QuestIcon != null)
                {
                    if (!QuestIcon.IsDisposed)
                        QuestIcon.Dispose();

                    QuestIcon = null;
                }

                if (QuestNameLabel != null)
                {
                    if (!QuestNameLabel.IsDisposed)
                        QuestNameLabel.Dispose();

                    QuestNameLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCAdoptCompanionDialog : DXWindow
    {
        #region Properties

        public MonsterObject CompanionDisplay;
        public Point CompanionDisplayPoint;

        public DXLabel NameLabel, IndexLabel, PriceLabel;
        public DXButton LeftButton, RightButton, AdoptButton, UnlockButton;

        public DXTextBox CompanionNameTextBox;

        public List<CompanionInfo> AvailableCompanions = new List<CompanionInfo>();

        #region SelectedCompanionInfo

        public CompanionInfo SelectedCompanionInfo
        {
            get => _SelectedCompanionInfo;
            set
            {
                if (_SelectedCompanionInfo == value) return;

                CompanionInfo oldValue = _SelectedCompanionInfo;
                _SelectedCompanionInfo = value;

                OnSelectedCompanionInfoChanged(oldValue, value);
            }
        }
        private CompanionInfo _SelectedCompanionInfo;
        public event EventHandler<EventArgs> SelectedCompanionInfoChanged;
        public void OnSelectedCompanionInfoChanged(CompanionInfo oValue, CompanionInfo nValue)
        {
            CompanionDisplay = null;

            if (SelectedCompanionInfo?.MonsterInfo == null) return;

            CompanionDisplay = new MonsterObject(SelectedCompanionInfo);

            RefreshUnlockButton();

            PriceLabel.Text = SelectedCompanionInfo.Price.ToString("#,##0");
            NameLabel.Text = SelectedCompanionInfo.MonsterInfo.MonsterName;
            SelectedCompanionInfoChanged?.Invoke(this, EventArgs.Empty);
        }




        #endregion

        #region SelectedIndex

        public int SelectedIndex
        {
            get => _SelectedIndex;
            set
            {
                int oldValue = _SelectedIndex;
                _SelectedIndex = value;

                OnSelectedIndexChanged(oldValue, value);
            }
        }
        private int _SelectedIndex;
        public event EventHandler<EventArgs> SelectedIndexChanged;
        public void OnSelectedIndexChanged(int oValue, int nValue)
        {
            if (SelectedIndex >= CartoonGlobals.CompanionInfoList.Count) return;

            SelectedCompanionInfo = CartoonGlobals.CompanionInfoList[SelectedIndex];

            IndexLabel.Text = $"{SelectedIndex + 1} of {CartoonGlobals.CompanionInfoList.Count}";

            LeftButton.Enabled = SelectedIndex > 0;

            RightButton.Enabled = SelectedIndex < CartoonGlobals.CompanionInfoList.Count - 1;

            SelectedIndexChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        #region AdoptAttempted

        public bool AdoptAttempted
        {
            get => _AdoptAttempted;
            set
            {
                if (_AdoptAttempted == value) return;

                bool oldValue = _AdoptAttempted;
                _AdoptAttempted = value;

                OnAdoptAttemptedChanged(oldValue, value);
            }
        }
        private bool _AdoptAttempted;
        public event EventHandler<EventArgs> AdoptAttemptedChanged;
        public void OnAdoptAttemptedChanged(bool oValue, bool nValue)
        {
            RefreshUnlockButton();
            AdoptAttemptedChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        #region CompanionNameValid

        public bool CompanionNameValid
        {
            get => _CompanionNameValid;
            set
            {
                if (_CompanionNameValid == value) return;

                bool oldValue = _CompanionNameValid;
                _CompanionNameValid = value;

                OnCompanionNameValidChanged(oldValue, value);
            }
        }
        private bool _CompanionNameValid;
        public event EventHandler<EventArgs> CompanionNameValidChanged;
        public void OnCompanionNameValidChanged(bool oValue, bool nValue)
        {
            RefreshUnlockButton();
            CompanionNameValidChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        public bool CanAdopt => GameScene.Game.User != null && SelectedCompanionInfo != null && SelectedCompanionInfo.Price <= GameScene.Game.User.Gold && !AdoptAttempted && !UnlockButton.Visible && CompanionNameValid;


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCAdoptCompanionDialog()
        {
            TitleLabel.Text = "领养宠物";

            Movable = false;

            SetClientSize(new Size(275, 130));
            CompanionDisplayPoint = new Point(40, 95);

            NameLabel = new DXLabel
            {
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
            };

            NameLabel.SizeChanged += (o, e) =>
            {
                NameLabel.Location = new Point(CompanionDisplayPoint.X + 25 - NameLabel.Size.Width / 2, CompanionDisplayPoint.Y + 30);
            };

            IndexLabel = new DXLabel
            {
                Parent = this,
                Location = new Point(CompanionDisplayPoint.X, 200),
            };
            IndexLabel.SizeChanged += (o, e) =>
            {
                IndexLabel.Location = new Point(CompanionDisplayPoint.X + 25 - IndexLabel.Size.Width / 2, CompanionDisplayPoint.Y + 55);
            };
            LeftButton = new DXButton
            {
                Parent = this,
                LibraryFile = LibraryFile.GameInter,
                Index = 32,
                Location = new Point(CompanionDisplayPoint.X - 20, CompanionDisplayPoint.Y + 55)
            };
            LeftButton.MouseClick += (o, e) => SelectedIndex--;
            RightButton = new DXButton
            {
                Parent = this,
                LibraryFile = LibraryFile.GameInter,
                Index = 37,
                Location = new Point(CompanionDisplayPoint.X + 60, CompanionDisplayPoint.Y + 55)
            };
            RightButton.MouseClick += (o, e) => SelectedIndex++;

            DXLabel label = new DXLabel
            {
                Parent = this,
                Text = "价格:"
            };
            label.Location = new Point(160 - label.Size.Width, CompanionDisplayPoint.Y);

            PriceLabel = new DXLabel
            {
                Parent = this,
                Location = new Point(160, CompanionDisplayPoint.Y),
                ForeColour = Color.White,
            };

            CompanionNameTextBox = new DXTextBox
            {
                Parent = this,
                Location = new Point(160, CompanionDisplayPoint.Y + 25),
                Size = new Size(120, 20)
            };
            CompanionNameTextBox.TextBox.TextChanged += TextBox_TextChanged;

            label = new DXLabel
            {
                Parent = this,
                Text = "名称:"
            };
            label.Location = new Point(CompanionNameTextBox.Location.X - label.Size.Width, CompanionNameTextBox.Location.Y + (CompanionNameTextBox.Size.Height - label.Size.Height) / 2);

            AdoptButton = new DXButton
            {
                Parent = this,
                Location = new Point(CompanionNameTextBox.Location.X, CompanionNameTextBox.Location.Y + 27),
                Size = new Size(120, SmallButtonHeight),
                ButtonType = ButtonType.SmallButton,
                Label = { Text = "领养" }
            };
            AdoptButton.MouseClick += AdoptButton_MouseClick;

            UnlockButton = new DXButton
            {
                Parent = this,
                Location = new Point(ClientArea.Right - 80, ClientArea.Y),
                Size = new Size(80, SmallButtonHeight),
                ButtonType = ButtonType.SmallButton,
                Label = { Text = "解锁" }
            };

            UnlockButton.MouseClick += UnlockButton_MouseClick;

            SelectedIndex = 0;
        }

        #region Methods
        private void TextBox_TextChanged(object sender, EventArgs e)
        {
            CompanionNameValid = CartoonGlobals.CharacterReg.IsMatch(CompanionNameTextBox.TextBox.Text);

            if (string.IsNullOrEmpty(CompanionNameTextBox.TextBox.Text))
                CompanionNameTextBox.BorderColour = Color.FromArgb(198, 166, 99);
            else
                CompanionNameTextBox.BorderColour = CompanionNameValid ? Color.Green : Color.Red;
        }

        private void AdoptButton_MouseClick(object sender, MouseEventArgs e)
        {
            AdoptAttempted = true;

            CEnvir.Enqueue(new C.CompanionAdopt { Index = SelectedCompanionInfo.Index, Name = CompanionNameTextBox.TextBox.Text });
        }
        private void UnlockButton_MouseClick(object sender, MouseEventArgs e)
        {
            if (GameScene.Game.Inventory.All(x => x == null || x.Info.Effect != ItemEffect.CompanionTicket))
            {
                GameScene.Game.ReceiveChat("你需要一张宠物解锁券，才可以解锁新的宠物", MessageType.System);
                return;
            }

            DXMessageBox box = new DXMessageBox($"你确定你想要使用一张宠物解锁券?\n\n" + $"" + $"这将解锁新宠物 {SelectedCompanionInfo.MonsterInfo.MonsterName} ", "解锁宠物", DXMessageBoxButtons.YesNo);


            box.YesButton.MouseClick += (o1, e1) =>
            {
                CEnvir.Enqueue(new C.CompanionUnlock { Index = SelectedCompanionInfo.Index });

                UnlockButton.Enabled = false;
            };
        }

        public override void Process()
        {
            base.Process();

            CompanionDisplay?.Process();
        }

        protected override void OnAfterDraw()
        {
            base.OnAfterDraw();

            if (CompanionDisplay == null) return;

            int x = DisplayArea.X + CompanionDisplayPoint.X;
            int y = DisplayArea.Y + CompanionDisplayPoint.Y;

            if (CompanionDisplay.Image == MonsterImage.Companion_Donkey)
            {
                x += 10;
                y -= 5;
            }


            CompanionDisplay.DrawShadow(x, y);
            CompanionDisplay.DrawBody(x, y);
        }

        public void RefreshUnlockButton()
        {

            UnlockButton.Visible = !SelectedCompanionInfo.Available && !AvailableCompanions.Contains(SelectedCompanionInfo);

            if (GameScene.Game.User == null || SelectedCompanionInfo == null || SelectedCompanionInfo.Price <= GameScene.Game.User.Gold)
                PriceLabel.ForeColour = Color.FromArgb(198, 166, 99);
            else
                PriceLabel.ForeColour = Color.Red;


            AdoptButton.Enabled = CanAdopt;
        }
        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                CompanionDisplay = null;
                CompanionDisplayPoint = Point.Empty;

                _SelectedCompanionInfo = null;
                SelectedCompanionInfoChanged = null;

                _SelectedIndex = 0;
                SelectedIndexChanged = null;

                _AdoptAttempted = false;
                AdoptAttemptedChanged = null;

                _CompanionNameValid = false;
                CompanionNameValidChanged = null;


                if (NameLabel != null)
                {
                    if (!NameLabel.IsDisposed)
                        NameLabel.Dispose();

                    NameLabel = null;
                }

                if (IndexLabel != null)
                {
                    if (!IndexLabel.IsDisposed)
                        IndexLabel.Dispose();

                    IndexLabel = null;
                }

                if (PriceLabel != null)
                {
                    if (!PriceLabel.IsDisposed)
                        PriceLabel.Dispose();

                    PriceLabel = null;
                }

                if (LeftButton != null)
                {
                    if (!LeftButton.IsDisposed)
                        LeftButton.Dispose();

                    LeftButton = null;
                }

                if (RightButton != null)
                {
                    if (!RightButton.IsDisposed)
                        RightButton.Dispose();

                    RightButton = null;
                }

                if (AdoptButton != null)
                {
                    if (!AdoptButton.IsDisposed)
                        AdoptButton.Dispose();

                    AdoptButton = null;
                }

                if (UnlockButton != null)
                {
                    if (!UnlockButton.IsDisposed)
                        UnlockButton.Dispose();

                    UnlockButton = null;
                }

                if (CompanionNameTextBox != null)
                {
                    if (!CompanionNameTextBox.IsDisposed)
                        CompanionNameTextBox.Dispose();

                    CompanionNameTextBox = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCCompanionStorageDialog : DXWindow
    {
        #region Properties

        private DXVScrollBar ScrollBar;

        public NPCCompanionStorageRow[] Rows;

        public List<ClientUserCompanion> Companions = new List<ClientUserCompanion>();


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCCompanionStorageDialog()
        {
            TitleLabel.Text = "仓库";

            Movable = false;

            SetClientSize(new Size(198, 349));

            Rows = new NPCCompanionStorageRow[4];

            for (int i = 0; i < Rows.Length; i++)
            {
                Rows[i] = new NPCCompanionStorageRow
                {
                    Parent = this,
                    Location = new Point(ClientArea.X, ClientArea.Y + i * 88),
                };
            }

            ScrollBar = new DXVScrollBar
            {
                Parent = this,
                Location = new Point(ClientArea.Right - 15, ClientArea.Y + 1),
                Size = new Size(14, Rows.Length * 87 - 1),
                VisibleSize = Rows.Length,
                Change = 1,
            };
            ScrollBar.ValueChanged += (o, e) => UpdateScrollBar();
        }

        #region Methods

        public void UpdateScrollBar()
        {
            ScrollBar.MaxValue = Companions.Count;

            for (int i = 0; i < Rows.Length; i++)
            {
                Rows[i].UserCompanion = i + ScrollBar.Value >= Companions.Count ? null : Companions[i + ScrollBar.Value];
            }


        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                Companions.Clear();
                Companions = null;

                if (Rows != null)
                {
                    for (int i = 0; i < Rows.Length; i++)
                    {
                        if (Rows[i] != null)
                        {
                            if (!Rows[i].IsDisposed)
                                Rows[i].Dispose();

                            Rows[i] = null;
                        }

                    }

                    Rows = null;
                }

                if (ScrollBar != null)
                {
                    if (!ScrollBar.IsDisposed)
                        ScrollBar.Dispose();

                    ScrollBar = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCCompanionStorageRow : DXControl
    {
        #region Properties
        #region UserCompanion

        public ClientUserCompanion UserCompanion
        {
            get => _UserCompanion;
            set
            {
                ClientUserCompanion oldValue = _UserCompanion;
                _UserCompanion = value;

                OnUserCompanionChanged(oldValue, value);
            }
        }
        private ClientUserCompanion _UserCompanion;
        public event EventHandler<EventArgs> UserCompanionChanged;
        public void OnUserCompanionChanged(ClientUserCompanion oValue, ClientUserCompanion nValue)
        {
            UserCompanionChanged?.Invoke(this, EventArgs.Empty);

            if (UserCompanion == null)
            {
                Visible = false;
                return;
            }

            Visible = true;

            CompanionDisplay = new MonsterObject(UserCompanion.CompanionInfo);

            NameLabel.Text = UserCompanion.Name;
            LevelLabel.Text = $"等级 {UserCompanion.Level}";

            if (UserCompanion == GameScene.Game.Companion)
                Selected = true;
            else
            {
                Selected = false;

                if (!string.IsNullOrEmpty(UserCompanion.CharacterName))
                {
                    RetrieveButton.Enabled = false;
                    RetrieveButton.Hint = $"你当前的宠物是 {UserCompanion.CharacterName}.";
                }
                else
                {
                    RetrieveButton.Enabled = true;
                    RetrieveButton.Hint = null;
                }

            }
        }

        #endregion

        #region Selected

        public bool Selected
        {
            get => _Selected;
            set
            {
                if (_Selected == value) return;

                bool oldValue = _Selected;
                _Selected = value;

                OnSelectedChanged(oldValue, value);
            }
        }
        private bool _Selected;
        public event EventHandler<EventArgs> SelectedChanged;
        public void OnSelectedChanged(bool oValue, bool nValue)
        {
            Border = Selected;
            BackColour = Selected ? Color.FromArgb(80, 80, 125) : Color.FromArgb(25, 20, 0);

            RetrieveButton.Visible = !Selected;
            StoreButton.Visible = Selected;


            SelectedChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        public MonsterObject CompanionDisplay;
        public Point CompanionDisplayPoint;
        public DXLabel NameLabel, LevelLabel;
        public DXButton StoreButton, RetrieveButton;

        #endregion

        public NPCCompanionStorageRow()
        {
            DrawTexture = true;
            BackColour = Color.FromArgb(25, 20, 0);

            BorderColour = Color.FromArgb(198, 166, 99);
            Size = new Size(180, 85);
            CompanionDisplayPoint = new Point(10, 45);

            NameLabel = new DXLabel
            {
                Parent = this,
                Location = new Point(85, 5)

            };

            LevelLabel = new DXLabel
            {
                Parent = this,
                Location = new Point(85, 30)
            };

            StoreButton = new DXButton
            {
                Parent = this,
                Location = new Point(85, 60),
                Size = new Size(80, SmallButtonHeight),
                ButtonType = ButtonType.SmallButton,
                Label = { Text = "商店" },
                Visible = false
            };
            StoreButton.MouseClick += StoreButton_MouseClick;


            RetrieveButton = new DXButton
            {
                Parent = this,
                Location = new Point(85, 60),
                Size = new Size(80, SmallButtonHeight),
                ButtonType = ButtonType.SmallButton,
                Label = { Text = "取回" }
            };
            RetrieveButton.MouseClick += RetrieveButton_MouseClick;


        }

        #region Methods

        private void StoreButton_MouseClick(object sender, MouseEventArgs e)
        {
            CEnvir.Enqueue(new C.CompanionStore { Index = UserCompanion.Index });
        }

        private void RetrieveButton_MouseClick(object sender, MouseEventArgs e)
        {
            CEnvir.Enqueue(new C.CompanionRetrieve { Index = UserCompanion.Index });
        }

        public override void Process()
        {
            base.Process();

            CompanionDisplay?.Process();
        }

        protected override void OnAfterDraw()
        {
            base.OnAfterDraw();

            if (CompanionDisplay == null) return;

            int x = DisplayArea.X + CompanionDisplayPoint.X;
            int y = DisplayArea.Y + CompanionDisplayPoint.Y;

            if (CompanionDisplay.Image == MonsterImage.Companion_Donkey)
            {
                x += 10;
                y -= 5;
            }


            CompanionDisplay.DrawShadow(x, y);
            CompanionDisplay.DrawBody(x, y);
        }


        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _UserCompanion = null;
                UserCompanionChanged = null;

                _Selected = false;
                SelectedChanged = null;

                CompanionDisplay = null;
                CompanionDisplayPoint = Point.Empty;

                if (NameLabel != null)
                {
                    if (!NameLabel.IsDisposed)
                        NameLabel.Dispose();

                    NameLabel = null;
                }

                if (LevelLabel != null)
                {
                    if (!LevelLabel.IsDisposed)
                        LevelLabel.Dispose();

                    LevelLabel = null;
                }

                if (StoreButton != null)
                {
                    if (!StoreButton.IsDisposed)
                        StoreButton.Dispose();

                    StoreButton = null;
                }

                if (RetrieveButton != null)
                {
                    if (!RetrieveButton.IsDisposed)
                        RetrieveButton.Dispose();

                    RetrieveButton = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCWeddingRingDialog : DXWindow
    {
        #region Properties

        public DXItemGrid RingGrid;
        public DXButton BindButton;


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCWeddingRingDialog()
        {
            HasTitle = false;
            SetClientSize(new Size(60, 85));
            CloseButton.Visible = false;

            DXLabel label = new DXLabel
            {
                Text = "戒指",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                ForeColour = Color.FromArgb(198, 166, 99),
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = ClientArea.Location,
                AutoSize = false,
                Size = new Size(ClientArea.Width, 20),
                DrawFormat = TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter
            };
            RingGrid = new DXItemGrid
            {
                Parent = this,
                Location = new Point(ClientArea.X + (ClientArea.Width - 36) / 2, label.Size.Height + label.Location.Y + 5),
                GridSize = new Size(1, 1),
                Linked = true,
                GridType = GridType.WeddingRing,
            };

            RingGrid.Grid[0].LinkChanged += (o, e) => BindButton.Enabled = RingGrid.Grid[0].Item != null;
            RingGrid.Grid[0].BeforeDraw += (o, e) => Draw(RingGrid.Grid[0], 31);

            BindButton = new DXButton
            {
                Size = new Size(50, SmallButtonHeight),
                Location = new Point((ClientArea.Width - 50) / 2 + ClientArea.X, ClientArea.Bottom - SmallButtonHeight),
                Label = { Text = "绑定" },
                Parent = this,
                ButtonType = ButtonType.SmallButton,
                Enabled = false,
            };
            BindButton.MouseClick += (o, e) =>
            {
                if (RingGrid.Grid[0].Item == null || RingGrid.Grid[0].Item.Info.ItemType != ItemType.Ring) return;


                CEnvir.Enqueue(new C.MarriageMakeRing { Slot = RingGrid.Grid[0].Link.Slot });

                RingGrid.Grid[0].Link = null;
            };
        }

        #region Methods

        public void Draw(DXItemCell cell, int index)
        {
            if (InterfaceLibrary == null) return;

            if (cell.Item != null) return;

            Size s = InterfaceLibrary.GetSize(index);
            int x = (cell.Size.Width - s.Width) / 2 + cell.DisplayArea.X;
            int y = (cell.Size.Height - s.Height) / 2 + cell.DisplayArea.Y;

            InterfaceLibrary.Draw(index, x, y, Color.White, false, 0.2F, ImageType.Image);
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (RingGrid != null)
                {
                    if (!RingGrid.IsDisposed)
                        RingGrid.Dispose();

                    RingGrid = null;
                }

                if (BindButton != null)
                {
                    if (!BindButton.IsDisposed)
                        BindButton.Dispose();

                    BindButton = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCRefinementStoneDialog : DXWindow
    {
        #region Properties

        public DXItemGrid IronOreGrid, GoldOreGrid, DiamondGrid, SilverOreGrid, CrystalGrid;
        public DXNumberTextBox GoldBox;

        public DXButton SubmitButton;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                GoldOreGrid.ClearLinks();
                DiamondGrid.ClearLinks();
                SilverOreGrid.ClearLinks();
                IronOreGrid.ClearLinks();
                CrystalGrid.ClearLinks();

                GoldBox.Value = 0;
            }
        }


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCRefinementStoneDialog()
        {
            TitleLabel.Text = "精炼石";


            SetClientSize(new Size(491, 130));

            DXLabel label = new DXLabel
            {
                Text = "铁矿",
                Location = new Point(ClientArea.X + 21, ClientArea.Y),
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };

            IronOreGrid = new DXItemGrid
            {
                GridSize = new Size(4, 1),
                Parent = this,
                GridType = GridType.RefinementStoneIronOre,
                Linked = true,
                Location = new Point(label.Location.X + 5, label.Location.Y + label.Size.Height + 5)
            };

            label = new DXLabel
            {
                Text = "银矿",
                Location = new Point(IronOreGrid.Size.Width + 5 + IronOreGrid.Location.X, label.Location.Y),
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };

            SilverOreGrid = new DXItemGrid
            {
                GridSize = new Size(4, 1),
                Parent = this,
                GridType = GridType.RefinementStoneSilverOre,
                Linked = true,
                Location = new Point(label.Location.X + 5, label.Location.Y + label.Size.Height + 5)
            };

            label = new DXLabel
            {
                Text = "金刚石",
                Location = new Point(SilverOreGrid.Size.Width + 5 + SilverOreGrid.Location.X, label.Location.Y),
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };

            DiamondGrid = new DXItemGrid
            {
                GridSize = new Size(4, 1),
                Parent = this,
                GridType = GridType.RefinementStoneDiamond,
                Linked = true,
                Location = new Point(label.Location.X + 5, label.Location.Y + label.Size.Height + 5)
            };

            label = new DXLabel
            {
                Text = "金矿",
                Location = new Point(ClientArea.X + 21, IronOreGrid.Location.Y + IronOreGrid.Size.Height + 10),
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };

            GoldOreGrid = new DXItemGrid
            {
                GridSize = new Size(2, 1),
                Parent = this,
                GridType = GridType.RefinementStoneGoldOre,
                Linked = true,
                Location = new Point(label.Location.X + 5, label.Location.Y + label.Size.Height + 5)
            };


            label = new DXLabel
            {
                Text = "结晶",
                Location = new Point(IronOreGrid.Size.Width + 5 + IronOreGrid.Location.X, IronOreGrid.Location.Y + IronOreGrid.Size.Height + 10),
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };

            CrystalGrid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.RefinementStoneCrystal,
                Linked = true,
                Location = new Point(label.Location.X + 5, label.Location.Y + label.Size.Height + 5)
            };


            label = new DXLabel
            {
                Text = "金币",
                Location = new Point(SilverOreGrid.Size.Width + 5 + SilverOreGrid.Location.X, SilverOreGrid.Location.Y + SilverOreGrid.Size.Height + 10),
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            GoldBox = new DXNumberTextBox
            {
                Location = new Point(label.Location.X + 6, label.Location.Y + label.Size.Height + 5),
                Parent = this,
                MaxValue = CartoonGlobals.MaxGold,
                Size = new Size(36 * 4 - 5, 16)
            };


            foreach (DXItemCell cell in IronOreGrid.Grid)
            {
                cell.LinkChanged += (o, e) => UpdateButton();
            }
            foreach (DXItemCell cell in SilverOreGrid.Grid)
            {
                cell.LinkChanged += (o, e) => UpdateButton();
            }
            foreach (DXItemCell cell in DiamondGrid.Grid)
            {
                cell.LinkChanged += (o, e) => UpdateButton();
            }
            foreach (DXItemCell cell in GoldOreGrid.Grid)
            {
                cell.LinkChanged += (o, e) => UpdateButton();
            }
            foreach (DXItemCell cell in CrystalGrid.Grid)
            {
                cell.LinkChanged += (o, e) => UpdateButton();
            }

            GoldBox.ValueChanged += (o, e) => UpdateButton();

            SubmitButton = new DXButton
            {
                Label = { Text = "提交" },
                Size = new Size(80, SmallButtonHeight),
                Parent = this,
                Enabled = false,
                ButtonType = ButtonType.SmallButton,
                Location = new Point(GoldBox.Location.X + GoldBox.Size.Width - 78, GoldBox.Location.Y + GoldBox.Size.Height + 5),
            };
            SubmitButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                List<CellLinkInfo> iron = new List<CellLinkInfo>();
                foreach (DXItemCell cell in IronOreGrid.Grid)
                {
                    if (cell.Link == null) continue;

                    iron.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }
                if (iron.Count < 4)
                {
                    GameScene.Game.ReceiveChat("你需要铁矿x4来制造一块精炼石", MessageType.System);
                    return;
                }

                List<CellLinkInfo> silver = new List<CellLinkInfo>();
                foreach (DXItemCell cell in SilverOreGrid.Grid)
                {
                    if (cell.Link == null) continue;

                    silver.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }
                if (silver.Count < 4)
                {
                    GameScene.Game.ReceiveChat("你需要银矿x4来制造一块精炼石", MessageType.System);
                    return;
                }

                List<CellLinkInfo> diamond = new List<CellLinkInfo>();
                foreach (DXItemCell cell in DiamondGrid.Grid)
                {
                    if (cell.Link == null) continue;

                    diamond.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }
                if (diamond.Count < 4)
                {
                    GameScene.Game.ReceiveChat("您需要金刚石x4来制造一块精炼石", MessageType.System);
                    return;
                }

                List<CellLinkInfo> gold = new List<CellLinkInfo>();
                foreach (DXItemCell cell in GoldOreGrid.Grid)
                {
                    if (cell.Link == null) continue;

                    gold.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }
                if (gold.Count < 2)
                {
                    GameScene.Game.ReceiveChat("你需要金矿x2来制造一块精炼石", MessageType.System);
                    return;
                }

                List<CellLinkInfo> crystal = new List<CellLinkInfo>();
                foreach (DXItemCell cell in CrystalGrid.Grid)
                {
                    if (cell.Link == null) continue;

                    crystal.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }
                if (crystal.Count < 1 || crystal[0].Count != 25)
                {
                    GameScene.Game.ReceiveChat("你需要结晶 x 25 来制作一块精炼石", MessageType.System);
                    return;
                }

                if (GoldBox.Value > GameScene.Game.User.Gold)
                {
                    GameScene.Game.ReceiveChat("你的金币不足.", MessageType.System);
                    return;
                }

                CEnvir.Enqueue(new C.NPCRefinementStone { IronOres = iron, SilverOres = silver, DiamondOres = diamond, GoldOres = gold, Crystal = crystal, Gold = GoldBox.Value });

                GoldBox.Value = 0;
            };
        }

        #region Methods
        public void UpdateButton()
        {
            SubmitButton.Enabled = false;

            if (GoldBox.Value > GameScene.Game.User.Gold)
            {
                GoldBox.BorderColour = Color.Red;
                return;
            }
            GoldBox.BorderColour = Color.FromArgb(198, 166, 99);

            foreach (DXItemCell cell in IronOreGrid.Grid)
            {
                if (cell.Link == null) return;
            }
            foreach (DXItemCell cell in SilverOreGrid.Grid)
            {
                if (cell.Link == null) return;
            }
            foreach (DXItemCell cell in DiamondGrid.Grid)
            {
                if (cell.Link == null) return;
            }
            foreach (DXItemCell cell in GoldOreGrid.Grid)
            {
                if (cell.Link == null) return;
            }
            foreach (DXItemCell cell in CrystalGrid.Grid)
            {
                if (cell.Link == null) return;
                if (cell.LinkedCount != 25) return;
            }

            SubmitButton.Enabled = true;
        }
        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (IronOreGrid != null)
                {
                    if (!IronOreGrid.IsDisposed)
                        IronOreGrid.Dispose();

                    IronOreGrid = null;
                }

                if (SilverOreGrid != null)
                {
                    if (!SilverOreGrid.IsDisposed)
                        SilverOreGrid.Dispose();

                    SilverOreGrid = null;
                }

                if (DiamondGrid != null)
                {
                    if (!DiamondGrid.IsDisposed)
                        DiamondGrid.Dispose();

                    DiamondGrid = null;
                }

                if (GoldOreGrid != null)
                {
                    if (!GoldOreGrid.IsDisposed)
                        GoldOreGrid.Dispose();

                    GoldOreGrid = null;
                }

                if (CrystalGrid != null)
                {
                    if (!CrystalGrid.IsDisposed)
                        CrystalGrid.Dispose();

                    CrystalGrid = null;
                }

                if (GoldBox != null)
                {
                    if (!GoldBox.IsDisposed)
                        GoldBox.Dispose();

                    GoldBox = null;
                }

                if (SubmitButton != null)
                {
                    if (!SubmitButton.IsDisposed)
                        SubmitButton.Dispose();

                    SubmitButton = null;
                }
            }

        }

        #endregion
    }

    
    public sealed class NPCItemFragmentDialog : DXWindow
    {
        #region Properties

        public DXItemGrid Grid;
        public DXButton FragmentButton;
        public DXLabel CostLabel;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
                Grid.ClearLinks();
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCItemFragmentDialog()
        {
            TitleLabel.Text = "碎片物品";

            Grid = new DXItemGrid
            {
                GridSize = new Size(7, 3),
                Parent = this,
                GridType = GridType.ItemFragment,
                Linked = true
            };

            Movable = false;
            SetClientSize(new Size(Grid.Size.Width, Grid.Size.Height + 50));
            Grid.Location = ClientArea.Location;

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();


            CostLabel = new DXLabel
            {
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp
            };

            new DXLabel
            {
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter | TextFormatFlags.HorizontalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "碎片成本:",
                Size = new Size(79, 20),
                IsControl = false,
            };

            DXButton selectAll = new DXButton
            {
                Label = { Text = "全选" },
                Location = new Point(ClientArea.X, CostLabel.Location.Y + CostLabel.Size.Height + 5),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(79, SmallButtonHeight)
            };
            selectAll.MouseClick += (o, e) =>
            {
                foreach (DXItemCell cell in GameScene.Game.InventoryBox.Grid.Grid)
                {
                    if (!cell.CheckLink(Grid)) continue;

                    cell.MoveItem(Grid, true);
                }
            };

            FragmentButton = new DXButton
            {
                Label = { Text = "碎片" },
                Location = new Point(ClientArea.Right - 80, CostLabel.Location.Y + CostLabel.Size.Height + 5),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(79, SmallButtonHeight),
                Enabled = false,
            };
            FragmentButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                List<CellLinkInfo> links = new List<CellLinkInfo>();

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCFragment { Links = links });
            };
        }

        #region Methods
        private void CalculateCost()
        {
            int sum = 0;

            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                if (cell.Link?.Item == null) continue;

                sum += cell.Link.Item.FragmentCost();
                count++;
            }

            CostLabel.ForeColour = sum > MapObject.User.Gold ? Color.Red : Color.White;

            CostLabel.Text = sum.ToString("#,##0");

            FragmentButton.Enabled = sum <= MapObject.User.Gold && count > 0;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (FragmentButton != null)
                {
                    if (!FragmentButton.IsDisposed)
                        FragmentButton.Dispose();

                    FragmentButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    
    public sealed class NPCItemZaixianFragmentDialog : DXWindow
    {
        #region Properties

        public DXItemGrid Grid;
        public DXButton FragmentButton;
        public DXLabel CostLabel;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
                Grid.ClearLinks();
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCItemZaixianFragmentDialog()
        {
            TitleLabel.Text = "碎片物品";

            Grid = new DXItemGrid
            {
                GridSize = new Size(7, 3),
                Parent = this,
                GridType = GridType.ItemFragment,
                Linked = true
            };
            
            
            
            
            SetClientSize(new Size(Grid.Size.Width, Grid.Size.Height + 50));
            Grid.Location = ClientArea.Location;

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();


            CostLabel = new DXLabel
            {
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp
            };

            new DXLabel
            {
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter | TextFormatFlags.HorizontalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "碎片成本:",
                Size = new Size(79, 20),
                IsControl = false,
            };

            DXButton selectAll = new DXButton
            {
                Label = { Text = "全选" },
                Location = new Point(ClientArea.X, CostLabel.Location.Y + CostLabel.Size.Height + 5),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(79, SmallButtonHeight)
            };
            selectAll.MouseClick += (o, e) =>
            {
                foreach (DXItemCell cell in GameScene.Game.InventoryBox.Grid.Grid)
                {
                    if (!cell.CheckLink(Grid)) continue;

                    cell.MoveItem(Grid, true);
                }
            };

            FragmentButton = new DXButton
            {
                Label = { Text = "碎片" },
                Location = new Point(ClientArea.Right - 80, CostLabel.Location.Y + CostLabel.Size.Height + 5),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(79, SmallButtonHeight),
                Enabled = false,
            };
            FragmentButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                List<CellLinkInfo> links = new List<CellLinkInfo>();

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.ZaixianNPCFragment { Links = links });
            };
        }

        #region Methods
        private void CalculateCost()
        {
            int sum = 0;

            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                if (cell.Link?.Item == null) continue;

                sum += cell.Link.Item.ZaixianFragmentCost();
                count++;
            }

            CostLabel.ForeColour = sum > MapObject.User.Gold ? Color.Red : Color.White;

            CostLabel.Text = sum.ToString("#,##0");

            FragmentButton.Enabled = sum <= MapObject.User.Gold && count > 0;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (FragmentButton != null)
                {
                    if (!FragmentButton.IsDisposed)
                        FragmentButton.Dispose();

                    FragmentButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    
    public sealed class NPCXiaohuiDialog : DXWindow
    {
        #region Properties

        public DXItemGrid Grid;
        public DXButton FragmentButton;
        public DXLabel CostLabel;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
                Grid.ClearLinks();
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCXiaohuiDialog()
        {
            TitleLabel.Text = "装备";
            CloseButton.Visible = false;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.Xiaohui,
                Linked = true
            };

            
            SetClientSize(new Size(Grid.Size.Width, Grid.Size.Height + 30));
            Grid.Location = ClientArea.Location;

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();


            CostLabel = new DXLabel
            {

            };

            new DXLabel
            {

            };

            DXButton selectAll = new DXButton
            {

            };

            FragmentButton = new DXButton
            {
                Label = { Text = "销毁" },
                Location = new Point(7, 82),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(40, SmallButtonHeight),
                Enabled = false,
            };
            FragmentButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                List<CellLinkInfo> links = new List<CellLinkInfo>();

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiaohui { Links = links });
            };
        }

        #region Methods
        private void CalculateCost()
        {
            int sum = 0;

            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                switch (cell.Link?.Item.Info.ItemType)
                {
                    case ItemType.Nothing:
                    case ItemType.Consumable:
                    case ItemType.Weapon:
                    case ItemType.Armour:
                    case ItemType.Torch:
                    case ItemType.Helmet:
                    case ItemType.Necklace:
                    case ItemType.Bracelet:
                    case ItemType.Ring:
                    case ItemType.Shoes:
                    case ItemType.Poison:
                    case ItemType.Amulet:
                    case ItemType.Meat:
                    case ItemType.Ore:
                    case ItemType.Book:
                    case ItemType.Scroll:
                    case ItemType.DarkStone:
                    case ItemType.RefineSpecial:
                    case ItemType.HorseArmour:
                    case ItemType.Flower:
                    case ItemType.CompanionFood:
                    case ItemType.CompanionBag:
                    case ItemType.CompanionHead:
                    case ItemType.CompanionBack:
                    case ItemType.System:
                    case ItemType.ItemPart:
                    case ItemType.Emblem:
                    case ItemType.Shield:
                    case ItemType.Baoshi:
                    case ItemType.Shizhuang:
                    case ItemType.Fabao:
                        if (cell.Link?.Item == null) continue;
                        sum += cell.Link.Item.FragmentCost();
                        count++;
                        break;
                }

                CostLabel.ForeColour = sum > MapObject.User.Gold ? Color.Red : Color.White;

                CostLabel.Text = sum.ToString("#,##0");

                FragmentButton.Enabled = sum <= MapObject.User.Gold && count > 0;
            }

        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (FragmentButton != null)
                {
                    if (!FragmentButton.IsDisposed)
                        FragmentButton.Dispose();

                    FragmentButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    
    public sealed class NPCBShechengDialog : DXWindow
    {
        #region Properties

        public DXItemGrid Grid;
        public DXButton FragmentButton;
        public DXLabel CostLabel;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
                Grid.ClearLinks();
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCBShechengDialog()
        {
            TitleLabel.Text = "宝石";
            CloseButton.Visible = false;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.hechengbaoshi,
                Linked = true
            };

            Movable = false;
            SetClientSize(new Size(Grid.Size.Width, Grid.Size.Height + 30));
            Grid.Location = ClientArea.Location;

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();


            CostLabel = new DXLabel
            {

            };

            new DXLabel
            {

            };

            DXButton selectAll = new DXButton
            {

            };

            FragmentButton = new DXButton
            {
                Label = { Text = "合成" },
                Location = new Point(7, 82),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(40, SmallButtonHeight),
                Enabled = false,
            };
            FragmentButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                List<CellLinkInfo> links = new List<CellLinkInfo>();

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPChechengbaoshi { Links = links });
            };
        }

        #region Methods
        private void CalculateCost()
        {
            int sum = 0;

            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                switch (cell.Link?.Item.Info.ItemType)
                {
                    case ItemType.Baoshi:
                        
                        if (GameScene.Game.User.BaoshiKaiqi5433)
                        {
                            if (cell.Link?.Item.Info.Weight == 1 && cell.LinkedCount != 5) continue;
                            if (cell.Link?.Item.Info.Weight == 2 && cell.LinkedCount != 4) continue;
                            if (cell.Link?.Item.Info.Weight == 3 && cell.LinkedCount != 3) continue;
                            if (cell.Link?.Item.Info.Weight == 4 && cell.LinkedCount != 3) continue;
                            if (cell.Link?.Item.Info.Weight == 5) continue;
                        }
                        else
                        {
                            
                            if (cell.LinkedCount != 5) continue;
                        }

                        if (cell.Link?.Item == null) continue;

                        
                        switch (cell.Link?.Item.Info.ItemName)
                        {
                            case "吸血宝石":
                            case "麻痹几率宝石":
                            case "减速宝石":
                            case "沉默宝石":
                            case "格挡宝石":
                            case "躲避宝石":
                            case "强元素[火]":
                            case "强元素[冰]":
                            case "强元素[雷]":
                            case "强元素[风]":
                            case "强元素[神圣]":
                            case "强元素[暗黑]":
                            case "强元素[幻影]":
                            case "灭魂宝石":
                                continue;
                        }

                        sum += cell.Link.Item.FragmentCost();
                        count++;

                        break;
                }

                CostLabel.ForeColour = sum > MapObject.User.Gold ? Color.Red : Color.White;

                CostLabel.Text = sum.ToString("#,##0");

                FragmentButton.Enabled = sum <= MapObject.User.Gold && count > 0;


            }

        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (FragmentButton != null)
                {
                    if (!FragmentButton.IsDisposed)
                        FragmentButton.Dispose();

                    FragmentButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    
    public sealed class NPCBSduihuanDialog : DXWindow
    {
        #region Properties

        public DXItemGrid Grid;
        public DXButton FragmentButton;
        public DXLabel CostLabel;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
                Grid.ClearLinks();
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCBSduihuanDialog()
        {
            TitleLabel.Text = "分解宝石";
            CloseButton.Visible = false;

            Grid = new DXItemGrid
            {
                GridSize = new Size(5, 1),
                Parent = this,
                GridType = GridType.duihuanbaoshi,
                Linked = true
            };

            Movable = false;
            SetClientSize(new Size(Grid.Size.Width, Grid.Size.Height + 30));
            Grid.Location = ClientArea.Location;

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();


            CostLabel = new DXLabel
            {

            };

            new DXLabel
            {

            };

            DXButton selectAll = new DXButton
            {

            };

            FragmentButton = new DXButton
            {
                Label = { Text = "分解" },
                Location = new Point(77, 82),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(40, SmallButtonHeight),
                Enabled = false,
            };
            FragmentButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                List<CellLinkInfo> links = new List<CellLinkInfo>();

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCduihuanbaoshi { Links = links });
            };
        }

        #region Methods
        private void CalculateCost()
        {
            int sum = 0;

            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {

                if (cell.Link?.Item == null) continue;

                sum += cell.Link.Item.FragmentCost();
                count++;
            }

            CostLabel.ForeColour = sum > MapObject.User.Gold ? Color.Red : Color.White;

            

            FragmentButton.Enabled = sum <= MapObject.User.Gold && count > 0;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (FragmentButton != null)
                {
                    if (!FragmentButton.IsDisposed)
                        FragmentButton.Dispose();

                    FragmentButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCMasterRefineDialog : DXWindow
    {
        #region Properties

        #region RefineType

        public RefineType RefineType
        {
            get => _RefineType;
            set
            {
                if (_RefineType == value) return;

                RefineType oldValue = _RefineType;
                _RefineType = value;

                OnRefineTypeChanged(oldValue, value);
            }
        }
        private RefineType _RefineType;
        public event EventHandler<EventArgs> RefineTypeChanged;
        public void OnRefineTypeChanged(RefineType oValue, RefineType nValue)
        {
            switch (oValue)
            {
                case RefineType.None:
                    SubmitButton.Enabled = true;
                    EvaluateButton.Enabled = true;
                    break;
                case RefineType.DC:
                    DCCheckBox.Checked = false;
                    break;
                case RefineType.SpellPower:
                    SPCheckBox.Checked = false;
                    break;
                case RefineType.Fire:
                    FireCheckBox.Checked = false;
                    break;
                case RefineType.Ice:
                    IceCheckBox.Checked = false;
                    break;
                case RefineType.Lightning:
                    LightningCheckBox.Checked = false;
                    break;
                case RefineType.Wind:
                    WindCheckBox.Checked = false;
                    break;
                case RefineType.Holy:
                    HolyCheckBox.Checked = false;
                    break;
                case RefineType.Dark:
                    DarkCheckBox.Checked = false;
                    break;
                case RefineType.Phantom:
                    PhantomCheckBox.Checked = false;
                    break;
            }

            switch (nValue)
            {
                case RefineType.None:
                    SubmitButton.Enabled = false;
                    EvaluateButton.Enabled = false;
                    break;
                case RefineType.DC:
                    DCCheckBox.Checked = true;
                    break;
                case RefineType.SpellPower:
                    SPCheckBox.Checked = true;
                    break;
                case RefineType.Fire:
                    FireCheckBox.Checked = true;
                    break;
                case RefineType.Ice:
                    IceCheckBox.Checked = true;
                    break;
                case RefineType.Lightning:
                    LightningCheckBox.Checked = true;
                    break;
                case RefineType.Wind:
                    WindCheckBox.Checked = true;
                    break;
                case RefineType.Holy:
                    HolyCheckBox.Checked = true;
                    break;
                case RefineType.Dark:
                    DarkCheckBox.Checked = true;
                    break;
                case RefineType.Phantom:
                    PhantomCheckBox.Checked = true;
                    break;
            }

            RefineTypeChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        public DXItemGrid Fragment1Grid, Fragment2Grid, Fragment3Grid, RefinementStoneGrid, SpecialGrid;

        public DXCheckBox DCCheckBox, SPCheckBox, FireCheckBox, IceCheckBox, LightningCheckBox, WindCheckBox, HolyCheckBox, DarkCheckBox, PhantomCheckBox;
        public DXButton SubmitButton, EvaluateButton;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                Fragment1Grid.ClearLinks();
                Fragment2Grid.ClearLinks();
                Fragment3Grid.ClearLinks();
                RefinementStoneGrid.ClearLinks();
                SpecialGrid.ClearLinks();
            }
        }


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCMasterRefineDialog()
        {
            TitleLabel.Text = "大师精炼";


            SetClientSize(new Size(491, 130));

            DXLabel label = new DXLabel
            {
                Text = "碎片 I",
                Location = ClientArea.Location,
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };

            Fragment1Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.MasterRefineFragment1,
                Linked = true,
                Location = new Point(label.Location.X + 5, label.Location.Y + label.Size.Height + 5)
            };

            label = new DXLabel
            {
                Text = "碎片 II",
                Location = new Point(label.Size.Width + 5 + label.Location.X, label.Location.Y),
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };

            Fragment2Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.MasterRefineFragment2,
                Linked = true,
                Location = new Point(label.Location.X + 5, label.Location.Y + label.Size.Height + 5)
            };

            label = new DXLabel
            {
                Text = "碎片 III",
                Location = new Point(label.Size.Width + 5 + label.Location.X, label.Location.Y),
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };

            Fragment3Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.MasterRefineFragment3,
                Linked = true,
                Location = new Point(label.Location.X + 5, label.Location.Y + label.Size.Height + 5)
            };


            label = new DXLabel
            {
                Text = "精炼石",
                Location = new Point(ClientArea.Location.X, Fragment3Grid.Location.Y + Fragment3Grid.Size.Height + 10),
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };

            RefinementStoneGrid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.MasterRefineStone,
                Linked = true,
                Location = new Point(label.Location.X + 5, label.Location.Y + label.Size.Height + 5)
            };

            label = new DXLabel
            {
                Text = "特别",
                Location = new Point(Fragment3Grid.Location.X - 5, label.Location.Y),
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };

            SpecialGrid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.MasterRefineSpecial,
                Linked = true,
                Location = new Point(label.Location.X + 5, label.Location.Y + label.Size.Height + 5)
            };


            SetClientSize(new Size(491, SpecialGrid.Location.Y + SpecialGrid.Size.Height - ClientArea.Y + 2));

            DCCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "破坏" },
                ReadOnly = true,
            };
            DCCheckBox.MouseClick += (o, e) => RefineType = RefineType.DC;
            SPCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "全系列魔法" },
                ReadOnly = true,
            };
            SPCheckBox.MouseClick += (o, e) => RefineType = RefineType.SpellPower;

            FireCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "火" },
                ReadOnly = true,
            };
            FireCheckBox.MouseClick += (o, e) => RefineType = RefineType.Fire;

            IceCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "冰" },
                ReadOnly = true,
            };
            IceCheckBox.MouseClick += (o, e) => RefineType = RefineType.Ice;

            LightningCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "雷" },
                ReadOnly = true,
            };
            LightningCheckBox.MouseClick += (o, e) => RefineType = RefineType.Lightning;

            WindCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "风" },
                ReadOnly = true,
            };
            WindCheckBox.MouseClick += (o, e) => RefineType = RefineType.Wind;

            HolyCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "神圣" },
                ReadOnly = true,
            };
            HolyCheckBox.MouseClick += (o, e) => RefineType = RefineType.Holy;

            DarkCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "暗黑" },
                ReadOnly = true,
            };
            DarkCheckBox.MouseClick += (o, e) => RefineType = RefineType.Dark;


            PhantomCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "幻影" },
                ReadOnly = true,
            };
            PhantomCheckBox.MouseClick += (o, e) => RefineType = RefineType.Phantom;


            DCCheckBox.Location = new Point(ClientArea.Right - DCCheckBox.Size.Width - 240, ClientArea.Y + 50);
            SPCheckBox.Location = new Point(ClientArea.Right - SPCheckBox.Size.Width - 156, ClientArea.Y + 50);

            FireCheckBox.Location = new Point(ClientArea.Right - FireCheckBox.Size.Width - 240, ClientArea.Y + 73);
            IceCheckBox.Location = new Point(ClientArea.Right - IceCheckBox.Size.Width - 156, ClientArea.Y + 73);
            LightningCheckBox.Location = new Point(ClientArea.Right - LightningCheckBox.Size.Width - 81, ClientArea.Y + 73);
            WindCheckBox.Location = new Point(ClientArea.Right - WindCheckBox.Size.Width - 5, ClientArea.Y + 73);
            HolyCheckBox.Location = new Point(ClientArea.Right - HolyCheckBox.Size.Width - 240, ClientArea.Y + 90);
            DarkCheckBox.Location = new Point(ClientArea.Right - DarkCheckBox.Size.Width - 156, ClientArea.Y + 90);
            PhantomCheckBox.Location = new Point(ClientArea.Right - PhantomCheckBox.Size.Width - 240, ClientArea.Y + 107);

            EvaluateButton = new DXButton
            {
                Label = { Text = "评价" },
                Size = new Size(80, SmallButtonHeight),
                Parent = this,
                ButtonType = ButtonType.SmallButton,
                Enabled = false,
            };
            EvaluateButton.Location = new Point(ClientArea.Right - EvaluateButton.Size.Width, ClientArea.Top + EvaluateButton.Size.Height);
            EvaluateButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                List<CellLinkInfo> frag1 = new List<CellLinkInfo>();
                List<CellLinkInfo> frag2 = new List<CellLinkInfo>();
                List<CellLinkInfo> frag3 = new List<CellLinkInfo>();
                List<CellLinkInfo> stone = new List<CellLinkInfo>();
                List<CellLinkInfo> special = new List<CellLinkInfo>();



                foreach (DXItemCell cell in Fragment1Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    frag1.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });
                }
                foreach (DXItemCell cell in Fragment2Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    frag2.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });
                }
                foreach (DXItemCell cell in Fragment3Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    frag3.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });
                }
                foreach (DXItemCell cell in RefinementStoneGrid.Grid)
                {
                    if (cell.Link == null) continue;

                    stone.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });
                }
                foreach (DXItemCell cell in SpecialGrid.Grid)
                {
                    if (cell.Link == null) continue;

                    special.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });
                }

                if (frag1.Count < 1 || frag1[0].Count != 10)
                {
                    GameScene.Game.ReceiveChat("你需要碎片 (I) x10 交给锻炼大师", MessageType.System);
                    return;
                }

                if (frag2.Count < 1 || frag2[0].Count != 10)
                {
                    GameScene.Game.ReceiveChat("你需要碎片 (II) x10 交给精练大师", MessageType.System);
                    return;
                }

                if (frag3.Count < 1)
                {
                    GameScene.Game.ReceiveChat("s你需要碎片 (III) to 交给精练大师", MessageType.System);
                    return;
                }

                if (stone.Count < 1)
                {
                    GameScene.Game.ReceiveChat("你需要精炼石x1来进行精炼", MessageType.System);
                    return;
                }

                DXMessageBox box = new DXMessageBox("您确定要支付评估费用吗?", "评估", DXMessageBoxButtons.YesNo);

                box.YesButton.MouseClick += (o1, e1) => CEnvir.Enqueue(new C.NPCMasterRefineEvaluate { RefineType = RefineType, Fragment1s = frag1, Fragment2s = frag2, Fragment3s = frag3, Stones = stone, Specials = special });
            };

            label = new DXLabel
            {
                Text = $"Cost: {CartoonGlobals.MasterRefineEvaluateCost:#,##0}",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.Right - label.Size.Width, EvaluateButton.Location.Y + EvaluateButton.Size.Height + 5);

            SubmitButton = new DXButton
            {
                Label = { Text = "提交" },
                Size = new Size(80, SmallButtonHeight),
                Parent = this,
                ButtonType = ButtonType.SmallButton,
                Enabled = false,
            };
            SubmitButton.Location = new Point(ClientArea.Right - SubmitButton.Size.Width, ClientArea.Bottom - SubmitButton.Size.Height);
            SubmitButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                List<CellLinkInfo> frag1 = new List<CellLinkInfo>();
                List<CellLinkInfo> frag2 = new List<CellLinkInfo>();
                List<CellLinkInfo> frag3 = new List<CellLinkInfo>();
                List<CellLinkInfo> stone = new List<CellLinkInfo>();
                List<CellLinkInfo> special = new List<CellLinkInfo>();



                foreach (DXItemCell cell in Fragment1Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    frag1.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }
                foreach (DXItemCell cell in Fragment2Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    frag2.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }
                foreach (DXItemCell cell in Fragment3Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    frag3.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }
                foreach (DXItemCell cell in RefinementStoneGrid.Grid)
                {
                    if (cell.Link == null) continue;

                    stone.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }
                foreach (DXItemCell cell in SpecialGrid.Grid)
                {
                    if (cell.Link == null) continue;

                    special.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                if (frag1.Count < 1 || frag1[0].Count != 10)
                {
                    GameScene.Game.ReceiveChat("你需要碎片(I) x10 来大师精炼", MessageType.System);
                    return;
                }

                if (frag2.Count < 1 || frag2[0].Count != 10)
                {
                    GameScene.Game.ReceiveChat("你需要碎片(II) x10 来大师精炼", MessageType.System);
                    return;
                }

                if (frag3.Count < 1)
                {
                    GameScene.Game.ReceiveChat("你需要碎片(III) x1 来大师精炼", MessageType.System);
                    return;
                }

                if (stone.Count < 1)
                {
                    GameScene.Game.ReceiveChat("你需要精炼石 x1 来大师精炼", MessageType.System);
                    return;
                }

                CEnvir.Enqueue(new C.NPCMasterRefine { RefineType = RefineType, Fragment1s = frag1, Fragment2s = frag2, Fragment3s = frag3, Stones = stone, Specials = special });
            };
        }

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _RefineType = 0;
                RefineTypeChanged = null;

                if (Fragment1Grid != null)
                {
                    if (!Fragment1Grid.IsDisposed)
                        Fragment1Grid.Dispose();

                    Fragment1Grid = null;
                }

                if (Fragment2Grid != null)
                {
                    if (!Fragment2Grid.IsDisposed)
                        Fragment2Grid.Dispose();

                    Fragment2Grid = null;
                }

                if (Fragment3Grid != null)
                {
                    if (!Fragment3Grid.IsDisposed)
                        Fragment3Grid.Dispose();

                    Fragment3Grid = null;
                }

                if (RefinementStoneGrid != null)
                {
                    if (!RefinementStoneGrid.IsDisposed)
                        RefinementStoneGrid.Dispose();

                    RefinementStoneGrid = null;
                }

                if (SpecialGrid != null)
                {
                    if (!SpecialGrid.IsDisposed)
                        SpecialGrid.Dispose();

                    SpecialGrid = null;
                }


                if (DCCheckBox != null)
                {
                    if (!DCCheckBox.IsDisposed)
                        DCCheckBox.Dispose();

                    DCCheckBox = null;
                }

                if (SPCheckBox != null)
                {
                    if (!SPCheckBox.IsDisposed)
                        SPCheckBox.Dispose();

                    SPCheckBox = null;
                }

                if (FireCheckBox != null)
                {
                    if (!FireCheckBox.IsDisposed)
                        FireCheckBox.Dispose();

                    FireCheckBox = null;
                }

                if (IceCheckBox != null)
                {
                    if (!IceCheckBox.IsDisposed)
                        IceCheckBox.Dispose();

                    IceCheckBox = null;
                }

                if (LightningCheckBox != null)
                {
                    if (!LightningCheckBox.IsDisposed)
                        LightningCheckBox.Dispose();

                    LightningCheckBox = null;
                }

                if (WindCheckBox != null)
                {
                    if (!WindCheckBox.IsDisposed)
                        WindCheckBox.Dispose();

                    WindCheckBox = null;
                }

                if (HolyCheckBox != null)
                {
                    if (!HolyCheckBox.IsDisposed)
                        HolyCheckBox.Dispose();

                    HolyCheckBox = null;
                }

                if (DarkCheckBox != null)
                {
                    if (!DarkCheckBox.IsDisposed)
                        DarkCheckBox.Dispose();

                    DarkCheckBox = null;
                }

                if (PhantomCheckBox != null)
                {
                    if (!PhantomCheckBox.IsDisposed)
                        PhantomCheckBox.Dispose();

                    PhantomCheckBox = null;
                }

                if (SubmitButton != null)
                {
                    if (!SubmitButton.IsDisposed)
                        SubmitButton.Dispose();

                    SubmitButton = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCAccessoryUpgradeDialog : DXWindow
    {

        #region Properties

        #region RefineType

        public RefineType RefineType
        {
            get => _RefineType;
            set
            {
                if (_RefineType == value) return;

                RefineType oldValue = _RefineType;
                _RefineType = value;

                OnRefineTypeChanged(oldValue, value);
            }
        }
        private RefineType _RefineType;
        public event EventHandler<EventArgs> RefineTypeChanged;
        public void OnRefineTypeChanged(RefineType oValue, RefineType nValue)
        {
            switch (oValue)
            {
                case RefineType.None:
                    SubmitButton.Enabled = true;
                    break;
                case RefineType.DC:
                    DCCheckBox.Checked = false;
                    break;
                case RefineType.SpellPower:
                    SPCheckBox.Checked = false;
                    break;
                case RefineType.Fire:
                    FireCheckBox.Checked = false;
                    break;
                case RefineType.Ice:
                    IceCheckBox.Checked = false;
                    break;
                case RefineType.Lightning:
                    LightningCheckBox.Checked = false;
                    break;
                case RefineType.Wind:
                    WindCheckBox.Checked = false;
                    break;
                case RefineType.Holy:
                    HolyCheckBox.Checked = false;
                    break;
                case RefineType.Dark:
                    DarkCheckBox.Checked = false;
                    break;
                case RefineType.Phantom:
                    PhantomCheckBox.Checked = false;
                    break;
                case RefineType.Health:
                    HealthCheckBox.Checked = false;
                    break;
                case RefineType.Mana:
                    ManaCheckBox.Checked = false;
                    break;
                case RefineType.AC:
                    ACCheckBox.Checked = false;
                    break;
                case RefineType.MR:
                    MRCheckBox.Checked = false;
                    break;
                case RefineType.Accuracy:
                    AccuracyCheckBox.Checked = false;
                    break;
                case RefineType.Agility:
                    AgilityCheckBox.Checked = false;
                    break;
                case RefineType.HealthPercent:
                    HealthPercentCheckBox.Checked = false;
                    break;
                case RefineType.ManaPercent:
                    ManaPercentCheckBox.Checked = false;
                    break;
                case RefineType.DCPercent:
                    DCPercentCheckBox.Checked = false;
                    break;
                case RefineType.SPPercent:
                    SPPercentCheckBox.Checked = false;
                    break;
            }

            switch (nValue)
            {
                case RefineType.None:
                    SubmitButton.Enabled = false;
                    break;
                case RefineType.DC:
                    DCCheckBox.Checked = true;
                    break;
                case RefineType.SpellPower:
                    SPCheckBox.Checked = true;
                    break;
                case RefineType.Fire:
                    FireCheckBox.Checked = true;
                    break;
                case RefineType.Ice:
                    IceCheckBox.Checked = true;
                    break;
                case RefineType.Lightning:
                    LightningCheckBox.Checked = true;
                    break;
                case RefineType.Wind:
                    WindCheckBox.Checked = true;
                    break;
                case RefineType.Holy:
                    HolyCheckBox.Checked = true;
                    break;
                case RefineType.Dark:
                    DarkCheckBox.Checked = true;
                    break;
                case RefineType.Phantom:
                    PhantomCheckBox.Checked = true;
                    break;
                case RefineType.Health:
                    HealthCheckBox.Checked = true;
                    break;
                case RefineType.Mana:
                    ManaCheckBox.Checked = true;
                    break;
                case RefineType.AC:
                    ACCheckBox.Checked = true;
                    break;
                case RefineType.MR:
                    MRCheckBox.Checked = true;
                    break;
                case RefineType.Accuracy:
                    AccuracyCheckBox.Checked = true;
                    break;
                case RefineType.Agility:
                    AgilityCheckBox.Checked = true;
                    break;
                case RefineType.HealthPercent:
                    HealthPercentCheckBox.Checked = true;
                    break;
                case RefineType.ManaPercent:
                    ManaPercentCheckBox.Checked = true;
                    break;
                case RefineType.DCPercent:
                    DCPercentCheckBox.Checked = true;
                    break;
                case RefineType.SPPercent:
                    SPPercentCheckBox.Checked = true;
                    break;
            }

            RefineTypeChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        public DXItemGrid TargetCell;

        public DXCheckBox DCPercentCheckBox, SPPercentCheckBox, HealthPercentCheckBox, ManaPercentCheckBox,
                          FireCheckBox, IceCheckBox, LightningCheckBox, WindCheckBox, HolyCheckBox, DarkCheckBox, PhantomCheckBox,
                          DCCheckBox, SPCheckBox, HealthCheckBox, ManaCheckBox,
                          ACCheckBox, MRCheckBox, AccuracyCheckBox, AgilityCheckBox;

        public DXButton SubmitButton;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
                TargetCell.ClearLinks();

        }


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCAccessoryUpgradeDialog()
        {
            TitleLabel.Text = "配件升级";

            SetClientSize(new Size(491, 130));
            Movable = false;

            DXLabel label = new DXLabel
            {
                Text = "物品",
                Location = new Point(ClientArea.X + 65, ClientArea.Y + 15),
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.AccessoryRefineUpgradeTarget,
                Linked = true,
                Location = new Point(label.Location.X - 3, label.Location.Y + label.Size.Height + 5)
            };

            DCPercentCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "破坏 1%" },
                ReadOnly = true,
            };
            DCPercentCheckBox.MouseClick += (o, e) => RefineType = RefineType.DCPercent;

            SPPercentCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "全系列魔法 1%" },
                ReadOnly = true,
            };
            SPPercentCheckBox.MouseClick += (o, e) => RefineType = RefineType.SPPercent;

            HealthPercentCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "生命值 1%" },
                ReadOnly = true,
            };
            HealthPercentCheckBox.MouseClick += (o, e) => RefineType = RefineType.HealthPercent;

            ManaPercentCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "魔法值 1%" },
                ReadOnly = true,
            };
            ManaPercentCheckBox.MouseClick += (o, e) => RefineType = RefineType.ManaPercent;

            DCCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "破坏 0-1" },
                ReadOnly = true,
            };
            DCCheckBox.MouseClick += (o, e) => RefineType = RefineType.DC;

            SPCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "全系列魔法 0-1" },
                ReadOnly = true,
            };
            SPCheckBox.MouseClick += (o, e) => RefineType = RefineType.SpellPower;

            FireCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "火 +1" },
                ReadOnly = true,
            };
            FireCheckBox.MouseClick += (o, e) => RefineType = RefineType.Fire;

            IceCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "冰 +1" },
                ReadOnly = true,
            };
            IceCheckBox.MouseClick += (o, e) => RefineType = RefineType.Ice;

            LightningCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "雷 +1" },
                ReadOnly = true,
            };
            LightningCheckBox.MouseClick += (o, e) => RefineType = RefineType.Lightning;

            WindCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "风 +1" },
                ReadOnly = true,
            };
            WindCheckBox.MouseClick += (o, e) => RefineType = RefineType.Wind;

            HolyCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "神圣 +1" },
                ReadOnly = true,
            };
            HolyCheckBox.MouseClick += (o, e) => RefineType = RefineType.Holy;

            DarkCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "暗黑 +1" },
                ReadOnly = true,
            };
            DarkCheckBox.MouseClick += (o, e) => RefineType = RefineType.Dark;

            PhantomCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "幻影 +1" },
                ReadOnly = true,
            };
            PhantomCheckBox.MouseClick += (o, e) => RefineType = RefineType.Phantom;

            HealthCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "生命值 +10" },
                ReadOnly = true,
            };
            HealthCheckBox.MouseClick += (o, e) => RefineType = RefineType.Health;

            ManaCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "魔法值 +10" },
                ReadOnly = true,
            };
            ManaCheckBox.MouseClick += (o, e) => RefineType = RefineType.Mana;

            ACCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "防御 1-1" },
                ReadOnly = true,
            };
            ACCheckBox.MouseClick += (o, e) => RefineType = RefineType.AC;

            MRCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "魔御 1-1" },
                ReadOnly = true,
            };
            MRCheckBox.MouseClick += (o, e) => RefineType = RefineType.MR;

            AccuracyCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "准确 +1" },
                ReadOnly = true,
            };
            AccuracyCheckBox.MouseClick += (o, e) => RefineType = RefineType.Accuracy;

            AgilityCheckBox = new DXCheckBox
            {
                Parent = this,
                Label = { Text = "敏捷 +1" },
                ReadOnly = true,
            };
            AgilityCheckBox.MouseClick += (o, e) => RefineType = RefineType.Agility;

            DCPercentCheckBox.Location = new Point(ClientArea.Right - DCPercentCheckBox.Size.Width - 280, ClientArea.Y + 5);
            SPPercentCheckBox.Location = new Point(ClientArea.Right - SPPercentCheckBox.Size.Width - 186, ClientArea.Y + 5);
            HealthPercentCheckBox.Location = new Point(ClientArea.Right - HealthPercentCheckBox.Size.Width - 101, ClientArea.Y + 5);
            ManaPercentCheckBox.Location = new Point(ClientArea.Right - ManaPercentCheckBox.Size.Width - 15, ClientArea.Y + 5);


            DCCheckBox.Location = new Point(ClientArea.Right - DCCheckBox.Size.Width - 280, ClientArea.Y + 22);
            SPCheckBox.Location = new Point(ClientArea.Right - SPCheckBox.Size.Width - 186, ClientArea.Y + 22);
            HealthCheckBox.Location = new Point(ClientArea.Right - HealthCheckBox.Size.Width - 101, ClientArea.Y + 22);
            ManaCheckBox.Location = new Point(ClientArea.Right - ManaCheckBox.Size.Width - 15, ClientArea.Y + 22);

            ACCheckBox.Location = new Point(ClientArea.Right - ACCheckBox.Size.Width - 280, ClientArea.Y + 39);
            MRCheckBox.Location = new Point(ClientArea.Right - MRCheckBox.Size.Width - 186, ClientArea.Y + 39);
            AccuracyCheckBox.Location = new Point(ClientArea.Right - AccuracyCheckBox.Size.Width - 101, ClientArea.Y + 39);
            AgilityCheckBox.Location = new Point(ClientArea.Right - AgilityCheckBox.Size.Width - 15, ClientArea.Y + 39);


            new DXLabel
            {
                Text = "攻元素",
                Location = new Point(ClientArea.Right - HealthCheckBox.Size.Width - 150, ClientArea.Y + 73),
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };


            FireCheckBox.Location = new Point(ClientArea.Right - FireCheckBox.Size.Width - 280, ClientArea.Y + 90);
            IceCheckBox.Location = new Point(ClientArea.Right - IceCheckBox.Size.Width - 186, ClientArea.Y + 90);
            LightningCheckBox.Location = new Point(ClientArea.Right - LightningCheckBox.Size.Width - 101, ClientArea.Y + 90);
            WindCheckBox.Location = new Point(ClientArea.Right - WindCheckBox.Size.Width - 15, ClientArea.Y + 90);
            HolyCheckBox.Location = new Point(ClientArea.Right - HolyCheckBox.Size.Width - 280, ClientArea.Y + 105);
            DarkCheckBox.Location = new Point(ClientArea.Right - DarkCheckBox.Size.Width - 186, ClientArea.Y + 105);
            PhantomCheckBox.Location = new Point(ClientArea.Right - PhantomCheckBox.Size.Width - 101, ClientArea.Y + 105);


            SubmitButton = new DXButton
            {
                Label = { Text = "提交" },
                Size = new Size(80, SmallButtonHeight),
                Parent = this,
                ButtonType = ButtonType.SmallButton,
                Enabled = false,
            };
            SubmitButton.Location = new Point(ClientArea.Left + 40, ClientArea.Bottom - SubmitButton.Size.Height - 5);
            SubmitButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;
                ;

                DXItemCell cell = TargetCell.Grid[0];

                if (cell.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot };
                cell.Link.Locked = true;
                cell.Link = null;

                CEnvir.Enqueue(new C.NPCAccessoryUpgrade { Target = targetLink, RefineType = RefineType });

            };


        }

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                _RefineType = 0;
                RefineTypeChanged = null;

                if (TargetCell != null)
                {
                    if (!TargetCell.IsDisposed)
                        TargetCell.Dispose();

                    TargetCell = null;
                }


                if (DCCheckBox != null)
                {
                    if (!DCCheckBox.IsDisposed)
                        DCCheckBox.Dispose();

                    DCCheckBox = null;
                }

                if (SPCheckBox != null)
                {
                    if (!SPCheckBox.IsDisposed)
                        SPCheckBox.Dispose();

                    SPCheckBox = null;
                }

                if (FireCheckBox != null)
                {
                    if (!FireCheckBox.IsDisposed)
                        FireCheckBox.Dispose();

                    FireCheckBox = null;
                }

                if (IceCheckBox != null)
                {
                    if (!IceCheckBox.IsDisposed)
                        IceCheckBox.Dispose();

                    IceCheckBox = null;
                }

                if (LightningCheckBox != null)
                {
                    if (!LightningCheckBox.IsDisposed)
                        LightningCheckBox.Dispose();

                    LightningCheckBox = null;
                }

                if (WindCheckBox != null)
                {
                    if (!WindCheckBox.IsDisposed)
                        WindCheckBox.Dispose();

                    WindCheckBox = null;
                }

                if (HolyCheckBox != null)
                {
                    if (!HolyCheckBox.IsDisposed)
                        HolyCheckBox.Dispose();

                    HolyCheckBox = null;
                }

                if (DarkCheckBox != null)
                {
                    if (!DarkCheckBox.IsDisposed)
                        DarkCheckBox.Dispose();

                    DarkCheckBox = null;
                }

                if (PhantomCheckBox != null)
                {
                    if (!PhantomCheckBox.IsDisposed)
                        PhantomCheckBox.Dispose();

                    PhantomCheckBox = null;
                }

                if (SubmitButton != null)
                {
                    if (!SubmitButton.IsDisposed)
                        SubmitButton.Dispose();

                    SubmitButton = null;
                }

                if (HealthCheckBox != null)
                {
                    if (!HealthCheckBox.IsDisposed)
                        HealthCheckBox.Dispose();

                    HealthCheckBox = null;
                }

                if (ManaCheckBox != null)
                {
                    if (!ManaCheckBox.IsDisposed)
                        ManaCheckBox.Dispose();

                    ManaCheckBox = null;
                }

                if (ACCheckBox != null)
                {
                    if (!ACCheckBox.IsDisposed)
                        ACCheckBox.Dispose();

                    ACCheckBox = null;
                }

                if (MRCheckBox != null)
                {
                    if (!MRCheckBox.IsDisposed)
                        MRCheckBox.Dispose();

                    MRCheckBox = null;
                }

                if (AccuracyCheckBox != null)
                {
                    if (!AccuracyCheckBox.IsDisposed)
                        AccuracyCheckBox.Dispose();

                    AccuracyCheckBox = null;
                }

                if (AgilityCheckBox != null)
                {
                    if (!AgilityCheckBox.IsDisposed)
                        AgilityCheckBox.Dispose();

                    AgilityCheckBox = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCAccessoryLevelDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCAccessoryLevelDialog()
        {
            TitleLabel.Text = "附件代练";

            Grid = new DXItemGrid
            {
                GridSize = new Size(7, 3),
                Parent = this,
                GridType = GridType.AccessoryRefineLevelItems,
                Linked = true
            };

            Movable = false;
            SetClientSize(new Size(Grid.Size.Width, Grid.Size.Height + 110));
            Grid.Location = new Point(ClientArea.X, ClientArea.Y + 60);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            DXLabel label = new DXLabel
            {
                Text = "附件",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + (ClientArea.Width - label.Size.Width) / 2, ClientArea.Y);

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.AccessoryRefineLevelTarget,
                Linked = true,
            };
            TargetCell.Location = new Point(label.Location.X + (label.Size.Width - TargetCell.Size.Width) / 2, label.Location.Y + label.Size.Height + 5);

            CostLabel = new DXLabel
            {
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp
            };

            new DXLabel
            {
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter | TextFormatFlags.HorizontalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "代练成本:",
                Size = new Size(79, 20),
                IsControl = false,
            };

            DXButton selectAll = new DXButton
            {
                Label = { Text = "全选" },
                Location = new Point(ClientArea.X, CostLabel.Location.Y + CostLabel.Size.Height + 5),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(79, SmallButtonHeight)
            };
            selectAll.MouseClick += (o, e) =>
            {
                foreach (DXItemCell cell in GameScene.Game.InventoryBox.Grid.Grid)
                {
                    if (!cell.CheckLink(Grid)) continue;

                    cell.MoveItem(Grid, true);
                }
            };

            LevelUpButton = new DXButton
            {
                Label = { Text = "升级" },
                Location = new Point(ClientArea.Right - 80, CostLabel.Location.Y + CostLabel.Size.Height + 5),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(79, SmallButtonHeight),
                Enabled = false,
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCAccessoryLevelUp { Target = targetLink, Links = links });
            };
        }

        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            CostLabel.Text = count.ToString("#,##0");

            LevelUpButton.Enabled = count > 0;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    
    public sealed class NPCDunUpgradeDialog : DXWindow
    {

        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton FYLevelUpButton, MYLevelUpButton, SMLevelUpButton, MFLevelUpButton;
        public DXLabel CostLabel;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCDunUpgradeDialog()
        {
            TitleLabel.Text = "盾牌升级";
            CloseButton.Visible = false;

            DXLabel label = new DXLabel
            {
                Text = "蓝色珠子",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + 40, ClientArea.Y + 80);

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.DunRefineUpgradeItems,
                Linked = true,
            };

            Movable = false;
            SetClientSize(new Size(Grid.Size.Width + 100, Grid.Size.Height + 170));
            Grid.Location = new Point(ClientArea.X + 50, ClientArea.Y + 100);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            label = new DXLabel
            {
                Text = "盾牌",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + (ClientArea.Width - label.Size.Width) / 2, ClientArea.Y);


            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.DunRefineUpgradeTarget,
                Linked = true,
            };
            TargetCell.Location = new Point(label.Location.X + (label.Size.Width - TargetCell.Size.Width) / 2, label.Location.Y + label.Size.Height + 5);

            CostLabel = new DXLabel
            {
            };

            new DXLabel
            {
            };

            FYLevelUpButton = new DXButton
            {
                Label = { Text = "炼防御" },
                Location = new Point(ClientArea.X, Grid.Location.Y + Grid.Size.Height + 20),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(59, SmallButtonHeight),
                Enabled = false,
            };
            FYLevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCDunUpgradeFY { Target = targetLink, Links = links });
            };

            MYLevelUpButton = new DXButton
            {
                Label = { Text = "炼魔御" },
                Location = new Point(ClientArea.X + 75, Grid.Location.Y + Grid.Size.Height + 20),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(59, SmallButtonHeight),
                Enabled = false,
            };
            MYLevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCDunUpgradeMY { Target = targetLink, Links = links });
            };

            SMLevelUpButton = new DXButton
            {
                Label = { Text = "炼生命" },
                Location = new Point(ClientArea.X, Grid.Location.Y + Grid.Size.Height + 50),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(59, SmallButtonHeight),
                Enabled = false,
            };
            SMLevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCDunUpgradeSM { Target = targetLink, Links = links });
            };

            MFLevelUpButton = new DXButton
            {
                Label = { Text = "炼魔法" },
                Location = new Point(ClientArea.X + 75, Grid.Location.Y + Grid.Size.Height + 50),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(59, SmallButtonHeight),
                Enabled = false,
            };
            MFLevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCDunUpgradeMF { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            FYLevelUpButton.Enabled = count == 1;
            MYLevelUpButton.Enabled = count == 1;
            SMLevelUpButton.Enabled = count == 1;
            MFLevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (TargetCell != null)
                {
                    if (!TargetCell.IsDisposed)
                        TargetCell.Dispose();

                    TargetCell = null;
                }

                if (FYLevelUpButton != null)
                {
                    if (!FYLevelUpButton.IsDisposed)
                        FYLevelUpButton.Dispose();

                    FYLevelUpButton = null;
                }

                if (MYLevelUpButton != null)
                {
                    if (!MYLevelUpButton.IsDisposed)
                        MYLevelUpButton.Dispose();

                    MYLevelUpButton = null;
                }

                if (SMLevelUpButton != null)
                {
                    if (!SMLevelUpButton.IsDisposed)
                        SMLevelUpButton.Dispose();

                    SMLevelUpButton = null;
                }

                if (MFLevelUpButton != null)
                {
                    if (!MFLevelUpButton.IsDisposed)
                        MFLevelUpButton.Dispose();

                    MFLevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    
    public sealed class NPCDunLevelDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCDunLevelDialog()
        {
            TitleLabel.Text = "盾牌熔炼";
            CloseButton.Visible = false;

            DXLabel label = new DXLabel
            {
                Text = "蓝色石头",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + 40, ClientArea.Y + 80);


            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.DunRefineLevelItems,
                Linked = true
            };

            Movable = false;
            SetClientSize(new Size(Grid.Size.Width + 100, Grid.Size.Height + 160));
            Grid.Location = new Point(ClientArea.X + 50, ClientArea.Y + 100);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            label = new DXLabel
            {
                Text = "盾牌",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + (ClientArea.Width - label.Size.Width) / 2, ClientArea.Y);

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.DunRefineLevelTarget,
                Linked = true,
            };
            TargetCell.Location = new Point(label.Location.X + (label.Size.Width - TargetCell.Size.Width) / 2, label.Location.Y + label.Size.Height + 5);

            CostLabel = new DXLabel
            {
            };

            new DXLabel
            {
            };

            DXButton selectAll = new DXButton
            {
            };
            selectAll.MouseClick += (o, e) =>
            {
                foreach (DXItemCell cell in GameScene.Game.InventoryBox.Grid.Grid)
                {
                    if (!cell.CheckLink(Grid)) continue;

                    cell.MoveItem(Grid, true);
                }
            };

            LevelUpButton = new DXButton
            {
                Label = { Text = "升级" },
                Location = new Point(Grid.Location.X - 20, Grid.Location.Y + Grid.Size.Height + 20),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(79, SmallButtonHeight),
                Enabled = false,
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCDunLevelUp { Target = targetLink, Links = links });
            };
        }

        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            CostLabel.Text = count.ToString("#,##0");

            LevelUpButton.Enabled = count > 0;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (TargetCell != null)
                {
                    if (!TargetCell.IsDisposed)
                        TargetCell.Dispose();

                    TargetCell = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    
    public sealed class NPCHuiUpgradeDialog : DXWindow
    {

        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton FYLevelUpButton, MYLevelUpButton, SMLevelUpButton, MFLevelUpButton;
        public DXLabel CostLabel;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCHuiUpgradeDialog()
        {
            TitleLabel.Text = "徽章升级";
            CloseButton.Visible = false;

            DXLabel label = new DXLabel
            {
                Text = "红色珠子",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + 40, ClientArea.Y + 80);

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.HuiRefineUpgradeItems,
                Linked = true,
            };

            Movable = false;
            SetClientSize(new Size(Grid.Size.Width + 100, Grid.Size.Height + 170));
            Grid.Location = new Point(ClientArea.X + 50, ClientArea.Y + 100);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            label = new DXLabel
            {
                Text = "徽章",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + (ClientArea.Width - label.Size.Width) / 2, ClientArea.Y);


            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.HuiRefineUpgradeTarget,
                Linked = true,
            };
            TargetCell.Location = new Point(label.Location.X + (label.Size.Width - TargetCell.Size.Width) / 2, label.Location.Y + label.Size.Height + 5);

            CostLabel = new DXLabel
            {
            };

            new DXLabel
            {
            };

            FYLevelUpButton = new DXButton
            {
                Label = { Text = "炼攻击" },
                Location = new Point(ClientArea.X, Grid.Location.Y + Grid.Size.Height + 20),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(59, SmallButtonHeight),
                Enabled = false,
            };
            FYLevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCHuiUpgradeGJ { Target = targetLink, Links = links });
            };

            MYLevelUpButton = new DXButton
            {
                Label = { Text = "炼自然" },
                Location = new Point(ClientArea.X + 75, Grid.Location.Y + Grid.Size.Height + 20),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(59, SmallButtonHeight),
                Enabled = false,
            };
            MYLevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCHuiUpgradeZR { Target = targetLink, Links = links });
            };

            SMLevelUpButton = new DXButton
            {
                Label = { Text = "炼灵魂" },
                Location = new Point(ClientArea.X, Grid.Location.Y + Grid.Size.Height + 50),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(59, SmallButtonHeight),
                Enabled = false,
            };
            SMLevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCHuiUpgradeLH { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            FYLevelUpButton.Enabled = count == 1;
            MYLevelUpButton.Enabled = count == 1;
            SMLevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (TargetCell != null)
                {
                    if (!TargetCell.IsDisposed)
                        TargetCell.Dispose();

                    TargetCell = null;
                }

                if (FYLevelUpButton != null)
                {
                    if (!FYLevelUpButton.IsDisposed)
                        FYLevelUpButton.Dispose();

                    FYLevelUpButton = null;
                }

                if (MYLevelUpButton != null)
                {
                    if (!MYLevelUpButton.IsDisposed)
                        MYLevelUpButton.Dispose();

                    MYLevelUpButton = null;
                }


                if (SMLevelUpButton != null)
                {
                    if (!SMLevelUpButton.IsDisposed)
                        SMLevelUpButton.Dispose();

                    SMLevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    
    public sealed class NPCHuiLevelDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCHuiLevelDialog()
        {
            TitleLabel.Text = "徽章熔炼";
            CloseButton.Visible = false;

            DXLabel label = new DXLabel
            {
                Text = "红色石头",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + 40, ClientArea.Y + 80);

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.HuiRefineLevelItems,
                Linked = true
            };

            Movable = false;
            SetClientSize(new Size(Grid.Size.Width + 100, Grid.Size.Height + 160));
            Grid.Location = new Point(ClientArea.X + 50, ClientArea.Y + 100);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            label = new DXLabel
            {
                Text = "徽章",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + (ClientArea.Width - label.Size.Width) / 2, ClientArea.Y);

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.HuiRefineLevelTarget,
                Linked = true,
            };
            TargetCell.Location = new Point(label.Location.X + (label.Size.Width - TargetCell.Size.Width) / 2, label.Location.Y + label.Size.Height + 5);

            CostLabel = new DXLabel
            {
            };

            new DXLabel
            {
            };

            DXButton selectAll = new DXButton
            {
            };
            selectAll.MouseClick += (o, e) =>
            {
                foreach (DXItemCell cell in GameScene.Game.InventoryBox.Grid.Grid)
                {
                    if (!cell.CheckLink(Grid)) continue;

                    cell.MoveItem(Grid, true);
                }
            };

            LevelUpButton = new DXButton
            {
                Label = { Text = "升级" },
                Location = new Point(Grid.Location.X - 20, Grid.Location.Y + Grid.Size.Height + 20),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(79, SmallButtonHeight),
                Enabled = false,
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCHuiLevelUp { Target = targetLink, Links = links });
            };
        }

        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            CostLabel.Text = count.ToString("#,##0");

            LevelUpButton.Enabled = count > 0;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (TargetCell != null)
                {
                    if (!TargetCell.IsDisposed)
                        TargetCell.Dispose();

                    TargetCell = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    
    public sealed class NPCMingwenDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel, LvLabel;
        public DXImageControl Image, MingwenImageYi, MingwenImageEr, MingwenImageSan, MingwenBar;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                Grid.ClearLinks();
                TargetCell.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCMingwenDialog()
        {
            TitleLabel.Text = "铭文系统";

            SetClientSize(new Size(277, 306));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5702;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.MingwenItems,
                Linked = true,
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 177, ClientArea.Y + 18);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.Mingwen,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + 67, ClientArea.Y + 18);
            foreach (DXItemCell cell in TargetCell.Grid)
                cell.LinkChanged += (o, e) => CalculateCosts();

            CostLabel = new DXLabel
            {
                Parent = this,
                Text = "需要金币：10,000",
                ForeColour = Color.Beige,
            };
            CostLabel.Location = new Point(30, 279);

            LvLabel = new DXLabel
            {
                Parent = this,
                Text = "0",
                ForeColour = Color.Beige,
            };
            LvLabel.Location = new Point(173, 279);

            MingwenBar = new DXImageControl
            {
                Parent = this,
                LibraryFile = LibraryFile.GameInter,
                Index = 4309,
            };
            MingwenBar.Location = new Point(156, 277);
            MingwenBar.AfterDraw += (o, e) =>
            {
                if (MingwenBar.Library == null) return;

                if (TargetCell.Grid[0].Item == null || TargetCell.Grid[0].Item.MingwenLv >= CartoonGlobals.MingwenExperienceList.Count) return;

                decimal MaxMingwenExperience = CartoonGlobals.MingwenExperienceList[TargetCell.Grid[0].Item.MingwenLv];

                if (MaxMingwenExperience == 0) return;

                
                MirImage image = MingwenBar.Library.CreateImage(5703, ImageType.Image);

                if (image == null) return;

                int x = (MingwenBar.Size.Width - image.Width) / 2;
                int y = (MingwenBar.Size.Height - image.Height) / 2;


                float percent = (float)Math.Min(1, Math.Max(0, TargetCell.Grid[0].Item.MingwenExp / MaxMingwenExperience));

                if (percent == 0) return;



                PresentTexture(image.Image, this, new Rectangle(MingwenBar.DisplayArea.X + x, MingwenBar.DisplayArea.Y + y - 1, (int)(image.Width * percent), image.Height), Color.White, MingwenBar);
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(109, 303),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];


                if (target.Link == null)
                {
                    GameScene.Game.ReceiveChat("洗练的武器没有放位置", MessageType.System);
                    return;
                }

                if (MapObject.User.Gold < CartoonGlobals.MingwenFeiyong)
                {
                    GameScene.Game.ReceiveChat("金币不够", MessageType.System);
                    return;
                }

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    if (cell.Link?.Item.Count < 2)
                    {
                        cell.Link.Locked = true;
                        cell.Link = null;
                    }
                }

                CEnvir.Enqueue(new C.NPCMingwenUp { Target = targetLink, Links = links });

                MingwenImageYi = new DXImageControl
                {
                    LibraryFile = LibraryFile.GameInter,
                    Index = 5690,
                    Parent = this,
                    Location = new Point(30, 137),
                };
                MingwenImageEr = new DXImageControl
                {
                    LibraryFile = LibraryFile.GameInter,
                    Index = 5691,
                    Parent = this,
                    Location = new Point(30, 180),
                };
                MingwenImageSan = new DXImageControl
                {
                    LibraryFile = LibraryFile.GameInter,
                    Index = 5692,
                    Parent = this,
                    Location = new Point(30, 224),
                };
            };
        }


        #region Methods
        private void CalculateCosts()
        {
            foreach (DXItemCell cell in TargetCell.Grid)
            {
                
                if (cell.Link?.Item != null)
                {
                    LvLabel.Text = $"{cell.Link?.Item.MingwenLv}";

                    if (cell.Link?.Item.MingwenLv < 3)
                        MingwenBar.Hint = $"　　{TargetCell.Grid[0].Item.MingwenExp} / {CartoonGlobals.MingwenExperienceList[TargetCell.Grid[0].Item.MingwenLv]}";
                    else
                        MingwenBar.Hint = $"　　已经满位";

                    
                    if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.ShenRuoYinY) == MingwenMaYi.ShenRuoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1744,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.ShenShuYinY) == MingwenMaYi.ShenShuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1743,

                            Parent = this,
                            Location = new Point(30, 137),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.ShenBaoYinY) == MingwenMaYi.ShenBaoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1745,

                            Parent = this,
                            Location = new Point(30, 137),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.MiaoShouYinY) == MingwenMaYi.MiaoShouYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1746,

                            Parent = this,
                            Location = new Point(30, 137),

                        };



                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.LingJiYinY) == MingwenMaYi.LingJiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1747,

                            Parent = this,
                            Location = new Point(30, 137),

                        };



                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.DaoFaYinY) == MingwenMaYi.DaoFaYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1748,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.LingBaoYinY) == MingwenMaYi.LingBaoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1749,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.LingBoYinY) == MingwenMaEr.LingBoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1750,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.LingFengYinY) == MingwenMaEr.LingFengYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1751,

                            Parent = this,
                            Location = new Point(30, 137),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.LingYunYinY) == MingwenMaEr.LingYunYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1752,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.LingQuYinY) == MingwenMaEr.LingQuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1753,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.HuosheYinY) == MingwenMaEr.HuosheYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1754,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.QunsheYinY) == MingwenMaEr.QunsheYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1738,

                            Parent = this,
                            Location = new Point(30, 137),

                        };



                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.TansheYinY) == MingwenMaEr.TansheYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1755,

                            Parent = this,
                            Location = new Point(30, 137),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.LingkongYinY) == MingwenMaEr.LingkongYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1756,

                            Parent = this,
                            Location = new Point(30, 137),

                        };



                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.FuzhenYinY) == MingwenMaEr.FuzhenYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1757,

                            Parent = this,
                            Location = new Point(30, 137),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.YulongYinY) == MingwenMaEr.YulongYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1758,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.LongwangYinY) == MingwenMaSan.LongwangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1759,

                            Parent = this,
                            Location = new Point(30, 137),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.JunwangYinY) == MingwenMaSan.JunwangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1760,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.ToutianYinY) == MingwenMaSan.ToutianYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1761,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.JialanYinY) == MingwenMaSan.JialanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1762,

                            Parent = this,
                            Location = new Point(30, 137),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.KongxiangYinY) == MingwenMaSan.KongxiangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1763,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.LiuxingYinY) == MingwenMaSan.LiuxingYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1764,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.LingxieYinY) == MingwenMaSan.LingxieYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1765,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.LingbaoYinY) == MingwenMaSan.LingbaoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1766,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.YouqiangYinY) == MingwenMaSan.YouqiangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1767,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.YingjiYinY) == MingwenMaSi.YingjiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1768,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.JizhongYinY) == MingwenMaSi.JizhongYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1769,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.DusheYinY) == MingwenMaSi.DusheYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1770,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.ShesheYinY) == MingwenMaSi.ShesheYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1771,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.QiangsheYinY) == MingwenMaSi.QiangsheYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1739,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.HunkongYinY) == MingwenMaSi.HunkongYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1772,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.HunzhenYinY) == MingwenMaSi.HunzhenYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1773,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.NingdanYinY) == MingwenMaSi.NingdanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1774,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.NingbaoYinY) == MingwenMaSi.NingbaoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1775,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.NingxiaoYinY) == MingwenMaSi.NingxiaoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1776,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.XiezhouYinY) == MingwenMaWu.XiezhouYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1777,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.ZhengzhouYinY) == MingwenMaWu.ZhengzhouYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1778,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.KongquanYinY) == MingwenMaWu.KongquanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1779,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.QuanbaYinY) == MingwenMaWu.QuanbaYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1780,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.QuanjiYinY) == MingwenMaWu.QuanjiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1781,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.QiangfaYinY) == MingwenMaWu.QiangfaYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1782,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.QiangbaoYinY) == MingwenMaWu.QiangbaoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1783,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.LingshouYinY) == MingwenMaWu.LingshouYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1784,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.XueshouYinY) == MingwenMaWu.XueshouYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1785,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.ShengshouYinY) == MingwenMaLiu.ShengshouYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1786,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.YaoguangYinY) == MingwenMaLiu.YaoguangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1787,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.ChaojunwangYinY) == MingwenMaLiu.ChaojunwangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1788,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.ChaotoutianYinY) == MingwenMaLiu.ChaotoutianYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1789,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.ChaojialanYinY) == MingwenMaLiu.ChaojialanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1790,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.MengshiYinY) == MingwenMaLiu.MengshiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1791,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.QiangshiYinY) == MingwenMaLiu.QiangshiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1792,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.BaohuYinY) == MingwenMaLiu.BaohuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1793,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.DaozunYinY) == MingwenMaLiu.DaozunYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1794,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.JiesuYinY) == MingwenMaLiu.JiesuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1795,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.LunhuiYinY) == MingwenMaQi.LunhuiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1796,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.ZongbaoYinY) == MingwenMaQi.ZongbaoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1797,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.SusheYinY) == MingwenMaQi.SusheYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1798,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.BaosheYinY) == MingwenMaQi.BaosheYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1799,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.MiehunYinY) == MingwenMaQi.MiehunYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1800,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.MiezhenYinY) == MingwenMaQi.MiezhenYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1801,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.HongyueYinY) == MingwenMaQi.HongyueYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1802,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.HuoyanYinY) == MingwenMaQi.HuoyanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1803,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.ZhenqiangYinY) == MingwenMaQi.ZhenqiangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1804,

                            Parent = this,
                            Location = new Point(30, 137),

                        };



                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.XiongzhaoYinY) == MingwenMaQi.XiongzhaoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1805,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaBa & MingwenMaBa.HuoyuanYinY) == MingwenMaBa.HuoyuanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1806,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaBa & MingwenMaBa.SumingYinY) == MingwenMaBa.SumingYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1807,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaBa & MingwenMaBa.SheshouYinY) == MingwenMaBa.SheshouYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1808,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaBa & MingwenMaBa.ChuansheYinY) == MingwenMaBa.ChuansheYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1809,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.MiaoyinYinY) == MingwenMaWu.MiaoyinYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1810,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.GongsheYinY) == MingwenMaSan.GongsheYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1811,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.YunjiYinY) == MingwenMaShiba.YunjiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1812,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.XixueYinY) == MingwenMaShiba.XixueYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1813,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.FahuanYinY) == MingwenMaShiba.FahuanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1814,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.YinxueYinY) == MingwenMaShiba.YinxueYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1815,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.XixingYinY) == MingwenMaShiba.XixingYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1816,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.XueyinYinY) == MingwenMaShiba.XueyinYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1817,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.ZhouyuYinY) == MingwenMaShiba.ZhouyuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1818,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.DiyuYinY) == MingwenMaShiba.DiyuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1819,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaBa & MingwenMaBa.HuoliYinY) == MingwenMaBa.HuoliYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1820,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.HuotuiYinY) == MingwenMaJiu.HuotuiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1829,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.HuoqiuYinY) == MingwenMaJiu.HuoqiuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1830,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.ChaofanYinY) == MingwenMaJiu.ChaofanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1831,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.YiduanYinY) == MingwenMaJiu.YiduanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1832,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.BingxueYinY) == MingwenMaJiu.BingxueYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1833,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.BingqiangYinY) == MingwenMaJiu.BingqiangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1834,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.YanhuaYinY) == MingwenMaJiu.YanhuaYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1836,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.HuohuanYinY) == MingwenMaJiu.HuohuanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1837,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.JunshiYinY) == MingwenMaJiu.JunshiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1838,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.MoyuYinY) == MingwenMaJiu.MoyuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1839,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.MoyanYinY) == MingwenMaShi.MoyanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1840,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.XueqiYinY) == MingwenMaShi.XueqiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1841,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.YidongYinY) == MingwenMaShi.YidongYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1842,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.YisuYinY) == MingwenMaShiba.YisuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2319,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.XunjieYinY) == MingwenMaShi.XunjieYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1843,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.DuoluoYinY) == MingwenMaShi.DuoluoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1844,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.ChumeiYinY) == MingwenMaShi.ChumeiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1845,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.TianfaYinY) == MingwenMaShi.TianfaYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1846,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.TiannuYinY) == MingwenMaShi.TiannuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1847,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.BumieYinY) == MingwenMaShi.BumieYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1848,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.HuguangYinY) == MingwenMaShi.HuguangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1849,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.JingmoYinY) == MingwenMaShiyi.JingmoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1850,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.YanlongYinY) == MingwenMaShiyi.YanlongYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1851,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.LeishenYinY) == MingwenMaShiyi.LeishenYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1852,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.LeizhuYinY) == MingwenMaShiyi.LeizhuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1853,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.LeizhouYinY) == MingwenMaShiyi.LeizhouYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1854,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.BingdaoYinY) == MingwenMaShiyi.BingdaoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1855,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.BingshuangYinY) == MingwenMaShiyi.BingshuangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1856,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.FengboYinY) == MingwenMaShiyi.FengboYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1857,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.ShanfengYinY) == MingwenMaShiyi.ShanfengYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1858,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.GuanhuoYinY) == MingwenMaShiyi.GuanhuoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1859,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.ZhenhongYinY) == MingwenMaShier.ZhenhongYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1860,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.ShenglingYinY) == MingwenMaShier.ShenglingYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1861,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.MizhouYinY) == MingwenMaShier.MizhouYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1862,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.YixingYinY) == MingwenMaShier.YixingYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1863,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.TianshouYinY) == MingwenMaShier.TianshouYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1864,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.ShuangguYinY) == MingwenMaShier.ShuangguYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1865,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.FengshengYinY) == MingwenMaShier.FengshengYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1866,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.JihuoYinY) == MingwenMaShier.JihuoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1867,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.LeilongYinY) == MingwenMaShier.LeilongYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1868,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.LongxingYinY) == MingwenMaShier.LongxingYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2300,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.LonghunYinY) == MingwenMaShisan.LonghunYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2301,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.YantianYinY) == MingwenMaShiba.YantianYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2302,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.QunhuoYinY) == MingwenMaShijiu.QunhuoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2303,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.BaohuoYinY) == MingwenMaShijiu.BaohuoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2304,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.ShengrenYinY) == MingwenMaShijiu.ShengrenYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2305,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.NuhuoYinY) == MingwenMaShijiu.NuhuoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2306,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.BingciYinY) == MingwenMaShijiu.BingciYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2307,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.BinghuaYinY) == MingwenMaShijiu.BinghuaYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2308,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.BingshenYinY) == MingwenMaShijiu.BingshenYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2309,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.BinghuanYinY) == MingwenMaShijiu.BinghuanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2310,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.PiliYinY) == MingwenMaShijiu.PiliYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2311,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.ZhengyiYinY) == MingwenMaShijiu.ZhengyiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2312,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.FanjiYinY) == MingwenMaErshi.FanjiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2313,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.MingzhongYinY) == MingwenMaErshi.MingzhongYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2314,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.FengbaoYinY) == MingwenMaErshi.FengbaoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2315,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.BaofengYinY) == MingwenMaErshi.BaofengYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2316,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.BenghuaiYinY) == MingwenMaErshi.BenghuaiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2317,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.FengnuYinY) == MingwenMaErshi.FengnuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2318,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.XuanfengYinY) == MingwenMaShisan.XuanfengYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2320,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.ZhuzaiYinY) == MingwenMaShisan.ZhuzaiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2321,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.YousuYinY) == MingwenMaShisan.YousuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2322,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.YazhiYinY) == MingwenMaShisan.YazhiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2323,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.YinguangYinY) == MingwenMaShisan.YinguangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2324,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.BaojunYinY) == MingwenMaShisan.BaojunYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2325,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.XueshaYinY) == MingwenMaShisan.XueshaYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2326,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.HuanglongYinY) == MingwenMaShisan.HuanglongYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2327,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.YaoguangYinY) == MingwenMaShisan.YaoguangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2328,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.PoshanYinY) == MingwenMaShisi.PoshanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2329,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.YuehuaYinY) == MingwenMaShisi.YuehuaYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2330,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.GuanyueYinY) == MingwenMaShisi.GuanyueYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2331,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.JiyueYinY) == MingwenMaShisi.JiyueYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2332,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.LiefengYinY) == MingwenMaShisi.LiefengYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2333,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.JvhuoYinY) == MingwenMaShisi.JvhuoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2334,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.JibuYinY) == MingwenMaShisi.JibuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2335,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.ChongzhuangYinY) == MingwenMaShisi.ChongzhuangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2336,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.YeyongYinY) == MingwenMaShisi.YeyongYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2337,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.ZhanyueYinY) == MingwenMaShisi.ZhanyueYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2338,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.DuohuoYinY) == MingwenMaShiwu.DuohuoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2339,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.RanshaoYinY) == MingwenMaShiwu.RanshaoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2340,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.KaijiangYinY) == MingwenMaShiwu.KaijiangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2341,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.ShenquYinY) == MingwenMaShiwu.ShenquYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2342,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.ShenglongYinY) == MingwenMaShiwu.ShenglongYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2343,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.ZengqiangYinY) == MingwenMaShiwu.ZengqiangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2346,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.QiangdaYinY) == MingwenMaShiwu.QiangdaYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2347,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.DaofaYinY) == MingwenMaShiwu.DaofaYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2348,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.KuaidaoYinY) == MingwenMaShiwu.KuaidaoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2349,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.BadaoYinY) == MingwenMaShiwu.BadaoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2350,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.ChuiziYinY) == MingwenMaShiliu.ChuiziYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2351,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.ZhanchuiYinY) == MingwenMaShiliu.ZhanchuiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2352,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.TianshenYinY) == MingwenMaShiliu.TianshenYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2353,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.JianzhuangYinY) == MingwenMaShiliu.JianzhuangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2354,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.TiebuYinY) == MingwenMaShiliu.TiebuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2355,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.NuoyiYinY) == MingwenMaShiliu.NuoyiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2356,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.DouzhuanYinY) == MingwenMaShiliu.DouzhuanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2357,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.PoxueYinY) == MingwenMaShiliu.PoxueYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2358,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.KuangmoYinY) == MingwenMaShiliu.KuangmoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2359,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.JingangYinY) == MingwenMaShiliu.JingangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2360,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.SumingYinY) == MingwenMaShiqi.SumingYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2361,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.JingweiYinY) == MingwenMaShiqi.JingweiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2362,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.HuishengYinY) == MingwenMaShiqi.HuishengYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2363,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.XinyanYinY) == MingwenMaShiqi.XinyanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2364,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.XukongYinY) == MingwenMaShiqi.XukongYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2365,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.ShoulieYinY) == MingwenMaShiqi.ShoulieYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2366,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.TiaoheYinY) == MingwenMaShiqi.TiaoheYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2367,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.LianminYinY) == MingwenMaShiqi.LianminYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2368,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.LianyueYinY) == MingwenMaShiqi.LianyueYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2344,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.WushuangYinY) == MingwenMaShiqi.WushuangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2345,

                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.ChangshengYinY) == MingwenMaErshi.ChangshengYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2401,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.DuocuiYinY) == MingwenMaErshi.DuocuiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2402,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.YinniYinY) == MingwenMaErshi.YinniYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2403,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.TanlanYinY) == MingwenMaErshi.TanlanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2404,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.LingshanYinY) == MingwenMaErshiyi.LingshanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2405,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.JvnhengYinY) == MingwenMaErshiyi.JvnhengYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2406,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.MingxinagYinY) == MingwenMaErshiyi.MingxinagYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2407,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.FenzhengYinY) == MingwenMaErshiyi.FenzhengYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2408,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.YibianYinY) == MingwenMaErshiyi.YibianYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2409,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.YexingYinY) == MingwenMaErshiyi.YexingYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2410,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.QiannengYinY) == MingwenMaErshiyi.QiannengYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2411,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.QinshiYinY) == MingwenMaErshiyi.QinshiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2412,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.XianjiYinY) == MingwenMaErshiyi.XianjiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2413,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.ZengwuYinY) == MingwenMaErshiyi.ZengwuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2414,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.BihuYinY) == MingwenMaErshier.BihuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2415,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.QixiYinY) == MingwenMaErshier.QixiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2416,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.WuweiYinY) == MingwenMaErshier.WuweiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2417,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.TiequYinY) == MingwenMaErshier.TiequYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2418,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.ZishengYinY) == MingwenMaErshier.ZishengYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2419,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.TunshiYinY) == MingwenMaErshier.TunshiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2420,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.JijiuYinY) == MingwenMaErshier.JijiuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2421,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.KexueYinY) == MingwenMaErshier.KexueYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2422,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.FusuYinY) == MingwenMaErshier.FusuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2423,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.ChanaYinY) == MingwenMaErshier.ChanaYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2424,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.ChengjieYinY) == MingwenMaErshisan.ChengjieYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2425,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.QishuYinY) == MingwenMaErshisan.QishuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2426,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.KuangreYinY) == MingwenMaErshisan.KuangreYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2427,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.YangyanYinY) == MingwenMaErshisan.YangyanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2428,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.JielvYinY) == MingwenMaErshisan.JielvYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2429,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.JingjiYinY) == MingwenMaErshisan.JingjiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2430,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.BaoliYinY) == MingwenMaErshisan.BaoliYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2431,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.ShuaibaiYinY) == MingwenMaErshisan.ShuaibaiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2432,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.TujinYinY) == MingwenMaErshisan.TujinYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2433,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.ShougeYinY) == MingwenMaErshisan.ShougeYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2434,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.PomoYinY) == MingwenMaErshisi.PomoYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2435,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.GuanchuanYinY) == MingwenMaErshisi.GuanchuanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2436,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.ZhanfangYinY) == MingwenMaErshisi.ZhanfangYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2437,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.ShensuYinY) == MingwenMaErshisi.ShensuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2438,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.GanyingYinY) == MingwenMaErshisi.GanyingYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2439,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.QiangjianYinY) == MingwenMaErshisi.QiangjianYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2440,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.ZhuanhuanYinY) == MingwenMaErshisi.ZhuanhuanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2441,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.YishanYinY) == MingwenMaErshisi.YishanYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2442,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.ZhenfenYinY) == MingwenMaErshisi.ZhenfenYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2443,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.XinnianYinY) == MingwenMaErshisi.XinnianYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2444,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.ZhengjiuYinY) == MingwenMaErshiwu.ZhengjiuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2445,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.ZhimingYinY) == MingwenMaErshiwu.ZhimingYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2446,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.DongchaYinY) == MingwenMaErshiwu.DongchaYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2447,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.PojiaYinY) == MingwenMaErshiwu.PojiaYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2448,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.JiantaYinY) == MingwenMaErshiwu.JiantaYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2449,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.ZhenjiYinY) == MingwenMaErshiwu.ZhenjiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2450,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.GangyiYinY) == MingwenMaErshiwu.GangyiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2451,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.TongkuYinY) == MingwenMaErshiwu.TongkuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2452,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.YuheYinY) == MingwenMaErshiwu.YuheYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2453,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.JianbiYinY) == MingwenMaErshiwu.JianbiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2454,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiliu & MingwenMaErshiliu.ZhuanzhuYinY) == MingwenMaErshiliu.ZhuanzhuYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2455,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiliu & MingwenMaErshiliu.YingjiYinY) == MingwenMaErshiliu.YingjiYinY)
                    {
                        
                        MingwenImageYi = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2456,
                            Parent = this,
                            Location = new Point(30, 137),

                        };

                    }


                    
                    if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.ShenRuoYinE) == MingwenMaYi.ShenRuoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1744,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.ShenShuYinE) == MingwenMaYi.ShenShuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1743,

                            Parent = this,
                            Location = new Point(30, 180),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.ShenBaoYinE) == MingwenMaYi.ShenBaoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1745,

                            Parent = this,
                            Location = new Point(30, 180),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.MiaoShouYinE) == MingwenMaYi.MiaoShouYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1746,

                            Parent = this,
                            Location = new Point(30, 180),

                        };



                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.LingJiYinE) == MingwenMaYi.LingJiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1747,

                            Parent = this,
                            Location = new Point(30, 180),

                        };



                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.DaoFaYinE) == MingwenMaYi.DaoFaYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1748,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.LingBaoYinE) == MingwenMaYi.LingBaoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1749,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.LingBoYinE) == MingwenMaEr.LingBoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1750,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.LingFengYinE) == MingwenMaEr.LingFengYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1751,

                            Parent = this,
                            Location = new Point(30, 180),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.LingYunYinE) == MingwenMaEr.LingYunYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1752,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.LingQuYinE) == MingwenMaEr.LingQuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1753,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.HuosheYinE) == MingwenMaEr.HuosheYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1754,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.QunsheYinE) == MingwenMaEr.QunsheYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1738,

                            Parent = this,
                            Location = new Point(30, 180),

                        };



                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.TansheYinE) == MingwenMaEr.TansheYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1755,

                            Parent = this,
                            Location = new Point(30, 180),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.LingkongYinE) == MingwenMaEr.LingkongYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1756,

                            Parent = this,
                            Location = new Point(30, 180),

                        };



                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.FuzhenYinE) == MingwenMaEr.FuzhenYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1757,

                            Parent = this,
                            Location = new Point(30, 180),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.YulongYinE) == MingwenMaEr.YulongYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1758,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.LongwangYinE) == MingwenMaSan.LongwangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1759,

                            Parent = this,
                            Location = new Point(30, 180),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.JunwangYinE) == MingwenMaSan.JunwangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1760,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.ToutianYinE) == MingwenMaSan.ToutianYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1761,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.JialanYinE) == MingwenMaSan.JialanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1762,

                            Parent = this,
                            Location = new Point(30, 180),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.KongxiangYinE) == MingwenMaSan.KongxiangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1763,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.LiuxingYinE) == MingwenMaSan.LiuxingYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1764,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.LingxieYinE) == MingwenMaSan.LingxieYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1765,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.LingbaoYinE) == MingwenMaSan.LingbaoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1766,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.YouqiangYinE) == MingwenMaSan.YouqiangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1767,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.YingjiYinE) == MingwenMaSi.YingjiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1768,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.JizhongYinE) == MingwenMaSi.JizhongYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1769,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.DusheYinE) == MingwenMaSi.DusheYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1770,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.ShesheYinE) == MingwenMaSi.ShesheYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1771,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.QiangsheYinE) == MingwenMaSi.QiangsheYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1739,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.HunkongYinE) == MingwenMaSi.HunkongYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1772,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.HunzhenYinE) == MingwenMaSi.HunzhenYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1773,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.NingdanYinE) == MingwenMaSi.NingdanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1774,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.NingbaoYinE) == MingwenMaSi.NingbaoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1775,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.NingxiaoYinE) == MingwenMaSi.NingxiaoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1776,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.XiezhouYinE) == MingwenMaWu.XiezhouYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1777,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.ZhengzhouYinE) == MingwenMaWu.ZhengzhouYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1778,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.KongquanYinE) == MingwenMaWu.KongquanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1779,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.QuanbaYinE) == MingwenMaWu.QuanbaYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1780,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.QuanjiYinE) == MingwenMaWu.QuanjiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1781,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.QiangfaYinE) == MingwenMaWu.QiangfaYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1782,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.QiangbaoYinE) == MingwenMaWu.QiangbaoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1783,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.LingshouYinE) == MingwenMaWu.LingshouYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1784,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.XueshouYinE) == MingwenMaWu.XueshouYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1785,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.ShengshouYinE) == MingwenMaLiu.ShengshouYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1786,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.YaoguangYinE) == MingwenMaLiu.YaoguangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1787,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.ChaojunwangYinE) == MingwenMaLiu.ChaojunwangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1788,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.ChaotoutianYinE) == MingwenMaLiu.ChaotoutianYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1789,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.ChaojialanYinE) == MingwenMaLiu.ChaojialanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1790,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.MengshiYinE) == MingwenMaLiu.MengshiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1791,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.QiangshiYinE) == MingwenMaLiu.QiangshiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1792,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.BaohuYinE) == MingwenMaLiu.BaohuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1793,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.DaozunYinE) == MingwenMaLiu.DaozunYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1794,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.JiesuYinE) == MingwenMaLiu.JiesuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1795,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.LunhuiYinE) == MingwenMaQi.LunhuiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1796,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.ZongbaoYinE) == MingwenMaQi.ZongbaoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1797,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.SusheYinE) == MingwenMaQi.SusheYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1798,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.BaosheYinE) == MingwenMaQi.BaosheYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1799,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.MiehunYinE) == MingwenMaQi.MiehunYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1800,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.MiezhenYinE) == MingwenMaQi.MiezhenYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1801,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.HongyueYinE) == MingwenMaQi.HongyueYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1802,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.HuoyanYinE) == MingwenMaQi.HuoyanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1803,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.ZhenqiangYinE) == MingwenMaQi.ZhenqiangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1804,

                            Parent = this,
                            Location = new Point(30, 180),

                        };



                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.XiongzhaoYinE) == MingwenMaQi.XiongzhaoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1805,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaBa & MingwenMaBa.HuoyuanYinE) == MingwenMaBa.HuoyuanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1806,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaBa & MingwenMaBa.SumingYinE) == MingwenMaBa.SumingYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1807,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaBa & MingwenMaBa.SheshouYinE) == MingwenMaBa.SheshouYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1808,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaBa & MingwenMaBa.ChuansheYinE) == MingwenMaBa.ChuansheYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1809,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.MiaoyinYinE) == MingwenMaWu.MiaoyinYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1810,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.GongsheYinE) == MingwenMaSan.GongsheYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1811,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.YunjiYinE) == MingwenMaShiba.YunjiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1812,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.XixueYinE) == MingwenMaShiba.XixueYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1813,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.FahuanYinE) == MingwenMaShiba.FahuanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1814,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.YinxueYinE) == MingwenMaShiba.YinxueYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1815,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.XixingYinE) == MingwenMaShiba.XixingYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1816,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.XueyinYinE) == MingwenMaShiba.XueyinYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1817,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.ZhouyuYinE) == MingwenMaShiba.ZhouyuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1818,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.DiyuYinE) == MingwenMaShiba.DiyuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1819,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaBa & MingwenMaBa.HuoliYinE) == MingwenMaBa.HuoliYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1820,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.HuotuiYinE) == MingwenMaJiu.HuotuiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1829,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.HuoqiuYinE) == MingwenMaJiu.HuoqiuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1830,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.ChaofanYinE) == MingwenMaJiu.ChaofanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1831,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.YiduanYinE) == MingwenMaJiu.YiduanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1832,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.BingxueYinE) == MingwenMaJiu.BingxueYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1833,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.BingqiangYinE) == MingwenMaJiu.BingqiangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1834,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.YanhuaYinE) == MingwenMaJiu.YanhuaYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1836,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.HuohuanYinE) == MingwenMaJiu.HuohuanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1837,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.JunshiYinE) == MingwenMaJiu.JunshiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1838,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.MoyuYinE) == MingwenMaJiu.MoyuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1839,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.MoyanYinE) == MingwenMaShi.MoyanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1840,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.XueqiYinE) == MingwenMaShi.XueqiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1841,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.YidongYinE) == MingwenMaShi.YidongYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1842,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.YisuYinE) == MingwenMaShiba.YisuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2319,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.XunjieYinE) == MingwenMaShi.XunjieYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1843,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.DuoluoYinE) == MingwenMaShi.DuoluoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1844,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.ChumeiYinE) == MingwenMaShi.ChumeiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1845,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.TianfaYinE) == MingwenMaShi.TianfaYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1846,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.TiannuYinE) == MingwenMaShi.TiannuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1847,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.BumieYinE) == MingwenMaShi.BumieYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1848,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.HuguangYinE) == MingwenMaShi.HuguangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1849,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.JingmoYinE) == MingwenMaShiyi.JingmoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1850,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.YanlongYinE) == MingwenMaShiyi.YanlongYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1851,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.LeishenYinE) == MingwenMaShiyi.LeishenYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1852,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.LeizhuYinE) == MingwenMaShiyi.LeizhuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1853,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.LeizhouYinE) == MingwenMaShiyi.LeizhouYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1854,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.BingdaoYinE) == MingwenMaShiyi.BingdaoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1855,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.BingshuangYinE) == MingwenMaShiyi.BingshuangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1856,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.FengboYinE) == MingwenMaShiyi.FengboYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1857,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.ShanfengYinE) == MingwenMaShiyi.ShanfengYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1858,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.GuanhuoYinE) == MingwenMaShiyi.GuanhuoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1859,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.ZhenhongYinE) == MingwenMaShier.ZhenhongYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1860,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.ShenglingYinE) == MingwenMaShier.ShenglingYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1861,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.MizhouYinE) == MingwenMaShier.MizhouYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1862,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.YixingYinE) == MingwenMaShier.YixingYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1863,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.TianshouYinE) == MingwenMaShier.TianshouYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1864,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.ShuangguYinE) == MingwenMaShier.ShuangguYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1865,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.FengshengYinE) == MingwenMaShier.FengshengYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1866,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.JihuoYinE) == MingwenMaShier.JihuoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1867,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.LeilongYinE) == MingwenMaShier.LeilongYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1868,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.LongxingYinE) == MingwenMaShier.LongxingYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2300,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.LonghunYinE) == MingwenMaShisan.LonghunYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2301,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.YantianYinE) == MingwenMaShiba.YantianYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2302,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.QunhuoYinE) == MingwenMaShijiu.QunhuoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2303,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.BaohuoYinE) == MingwenMaShijiu.BaohuoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2304,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.ShengrenYinE) == MingwenMaShijiu.ShengrenYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2305,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.NuhuoYinE) == MingwenMaShijiu.NuhuoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2306,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.BingciYinE) == MingwenMaShijiu.BingciYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2307,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.BinghuaYinE) == MingwenMaShijiu.BinghuaYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2308,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.BingshenYinE) == MingwenMaShijiu.BingshenYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2309,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.BinghuanYinE) == MingwenMaShijiu.BinghuanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2310,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.PiliYinE) == MingwenMaShijiu.PiliYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2311,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.ZhengyiYinE) == MingwenMaShijiu.ZhengyiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2312,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.FanjiYinE) == MingwenMaErshi.FanjiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2313,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.MingzhongYinE) == MingwenMaErshi.MingzhongYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2314,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.FengbaoYinE) == MingwenMaErshi.FengbaoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2315,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.BaofengYinE) == MingwenMaErshi.BaofengYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2316,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.BenghuaiYinE) == MingwenMaErshi.BenghuaiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2317,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.FengnuYinE) == MingwenMaErshi.FengnuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2318,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.XuanfengYinE) == MingwenMaShisan.XuanfengYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2320,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.ZhuzaiYinE) == MingwenMaShisan.ZhuzaiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2321,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.YousuYinE) == MingwenMaShisan.YousuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2322,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.YazhiYinE) == MingwenMaShisan.YazhiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2323,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.YinguangYinE) == MingwenMaShisan.YinguangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2324,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.BaojunYinE) == MingwenMaShisan.BaojunYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2325,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.XueshaYinE) == MingwenMaShisan.XueshaYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2326,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.HuanglongYinE) == MingwenMaShisan.HuanglongYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2327,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.YaoguangYinE) == MingwenMaShisan.YaoguangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2328,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.PoshanYinE) == MingwenMaShisi.PoshanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2329,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.YuehuaYinE) == MingwenMaShisi.YuehuaYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2330,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.GuanyueYinE) == MingwenMaShisi.GuanyueYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2331,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.JiyueYinE) == MingwenMaShisi.JiyueYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2332,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.LiefengYinE) == MingwenMaShisi.LiefengYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2333,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.JvhuoYinE) == MingwenMaShisi.JvhuoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2334,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.JibuYinE) == MingwenMaShisi.JibuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2335,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.ChongzhuangYinE) == MingwenMaShisi.ChongzhuangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2336,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.YeyongYinE) == MingwenMaShisi.YeyongYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2337,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.ZhanyueYinE) == MingwenMaShisi.ZhanyueYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2338,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.DuohuoYinE) == MingwenMaShiwu.DuohuoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2339,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.RanshaoYinE) == MingwenMaShiwu.RanshaoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2340,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.KaijiangYinE) == MingwenMaShiwu.KaijiangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2341,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.ShenquYinE) == MingwenMaShiwu.ShenquYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2342,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.ShenglongYinE) == MingwenMaShiwu.ShenglongYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2343,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.ZengqiangYinE) == MingwenMaShiwu.ZengqiangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2346,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.QiangdaYinE) == MingwenMaShiwu.QiangdaYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2347,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.DaofaYinE) == MingwenMaShiwu.DaofaYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2348,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.KuaidaoYinE) == MingwenMaShiwu.KuaidaoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2349,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.BadaoYinE) == MingwenMaShiwu.BadaoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2350,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.ChuiziYinE) == MingwenMaShiliu.ChuiziYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2351,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.ZhanchuiYinE) == MingwenMaShiliu.ZhanchuiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2352,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.TianshenYinE) == MingwenMaShiliu.TianshenYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2353,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.JianzhuangYinE) == MingwenMaShiliu.JianzhuangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2354,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.TiebuYinE) == MingwenMaShiliu.TiebuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2355,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.NuoyiYinE) == MingwenMaShiliu.NuoyiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2356,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.DouzhuanYinE) == MingwenMaShiliu.DouzhuanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2357,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.PoxueYinE) == MingwenMaShiliu.PoxueYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2358,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.KuangmoYinE) == MingwenMaShiliu.KuangmoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2359,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.JingangYinE) == MingwenMaShiliu.JingangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2360,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.SumingYinE) == MingwenMaShiqi.SumingYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2361,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.JingweiYinE) == MingwenMaShiqi.JingweiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2362,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.HuishengYinE) == MingwenMaShiqi.HuishengYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2363,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.XinyanYinE) == MingwenMaShiqi.XinyanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2364,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.XukongYinE) == MingwenMaShiqi.XukongYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2365,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.ShoulieYinE) == MingwenMaShiqi.ShoulieYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2366,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.TiaoheYinE) == MingwenMaShiqi.TiaoheYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2367,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.LianminYinE) == MingwenMaShiqi.LianminYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2368,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.LianyueYinE) == MingwenMaShiqi.LianyueYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2344,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.WushuangYinE) == MingwenMaShiqi.WushuangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2345,

                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.ChangshengYinE) == MingwenMaErshi.ChangshengYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2401,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.DuocuiYinE) == MingwenMaErshi.DuocuiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2402,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.YinniYinE) == MingwenMaErshi.YinniYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2403,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.TanlanYinE) == MingwenMaErshi.TanlanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2404,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.LingshanYinE) == MingwenMaErshiyi.LingshanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2405,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.JvnhengYinE) == MingwenMaErshiyi.JvnhengYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2406,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.MingxinagYinE) == MingwenMaErshiyi.MingxinagYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2407,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.FenzhengYinE) == MingwenMaErshiyi.FenzhengYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2408,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.YibianYinE) == MingwenMaErshiyi.YibianYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2409,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.YexingYinE) == MingwenMaErshiyi.YexingYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2410,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.QiannengYinE) == MingwenMaErshiyi.QiannengYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2411,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.QinshiYinE) == MingwenMaErshiyi.QinshiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2412,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.XianjiYinE) == MingwenMaErshiyi.XianjiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2413,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.ZengwuYinE) == MingwenMaErshiyi.ZengwuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2414,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.BihuYinE) == MingwenMaErshier.BihuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2415,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.QixiYinE) == MingwenMaErshier.QixiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2416,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.WuweiYinE) == MingwenMaErshier.WuweiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2417,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.TiequYinE) == MingwenMaErshier.TiequYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2418,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.ZishengYinE) == MingwenMaErshier.ZishengYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2419,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.TunshiYinE) == MingwenMaErshier.TunshiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2420,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.JijiuYinE) == MingwenMaErshier.JijiuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2421,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.KexueYinE) == MingwenMaErshier.KexueYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2422,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.FusuYinE) == MingwenMaErshier.FusuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2423,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.ChanaYinE) == MingwenMaErshier.ChanaYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2424,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.ChengjieYinE) == MingwenMaErshisan.ChengjieYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2425,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.QishuYinE) == MingwenMaErshisan.QishuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2426,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.KuangreYinE) == MingwenMaErshisan.KuangreYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2427,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.YangyanYinE) == MingwenMaErshisan.YangyanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2428,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.JielvYinE) == MingwenMaErshisan.JielvYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2429,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.JingjiYinE) == MingwenMaErshisan.JingjiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2430,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.BaoliYinE) == MingwenMaErshisan.BaoliYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2431,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.ShuaibaiYinE) == MingwenMaErshisan.ShuaibaiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2432,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.TujinYinE) == MingwenMaErshisan.TujinYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2433,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.ShougeYinE) == MingwenMaErshisan.ShougeYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2434,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.PomoYinE) == MingwenMaErshisi.PomoYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2435,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.GuanchuanYinE) == MingwenMaErshisi.GuanchuanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2436,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.ZhanfangYinE) == MingwenMaErshisi.ZhanfangYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2437,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.ShensuYinE) == MingwenMaErshisi.ShensuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2438,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.GanyingYinE) == MingwenMaErshisi.GanyingYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2439,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.QiangjianYinE) == MingwenMaErshisi.QiangjianYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2440,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.ZhuanhuanYinE) == MingwenMaErshisi.ZhuanhuanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2441,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.YishanYinE) == MingwenMaErshisi.YishanYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2442,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.ZhenfenYinE) == MingwenMaErshisi.ZhenfenYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2443,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.XinnianYinE) == MingwenMaErshisi.XinnianYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2444,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.ZhengjiuYinE) == MingwenMaErshiwu.ZhengjiuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2445,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.ZhimingYinE) == MingwenMaErshiwu.ZhimingYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2446,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.DongchaYinE) == MingwenMaErshiwu.DongchaYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2447,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.PojiaYinE) == MingwenMaErshiwu.PojiaYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2448,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.JiantaYinE) == MingwenMaErshiwu.JiantaYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2449,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.ZhenjiYinE) == MingwenMaErshiwu.ZhenjiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2450,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.GangyiYinE) == MingwenMaErshiwu.GangyiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2451,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.TongkuYinE) == MingwenMaErshiwu.TongkuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2452,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.YuheYinE) == MingwenMaErshiwu.YuheYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2453,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.JianbiYinE) == MingwenMaErshiwu.JianbiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2454,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiliu & MingwenMaErshiliu.ZhuanzhuYinE) == MingwenMaErshiliu.ZhuanzhuYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2455,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiliu & MingwenMaErshiliu.YingjiYinE) == MingwenMaErshiliu.YingjiYinE)
                    {
                        
                        MingwenImageEr = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2456,
                            Parent = this,
                            Location = new Point(30, 180),

                        };

                    }


                    
                    if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.ShenRuoYinS) == MingwenMaYi.ShenRuoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1744,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.ShenShuYinS) == MingwenMaYi.ShenShuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1743,

                            Parent = this,
                            Location = new Point(30, 224),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.ShenBaoYinS) == MingwenMaYi.ShenBaoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1745,

                            Parent = this,
                            Location = new Point(30, 224),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.MiaoShouYinS) == MingwenMaYi.MiaoShouYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1746,

                            Parent = this,
                            Location = new Point(30, 224),

                        };



                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.LingJiYinS) == MingwenMaYi.LingJiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1747,

                            Parent = this,
                            Location = new Point(30, 224),

                        };



                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.DaoFaYinS) == MingwenMaYi.DaoFaYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1748,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaYi & MingwenMaYi.LingBaoYinS) == MingwenMaYi.LingBaoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1749,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.LingBoYinS) == MingwenMaEr.LingBoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1750,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.LingFengYinS) == MingwenMaEr.LingFengYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1751,

                            Parent = this,
                            Location = new Point(30, 224),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.LingYunYinS) == MingwenMaEr.LingYunYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1752,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.LingQuYinS) == MingwenMaEr.LingQuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1753,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.HuosheYinS) == MingwenMaEr.HuosheYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1754,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.QunsheYinS) == MingwenMaEr.QunsheYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1738,

                            Parent = this,
                            Location = new Point(30, 224),

                        };



                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.TansheYinS) == MingwenMaEr.TansheYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1755,

                            Parent = this,
                            Location = new Point(30, 224),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.LingkongYinS) == MingwenMaEr.LingkongYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1756,

                            Parent = this,
                            Location = new Point(30, 224),

                        };



                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.FuzhenYinS) == MingwenMaEr.FuzhenYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1757,

                            Parent = this,
                            Location = new Point(30, 224),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaEr & MingwenMaEr.YulongYinS) == MingwenMaEr.YulongYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1758,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.LongwangYinS) == MingwenMaSan.LongwangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1759,

                            Parent = this,
                            Location = new Point(30, 224),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.JunwangYinS) == MingwenMaSan.JunwangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1760,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.ToutianYinS) == MingwenMaSan.ToutianYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1761,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.JialanYinS) == MingwenMaSan.JialanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1762,

                            Parent = this,
                            Location = new Point(30, 224),

                        };


                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.KongxiangYinS) == MingwenMaSan.KongxiangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1763,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.LiuxingYinS) == MingwenMaSan.LiuxingYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1764,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.LingxieYinS) == MingwenMaSan.LingxieYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1765,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.LingbaoYinS) == MingwenMaSan.LingbaoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1766,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.YouqiangYinS) == MingwenMaSan.YouqiangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1767,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.YingjiYinS) == MingwenMaSi.YingjiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1768,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.JizhongYinS) == MingwenMaSi.JizhongYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1769,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.DusheYinS) == MingwenMaSi.DusheYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1770,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.ShesheYinS) == MingwenMaSi.ShesheYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1771,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.QiangsheYinS) == MingwenMaSi.QiangsheYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1739,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.HunkongYinS) == MingwenMaSi.HunkongYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1772,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.HunzhenYinS) == MingwenMaSi.HunzhenYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1773,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.NingdanYinS) == MingwenMaSi.NingdanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1774,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.NingbaoYinS) == MingwenMaSi.NingbaoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1775,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSi & MingwenMaSi.NingxiaoYinS) == MingwenMaSi.NingxiaoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1776,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.XiezhouYinS) == MingwenMaWu.XiezhouYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1777,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.ZhengzhouYinS) == MingwenMaWu.ZhengzhouYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1778,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.KongquanYinS) == MingwenMaWu.KongquanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1779,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.QuanbaYinS) == MingwenMaWu.QuanbaYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1780,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.QuanjiYinS) == MingwenMaWu.QuanjiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1781,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.QiangfaYinS) == MingwenMaWu.QiangfaYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1782,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.QiangbaoYinS) == MingwenMaWu.QiangbaoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1783,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.LingshouYinS) == MingwenMaWu.LingshouYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1784,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.XueshouYinS) == MingwenMaWu.XueshouYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1785,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.ShengshouYinS) == MingwenMaLiu.ShengshouYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1786,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.YaoguangYinS) == MingwenMaLiu.YaoguangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1787,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.ChaojunwangYinS) == MingwenMaLiu.ChaojunwangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1788,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.ChaotoutianYinS) == MingwenMaLiu.ChaotoutianYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1789,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.ChaojialanYinS) == MingwenMaLiu.ChaojialanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1790,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.MengshiYinS) == MingwenMaLiu.MengshiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1791,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.QiangshiYinS) == MingwenMaLiu.QiangshiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1792,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.BaohuYinS) == MingwenMaLiu.BaohuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1793,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.DaozunYinS) == MingwenMaLiu.DaozunYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1794,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaLiu & MingwenMaLiu.JiesuYinS) == MingwenMaLiu.JiesuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1795,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.LunhuiYinS) == MingwenMaQi.LunhuiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1796,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.ZongbaoYinS) == MingwenMaQi.ZongbaoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1797,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.SusheYinS) == MingwenMaQi.SusheYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1798,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.BaosheYinS) == MingwenMaQi.BaosheYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1799,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.MiehunYinS) == MingwenMaQi.MiehunYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1800,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.MiezhenYinS) == MingwenMaQi.MiezhenYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1801,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.HongyueYinS) == MingwenMaQi.HongyueYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1802,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.HuoyanYinS) == MingwenMaQi.HuoyanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1803,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.ZhenqiangYinS) == MingwenMaQi.ZhenqiangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1804,

                            Parent = this,
                            Location = new Point(30, 224),

                        };



                    }
                    else if ((cell.Link?.Item.MingwenMaQi & MingwenMaQi.XiongzhaoYinS) == MingwenMaQi.XiongzhaoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1805,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaBa & MingwenMaBa.HuoyuanYinS) == MingwenMaBa.HuoyuanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1806,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaBa & MingwenMaBa.SumingYinS) == MingwenMaBa.SumingYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1807,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaBa & MingwenMaBa.SheshouYinS) == MingwenMaBa.SheshouYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1808,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaBa & MingwenMaBa.ChuansheYinS) == MingwenMaBa.ChuansheYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1809,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaWu & MingwenMaWu.MiaoyinYinS) == MingwenMaWu.MiaoyinYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1810,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaSan & MingwenMaSan.GongsheYinS) == MingwenMaSan.GongsheYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1811,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.YunjiYinS) == MingwenMaShiba.YunjiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1812,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.XixueYinS) == MingwenMaShiba.XixueYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1813,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.FahuanYinS) == MingwenMaShiba.FahuanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1814,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.YinxueYinS) == MingwenMaShiba.YinxueYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1815,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.XixingYinS) == MingwenMaShiba.XixingYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1816,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.XueyinYinS) == MingwenMaShiba.XueyinYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1817,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.ZhouyuYinS) == MingwenMaShiba.ZhouyuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1818,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.DiyuYinS) == MingwenMaShiba.DiyuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1819,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaBa & MingwenMaBa.HuoliYinS) == MingwenMaBa.HuoliYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1820,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.HuotuiYinS) == MingwenMaJiu.HuotuiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1829,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.HuoqiuYinS) == MingwenMaJiu.HuoqiuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1830,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.ChaofanYinS) == MingwenMaJiu.ChaofanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1831,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.YiduanYinS) == MingwenMaJiu.YiduanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1832,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.BingxueYinS) == MingwenMaJiu.BingxueYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1833,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.BingqiangYinS) == MingwenMaJiu.BingqiangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1834,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.YanhuaYinS) == MingwenMaJiu.YanhuaYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1836,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.HuohuanYinS) == MingwenMaJiu.HuohuanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1837,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.JunshiYinS) == MingwenMaJiu.JunshiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1838,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaJiu & MingwenMaJiu.MoyuYinS) == MingwenMaJiu.MoyuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1839,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.MoyanYinS) == MingwenMaShi.MoyanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1840,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.XueqiYinS) == MingwenMaShi.XueqiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1841,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.YidongYinS) == MingwenMaShi.YidongYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1842,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.YisuYinS) == MingwenMaShiba.YisuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2319,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.XunjieYinS) == MingwenMaShi.XunjieYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1843,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.DuoluoYinS) == MingwenMaShi.DuoluoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1844,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.ChumeiYinS) == MingwenMaShi.ChumeiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1845,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.TianfaYinS) == MingwenMaShi.TianfaYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1846,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.TiannuYinS) == MingwenMaShi.TiannuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1847,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.BumieYinS) == MingwenMaShi.BumieYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1848,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShi & MingwenMaShi.HuguangYinS) == MingwenMaShi.HuguangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1849,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.JingmoYinS) == MingwenMaShiyi.JingmoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1850,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.YanlongYinS) == MingwenMaShiyi.YanlongYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1851,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.LeishenYinS) == MingwenMaShiyi.LeishenYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1852,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.LeizhuYinS) == MingwenMaShiyi.LeizhuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1853,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.LeizhouYinS) == MingwenMaShiyi.LeizhouYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1854,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.BingdaoYinS) == MingwenMaShiyi.BingdaoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1855,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.BingshuangYinS) == MingwenMaShiyi.BingshuangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1856,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.FengboYinS) == MingwenMaShiyi.FengboYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1857,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.ShanfengYinS) == MingwenMaShiyi.ShanfengYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1858,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiyi & MingwenMaShiyi.GuanhuoYinS) == MingwenMaShiyi.GuanhuoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1859,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.ZhenhongYinS) == MingwenMaShier.ZhenhongYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1860,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.ShenglingYinS) == MingwenMaShier.ShenglingYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1861,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.MizhouYinS) == MingwenMaShier.MizhouYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1862,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.YixingYinS) == MingwenMaShier.YixingYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1863,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.TianshouYinS) == MingwenMaShier.TianshouYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1864,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.ShuangguYinS) == MingwenMaShier.ShuangguYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1865,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.FengshengYinS) == MingwenMaShier.FengshengYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1866,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.JihuoYinS) == MingwenMaShier.JihuoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1867,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.LeilongYinS) == MingwenMaShier.LeilongYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 1868,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShier & MingwenMaShier.LongxingYinS) == MingwenMaShier.LongxingYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2300,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.LonghunYinS) == MingwenMaShisan.LonghunYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2301,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiba & MingwenMaShiba.YantianYinS) == MingwenMaShiba.YantianYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2302,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.QunhuoYinS) == MingwenMaShijiu.QunhuoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2303,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.BaohuoYinS) == MingwenMaShijiu.BaohuoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2304,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.ShengrenYinS) == MingwenMaShijiu.ShengrenYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2305,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.NuhuoYinS) == MingwenMaShijiu.NuhuoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2306,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.BingciYinS) == MingwenMaShijiu.BingciYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2307,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.BinghuaYinS) == MingwenMaShijiu.BinghuaYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2308,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.BingshenYinS) == MingwenMaShijiu.BingshenYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2309,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.BinghuanYinS) == MingwenMaShijiu.BinghuanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2310,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.PiliYinS) == MingwenMaShijiu.PiliYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2311,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShijiu & MingwenMaShijiu.ZhengyiYinS) == MingwenMaShijiu.ZhengyiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2312,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.FanjiYinS) == MingwenMaErshi.FanjiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2313,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.MingzhongYinS) == MingwenMaErshi.MingzhongYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2314,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.FengbaoYinS) == MingwenMaErshi.FengbaoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2315,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.BaofengYinS) == MingwenMaErshi.BaofengYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2316,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.BenghuaiYinS) == MingwenMaErshi.BenghuaiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2317,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.FengnuYinS) == MingwenMaErshi.FengnuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2318,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.XuanfengYinS) == MingwenMaShisan.XuanfengYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2320,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.ZhuzaiYinS) == MingwenMaShisan.ZhuzaiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2321,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.YousuYinS) == MingwenMaShisan.YousuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2322,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.YazhiYinS) == MingwenMaShisan.YazhiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2323,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.YinguangYinS) == MingwenMaShisan.YinguangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2324,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.BaojunYinS) == MingwenMaShisan.BaojunYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2325,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.XueshaYinS) == MingwenMaShisan.XueshaYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2326,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.HuanglongYinS) == MingwenMaShisan.HuanglongYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2327,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisan & MingwenMaShisan.YaoguangYinS) == MingwenMaShisan.YaoguangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2328,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.PoshanYinS) == MingwenMaShisi.PoshanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2329,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.YuehuaYinS) == MingwenMaShisi.YuehuaYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2330,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.GuanyueYinS) == MingwenMaShisi.GuanyueYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2331,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.JiyueYinS) == MingwenMaShisi.JiyueYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2332,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.LiefengYinS) == MingwenMaShisi.LiefengYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2333,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.JvhuoYinS) == MingwenMaShisi.JvhuoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2334,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.JibuYinS) == MingwenMaShisi.JibuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2335,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.ChongzhuangYinS) == MingwenMaShisi.ChongzhuangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2336,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.YeyongYinS) == MingwenMaShisi.YeyongYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2337,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShisi & MingwenMaShisi.ZhanyueYinS) == MingwenMaShisi.ZhanyueYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2338,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.DuohuoYinS) == MingwenMaShiwu.DuohuoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2339,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.RanshaoYinS) == MingwenMaShiwu.RanshaoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2340,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.KaijiangYinS) == MingwenMaShiwu.KaijiangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2341,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.ShenquYinS) == MingwenMaShiwu.ShenquYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2342,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.ShenglongYinS) == MingwenMaShiwu.ShenglongYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2343,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.ZengqiangYinS) == MingwenMaShiwu.ZengqiangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2346,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.QiangdaYinS) == MingwenMaShiwu.QiangdaYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2347,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.DaofaYinS) == MingwenMaShiwu.DaofaYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2348,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.KuaidaoYinS) == MingwenMaShiwu.KuaidaoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2349,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiwu & MingwenMaShiwu.BadaoYinS) == MingwenMaShiwu.BadaoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2350,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.ChuiziYinS) == MingwenMaShiliu.ChuiziYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2351,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.ZhanchuiYinS) == MingwenMaShiliu.ZhanchuiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2352,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.TianshenYinS) == MingwenMaShiliu.TianshenYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2353,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.JianzhuangYinS) == MingwenMaShiliu.JianzhuangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2354,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.TiebuYinS) == MingwenMaShiliu.TiebuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2355,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.NuoyiYinS) == MingwenMaShiliu.NuoyiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2356,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.DouzhuanYinS) == MingwenMaShiliu.DouzhuanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2357,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.PoxueYinS) == MingwenMaShiliu.PoxueYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2358,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.KuangmoYinS) == MingwenMaShiliu.KuangmoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2359,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiliu & MingwenMaShiliu.JingangYinS) == MingwenMaShiliu.JingangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2360,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.SumingYinS) == MingwenMaShiqi.SumingYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2361,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.JingweiYinS) == MingwenMaShiqi.JingweiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2362,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.HuishengYinS) == MingwenMaShiqi.HuishengYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2363,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.XinyanYinS) == MingwenMaShiqi.XinyanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2364,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.XukongYinS) == MingwenMaShiqi.XukongYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2365,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.ShoulieYinS) == MingwenMaShiqi.ShoulieYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2366,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.TiaoheYinS) == MingwenMaShiqi.TiaoheYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2367,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.LianminYinS) == MingwenMaShiqi.LianminYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2368,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.LianyueYinS) == MingwenMaShiqi.LianyueYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2344,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaShiqi & MingwenMaShiqi.WushuangYinS) == MingwenMaShiqi.WushuangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2345,

                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.ChangshengYinS) == MingwenMaErshi.ChangshengYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2401,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.DuocuiYinS) == MingwenMaErshi.DuocuiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2402,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.YinniYinS) == MingwenMaErshi.YinniYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2403,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshi & MingwenMaErshi.TanlanYinS) == MingwenMaErshi.TanlanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2404,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.LingshanYinS) == MingwenMaErshiyi.LingshanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2405,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.JvnhengYinS) == MingwenMaErshiyi.JvnhengYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2406,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.MingxinagYinS) == MingwenMaErshiyi.MingxinagYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2407,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.FenzhengYinS) == MingwenMaErshiyi.FenzhengYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2408,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.YibianYinS) == MingwenMaErshiyi.YibianYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2409,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.YexingYinS) == MingwenMaErshiyi.YexingYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2410,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.QiannengYinS) == MingwenMaErshiyi.QiannengYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2411,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.QinshiYinS) == MingwenMaErshiyi.QinshiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2412,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.XianjiYinS) == MingwenMaErshiyi.XianjiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2413,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiyi & MingwenMaErshiyi.ZengwuYinS) == MingwenMaErshiyi.ZengwuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2414,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.BihuYinS) == MingwenMaErshier.BihuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2415,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.QixiYinS) == MingwenMaErshier.QixiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2416,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.WuweiYinS) == MingwenMaErshier.WuweiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2417,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.TiequYinS) == MingwenMaErshier.TiequYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2418,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.ZishengYinS) == MingwenMaErshier.ZishengYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2419,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.TunshiYinS) == MingwenMaErshier.TunshiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2420,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.JijiuYinS) == MingwenMaErshier.JijiuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2421,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.KexueYinS) == MingwenMaErshier.KexueYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2422,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.FusuYinS) == MingwenMaErshier.FusuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2423,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshier & MingwenMaErshier.ChanaYinS) == MingwenMaErshier.ChanaYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2424,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.ChengjieYinS) == MingwenMaErshisan.ChengjieYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2425,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.QishuYinS) == MingwenMaErshisan.QishuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2426,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.KuangreYinS) == MingwenMaErshisan.KuangreYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2427,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.YangyanYinS) == MingwenMaErshisan.YangyanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2428,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.JielvYinS) == MingwenMaErshisan.JielvYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2429,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.JingjiYinS) == MingwenMaErshisan.JingjiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2430,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.BaoliYinS) == MingwenMaErshisan.BaoliYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2431,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.ShuaibaiYinS) == MingwenMaErshisan.ShuaibaiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2432,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.TujinYinS) == MingwenMaErshisan.TujinYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2433,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisan & MingwenMaErshisan.ShougeYinS) == MingwenMaErshisan.ShougeYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2434,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.PomoYinS) == MingwenMaErshisi.PomoYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2435,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.GuanchuanYinS) == MingwenMaErshisi.GuanchuanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2436,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.ZhanfangYinS) == MingwenMaErshisi.ZhanfangYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2437,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.ShensuYinS) == MingwenMaErshisi.ShensuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2438,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.GanyingYinS) == MingwenMaErshisi.GanyingYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2439,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.QiangjianYinS) == MingwenMaErshisi.QiangjianYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2440,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.ZhuanhuanYinS) == MingwenMaErshisi.ZhuanhuanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2441,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.YishanYinS) == MingwenMaErshisi.YishanYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2442,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.ZhenfenYinS) == MingwenMaErshisi.ZhenfenYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2443,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshisi & MingwenMaErshisi.XinnianYinS) == MingwenMaErshisi.XinnianYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2444,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.ZhengjiuYinS) == MingwenMaErshiwu.ZhengjiuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2445,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.ZhimingYinS) == MingwenMaErshiwu.ZhimingYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2446,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.DongchaYinS) == MingwenMaErshiwu.DongchaYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2447,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.PojiaYinS) == MingwenMaErshiwu.PojiaYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2448,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.JiantaYinS) == MingwenMaErshiwu.JiantaYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2449,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.ZhenjiYinS) == MingwenMaErshiwu.ZhenjiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2450,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.GangyiYinS) == MingwenMaErshiwu.GangyiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2451,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.TongkuYinS) == MingwenMaErshiwu.TongkuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2452,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.YuheYinS) == MingwenMaErshiwu.YuheYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2453,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiwu & MingwenMaErshiwu.JianbiYinS) == MingwenMaErshiwu.JianbiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2454,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiliu & MingwenMaErshiliu.ZhuanzhuYinS) == MingwenMaErshiliu.ZhuanzhuYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2455,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }
                    else if ((cell.Link?.Item.MingwenMaErshiliu & MingwenMaErshiliu.YingjiYinS) == MingwenMaErshiliu.YingjiYinS)
                    {
                        
                        MingwenImageSan = new DXImageControl
                        {
                            LibraryFile = LibraryFile.GameInter,
                            Index = 2456,
                            Parent = this,
                            Location = new Point(30, 224),

                        };

                    }

                }
                else
                {
                    LvLabel.Text = "0";
                    MingwenImageYi = new DXImageControl
                    {
                        LibraryFile = LibraryFile.GameInter,
                        Index = 5690,
                        Parent = this,
                        Location = new Point(30, 137),
                    };
                    MingwenImageEr = new DXImageControl
                    {
                        LibraryFile = LibraryFile.GameInter,
                        Index = 5691,
                        Parent = this,
                        Location = new Point(30, 180),
                    };
                    MingwenImageSan = new DXImageControl
                    {
                        LibraryFile = LibraryFile.GameInter,
                        Index = 5692,
                        Parent = this,
                        Location = new Point(30, 224),
                    };
                }
            }
        }
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            LevelUpButton.Enabled = count == 1;
        }
        public void processlabel()
        {
            CalculateCosts();
        }
        
        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (TargetCell != null)
                {
                    if (!TargetCell.IsDisposed)
                        TargetCell.Dispose();

                    TargetCell = null;
                }

                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }



                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }

                if (LvLabel != null)
                {
                    if (!LvLabel.IsDisposed)
                        LvLabel.Dispose();

                    LvLabel = null;
                }


            }

        }

        #endregion
    }

    
    public sealed class NPCZhongziDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCZhongziDialog()
        {
            TitleLabel.Text = "法宝升级";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.ZhongziItems,
                Linked = true,
            };

            Movable = false;
            
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.Zhongzi,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {
            };

            new DXLabel
            {
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.Zhongzi { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }
        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion

    }
    public sealed class NPCGZLKaikongDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCGZLKaikongDialog()
        {
            TitleLabel.Text = "开红色插槽";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.GZLKaikongItems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.GZLKaikong,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCGZLKaikongUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCGZLBKaikongDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCGZLBKaikongDialog()
        {
            TitleLabel.Text = "开黄色插槽";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.GZLBKaikongItems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.GZLBKaikong,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCGZLBKaikongUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCQTKaikongDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCQTKaikongDialog()
        {
            TitleLabel.Text = "开绿色插槽";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.QTKaikongItems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.QTKaikong,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCQTKaikongUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanGJSTDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanGJSTDialog()
        {
            TitleLabel.Text = "镶嵌攻击宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanGJSTItems,
                Linked = true,
            };

            Movable = false;
            
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanGJST,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanGJSTUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanGJBSTDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanGJBSTDialog()
        {
            TitleLabel.Text = "镶嵌攻击几率宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanGJBSTItems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanGJBST,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanGJBSTUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    public sealed class NPCXiangKanZRSTDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanZRSTDialog()
        {
            TitleLabel.Text = "镶嵌自然宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanZRSTItems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanZRST,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanZRSTUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    public sealed class NPCXiangKanZRBSTDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanZRBSTDialog()
        {
            TitleLabel.Text = "镶嵌自然几率宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;


            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanZRBSTItems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanZRBST,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanZRBSTUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    public sealed class NPCXiangKanLHSTDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanLHSTDialog()
        {
            TitleLabel.Text = "镶嵌灵魂宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanLHSTItems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanLHST,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanLHSTUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    public sealed class NPCXiangKanLHBSTDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanLHBSTDialog()
        {
            TitleLabel.Text = "镶嵌灵魂几率宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanLHBSTItems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanLHBST,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanLHBSTUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    public sealed class NPCXiangKanSMSTDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanSMSTDialog()
        {
            TitleLabel.Text = "镶嵌生命宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanSMSTItems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanSMST,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanSMSTUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    public sealed class NPCXiangKanMFSTDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanMFSTDialog()
        {
            TitleLabel.Text = "镶嵌魔法宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanMFSTItems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanMFST,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanMFSTUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    public sealed class NPCXiangKanSDSTDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanSDSTDialog()
        {
            TitleLabel.Text = "镶嵌速度宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanSDSTItems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanSDST,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanSDSTUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    public sealed class NPCXiangKanFYSTDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanFYSTDialog()
        {
            TitleLabel.Text = "镶嵌防御宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanFYSTItems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanFYST,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanFYSTUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    public sealed class NPCXiangKanMYSTDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanMYSTDialog()
        {
            TitleLabel.Text = "镶嵌魔御宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanMYSTItems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanMYST,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanMYSTUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    
    public sealed class NPCHuanhuaDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCHuanhuaDialog()
        {
            TitleLabel.Text = "幻化装备";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.Huanhuaitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.Huanhua,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {
            };

            new DXLabel
            {
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCHuanhuaUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCChaichustDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCChaichustDialog()
        {
            TitleLabel.Text = "拆除宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.Chaichustitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.Chaichust,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCChaichustUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangkanjystDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangkanjystDialog()
        {
            TitleLabel.Text = "镶嵌经验宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.Xiangkanjystitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.Xiangkanjyst,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangkanjystUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangkanxxstDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangkanxxstDialog()
        {
            TitleLabel.Text = "镶嵌吸血宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.Xiangkanxxstitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.Xiangkanxxst,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangkanxxstUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }
    public sealed class NPCXiangKanghuoDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanghuoDialog()
        {
            TitleLabel.Text = "镶嵌攻火宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanghuoitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanghuo,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanghuoUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKangbingDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKangbingDialog()
        {
            TitleLabel.Text = "镶嵌攻冰宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKangbingitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKangbing,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKangbingUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKangleiDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKangleiDialog()
        {
            TitleLabel.Text = "镶嵌攻雷宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKangleiitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanglei,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKangleiUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKangfengDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKangfengDialog()
        {
            TitleLabel.Text = "镶嵌攻风宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKangfengitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKangfeng,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKangfengUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKangshenDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKangshenDialog()
        {
            TitleLabel.Text = "镶嵌攻神圣宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKangshenitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKangshen,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKangshenUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanganDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanganDialog()
        {
            TitleLabel.Text = "镶嵌攻暗黑宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(5, 1),
                Parent = this,
                GridType = GridType.XiangKanganitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKangan,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                Label = { Text = "确认" },
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 160),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(79, SmallButtonHeight),
                Enabled = false,
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanganUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanghuanDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanghuanDialog()
        {
            TitleLabel.Text = "镶嵌攻幻影宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanghuanitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanghuan,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanghuanUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanmofadunDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanmofadunDialog()
        {
            TitleLabel.Text = "镶嵌魔法盾宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanmofadunitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanmofadun,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanmofadunUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanbingdongDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanbingdongDialog()
        {
            TitleLabel.Text = "镶嵌冰冻宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanbingdongitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanbingdong,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanbingdongUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanmabiDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanmabiDialog()
        {
            TitleLabel.Text = "镶嵌麻痹宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanmabiitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanmabi,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };


            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanmabiUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanyidongDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanyidongDialog()
        {
            TitleLabel.Text = "镶嵌减移动速宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanyidongitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanyidong,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanyidongUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanchenmoDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanchenmoDialog()
        {
            TitleLabel.Text = "镶嵌沉默宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanchenmoitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanchenmo,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanchenmoUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKangedangDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKangedangDialog()
        {
            TitleLabel.Text = "镶嵌格挡几率宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKangedangitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKangedang,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKangedangUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanduobiDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanduobiDialog()
        {
            TitleLabel.Text = "镶嵌躲避几率宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanduobiitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanduobi,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanduobiUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanqhuoDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanqhuoDialog()
        {
            TitleLabel.Text = "镶嵌强火宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanqhuoitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanqhuo,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanqhuoUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanqbingDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanqbingDialog()
        {
            TitleLabel.Text = "镶嵌强冰宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanqbingitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanqbing,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanqbingUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanqleiDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanqleiDialog()
        {
            TitleLabel.Text = "镶嵌强雷宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanqleiitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanqlei,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanqleiUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanqfengDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanqfengDialog()
        {
            TitleLabel.Text = "镶嵌强风宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanqfengitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanqfeng,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanqfengUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanqshenDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanqshenDialog()
        {
            TitleLabel.Text = "镶嵌强神圣宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanqshenitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanqshen,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanqshenUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanqanDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanqanDialog()
        {
            TitleLabel.Text = "镶嵌强暗黑宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanqanitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanqan,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanqanUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanqhuanDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanqhuanDialog()
        {
            TitleLabel.Text = "镶嵌强幻影宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanqhuanitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanqhuan,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanqhuanUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanlvduDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanlvduDialog()
        {
            TitleLabel.Text = "镶嵌绿毒宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanlvduitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanlvdu,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanlvduUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanzymDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanzymDialog()
        {
            TitleLabel.Text = "镶嵌真炎魔宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanzymitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanzym,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanzymUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    public sealed class NPCXiangKanmhhfDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanmhhfDialog()
        {
            TitleLabel.Text = "镶嵌灭魂宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanmhhfitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanmhhf,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp*/
            };

            new DXLabel
            {/*
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "镶嵌成本",
                Size = new Size(79, 20),
                IsControl = false,*/
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanmhhfUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    
    public sealed class NPCXiangKanjinglianDialog : DXWindow
    {
        #region Properties

        public DXItemGrid TargetCell;
        public DXItemGrid Grid;
        public DXButton LevelUpButton;
        public DXLabel CostLabel;
        public DXImageControl Image;

        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
            {
                TargetCell.ClearLinks();
                Grid.ClearLinks();
            }
        }

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion


        public NPCXiangKanjinglianDialog()
        {
            TitleLabel.Text = "镶嵌精炼宝石";

            SetClientSize(new Size(174, 274));

            DXImageControl dxImageControl1 = new DXImageControl();
            dxImageControl1.LibraryFile = LibraryFile.GameInter;
            dxImageControl1.Index = 5701;
            dxImageControl1.Location = new Point(3, 30);
            dxImageControl1.Parent = this;
            Image = dxImageControl1;

            Grid = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanjinglianitems,
                Linked = true
            };

            Movable = false;
            Grid.Location = new Point(ClientArea.X + 68, ClientArea.Y + 175);

            foreach (DXItemCell cell in Grid.Grid)
                cell.LinkChanged += (o, e) => CalculateCost();

            TargetCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.XiangKanjinglian,
                Linked = true,
            };
            TargetCell.Location = new Point(ClientArea.X + (ClientArea.Width - TargetCell.Size.Width) / 2, ClientArea.Y + TargetCell.Size.Height + 26);

            CostLabel = new DXLabel
            {
            };

            new DXLabel
            {
            };

            LevelUpButton = new DXButton
            {
                LibraryFile = LibraryFile.GameInter,
                Index = 5705,
                Parent = this,
                Location = new Point(ClientArea.X + 50, CostLabel.Location.Y + CostLabel.Size.Height + 285),
            };
            LevelUpButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                ;
                List<CellLinkInfo> links = new List<CellLinkInfo>();

                DXItemCell target = TargetCell.Grid[0];

                DXItemCell item = Grid.Grid[0];

                if ((target.Item.BaoshiMaShisan & BaoshiMaShisan.Huanhua) != BaoshiMaShisan.Huanhua)
                {
                    
                    if (item.Item.Info.Weight == 2)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 1)
                                {
                                    GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("1级宝石一转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 3)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 2)
                                {
                                    GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("2级宝石二转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 4)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 3)
                                {
                                    GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("3级宝石三转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                    
                    else if (item.Item.Info.Weight == 5)
                    {
                        switch (target.Item.Info.RequiredType)
                        {
                            case RequiredType.RebirthLevel:
                                if (target.Item.Info.RequiredAmount < 4)
                                {
                                    GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                    return;
                                }
                                break;
                            default:
                                GameScene.Game.ReceiveChat("4级宝石四转以上的装备才能镶嵌。", MessageType.System);
                                return;
                        }
                    }
                }
                else
                {
                    if (GameScene.Game.User.HuanhuaGuagou)
                    {
                        
                        if (item.Item.Info.Weight == 2)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 1)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到1转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 3)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 2)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到2转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 4)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 3)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到3转", MessageType.System);
                                return;
                            }
                        }
                        
                        else if (item.Item.Info.Weight == 5)
                        {
                            if (GameScene.Game.User.Stats[Stat.Rebirth] < 4)
                            {
                                GameScene.Game.ReceiveChat("镶嵌失败，你转生次数没有达到4转", MessageType.System);
                                return;
                            }
                        }
                    }
                }

                if (target.Link == null) return;

                CellLinkInfo targetLink = new CellLinkInfo { Count = target.LinkedCount, GridType = target.Link.GridType, Slot = target.Link.Slot };
                target.Link.Locked = true;
                target.Link = null;

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCXiangKanjinglianUp { Target = targetLink, Links = links });
            };
        }


        #region Methods
        private void CalculateCost()
        {
            int count = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                
                if (cell.LinkedCount != 1) continue;
                if (cell.Link?.Item == null) continue;

                count++;
            }

            CostLabel.ForeColour = count > MapObject.User.Gold ? Color.Red : Color.White;

            

            LevelUpButton.Enabled = count == 1;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (LevelUpButton != null)
                {
                    if (!LevelUpButton.IsDisposed)
                        LevelUpButton.Dispose();

                    LevelUpButton = null;
                }

                if (CostLabel != null)
                {
                    if (!CostLabel.IsDisposed)
                        CostLabel.Dispose();

                    CostLabel = null;
                }
            }

        }

        #endregion
    }

    
    public sealed class NPCJyhuishouDialog : DXWindow
    {
        #region Properties

        public DXItemGrid Grid;
        public DXButton ChangeButton;
        public DXImageControl ExphuishouBar;
        public DXLabel ExpLabel, ExphuishouLabel, LevelLabel;
        public decimal totalExphuishou;
        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
                Grid.ClearLinks();
        }


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCJyhuishouDialog()
        {
            TitleLabel.Text = "经验回收";

            Grid = new DXItemGrid
            {
                GridSize = new Size(7, 7),
                Parent = this,
                GridType = GridType.Jyhuishou,
                Linked = true
            };

            
            SetClientSize(new Size(Grid.Size.Width, Grid.Size.Height + 80));
            Grid.Location = ClientArea.Location;

            foreach (DXItemCell cell in Grid.Grid)
            {
                cell.LinkChanged += Cell_LinkChanged;
            }

            
            ExphuishouBar = new DXImageControl
            {
                Parent = this,
                LibraryFile = LibraryFile.Interface,
                Index = 109,
            };
            ExphuishouBar.Location = new Point(ClientArea.Left + 49, ClientArea.Bottom - 71);
            ExphuishouBar.AfterDraw += (o, e) =>
            {
                if (ExphuishouBar.Library == null) return;

                if (MapObject.User.Jyhuishoulevel >= CartoonGlobals.JyhuishouExperienceList.Count) return;

                decimal Maxexphuishou = CartoonGlobals.JyhuishouExperienceList[MapObject.User.Jyhuishoulevel];

                if (Maxexphuishou == 0) return;

                
                MirImage image = ExphuishouBar.Library.CreateImage(110, ImageType.Image);

                if (image == null) return;


                float percent = (float)Math.Min(1, Math.Max(0, MapObject.User.Exphuishou / Maxexphuishou));

                if (percent == 0) return;

                PresentTexture(image.Image, this, new Rectangle(ExphuishouBar.DisplayArea.X + 5, ExphuishouBar.DisplayArea.Y + 4, (int)(image.Width * percent), image.Height), Color.White, ExphuishouBar);
            };

            ExphuishouLabel = new DXLabel()
            {
                Parent = this,
                ForeColour = Color.White,
                Location = new Point(ClientArea.Left + 126, ClientArea.Bottom - 71),
                Text = "0",
                Size = new Size(ClientArea.Width - 91, 20),
                Sound = SoundIndex.GoldPickUp,
            };

            LevelLabel = new DXLabel()
            {
                Parent = this,
                ForeColour = Color.White,
                Location = new Point(ClientArea.Width - 240, 293),
                Text = "0",
                Hint = "",
            };

            ExpLabel = new DXLabel
            {
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp
            };

            new DXLabel
            {
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter | TextFormatFlags.HorizontalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "经验总计",
                Size = new Size(79, 20),
                IsControl = false,
            };

            DXButton ChangedAll = new DXButton
            {
                Label = { Text = "角包全选" },
                Location = new Point(ClientArea.X, ExpLabel.Location.Y + ExpLabel.Size.Height + 7),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(60, SmallButtonHeight)
            };
            ChangedAll.MouseClick += (o, e) =>
            {
                foreach (DXItemCell cell in GameScene.Game.InventoryBox.Grid.Grid)
                {
                    if (!cell.CheckLink(Grid)) continue;

                    cell.MoveItem(Grid, true);
                }
            };

            DXButton CompanionChangedAll = new DXButton
            {
                Label = { Text = "宠包全选" },
                Location = new Point(ClientArea.Right - 178, ExpLabel.Location.Y + ExpLabel.Size.Height + 7),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(60, SmallButtonHeight)
            };
            CompanionChangedAll.MouseClick += (o, e) =>
            {
                foreach (DXItemCell cell in GameScene.Game.CompanionBox.InventoryGrid.Grid)
                {
                    if (!cell.CheckLink(Grid)) continue;

                    cell.MoveItem(Grid, true);
                }
            };

            ChangeButton = new DXButton
            {
                Label = { Text = "回收" },
                Location = new Point(ClientArea.Right - 61, ExpLabel.Location.Y + ExpLabel.Size.Height + 7),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(60, SmallButtonHeight),
                Enabled = false,
            };
            ChangeButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                List<CellLinkInfo> links = new List<CellLinkInfo>();

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.NPCJyChange { Links = links });
            };

        }

        #region Methods
        private void Cell_LinkChanged(object sender, EventArgs e)
        {
            long sum = 0;
            int count = 0;
            long sumch = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                if (cell.Link?.Item == null) continue;

                count++;
                sum += cell.Link.Item.Exp(cell.LinkedCount);
            }

            if (GameScene.Game.User.Level >= GameScene.Game.User.JYhuishoudengji)
            {
                ExpLabel.Text = sum.ToString("#,##0");
            }
            else
            {
                ExpLabel.Text = sumch.ToString($"经验回收功能{GameScene.Game.User.JYhuishoudengji}级后才能使用");
            }

            
            ChangeButton.Enabled = count > 0 && GameScene.Game.User.Level >= GameScene.Game.User.JYhuishoudengji;

        }
        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (ChangeButton != null)
                {
                    if (!ChangeButton.IsDisposed)
                        ChangeButton.Dispose();

                    ChangeButton = null;
                }

                if (ExpLabel != null)
                {
                    if (!ExpLabel.IsDisposed)
                        ExpLabel.Dispose();

                    ExpLabel = null;
                }
            }

        }

        #endregion
    }

    
    public sealed class NPCGuildhuishouDialog : DXWindow
    {
        #region Properties

        public DXItemGrid Grid;
        public DXButton ChangeButton;
        public DXLabel ExpLabel;
        public decimal totalExphuishou;
        public override void OnIsVisibleChanged(bool oValue, bool nValue)
        {
            base.OnIsVisibleChanged(oValue, nValue);

            if (GameScene.Game.InventoryBox == null) return;

            if (IsVisible)
                GameScene.Game.InventoryBox.Visible = true;

            if (!IsVisible)
                Grid.ClearLinks();
        }


        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCGuildhuishouDialog()
        {
            TitleLabel.Text = "贡献回收";

            Grid = new DXItemGrid
            {
                GridSize = new Size(7, 7),
                Parent = this,
                GridType = GridType.GuildContribution,
                Linked = true
            };

            Movable = false;
            SetClientSize(new Size(Grid.Size.Width, Grid.Size.Height + 50));
            Grid.Location = ClientArea.Location;

            foreach (DXItemCell cell in Grid.Grid)
            {
                cell.LinkChanged += Cell_LinkChanged;
            }

            ExpLabel = new DXLabel
            {
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left + 80, ClientArea.Bottom - 45),
                Text = "0",
                Size = new Size(ClientArea.Width - 80, 20),
                Sound = SoundIndex.GoldPickUp
            };

            new DXLabel
            {
                AutoSize = false,
                Border = true,
                BorderColour = Color.FromArgb(198, 166, 99),
                ForeColour = Color.White,
                DrawFormat = TextFormatFlags.VerticalCenter | TextFormatFlags.HorizontalCenter,
                Parent = this,
                Location = new Point(ClientArea.Left, ClientArea.Bottom - 45),
                Text = "贡献总计",
                Size = new Size(79, 20),
                IsControl = false,
            };

            DXButton ChangedAll = new DXButton
            {
                Label = { Text = "角包全选" },
                Location = new Point(ClientArea.X, ExpLabel.Location.Y + ExpLabel.Size.Height + 7),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(60, SmallButtonHeight)
            };
            ChangedAll.MouseClick += (o, e) =>
            {
                foreach (DXItemCell cell in GameScene.Game.InventoryBox.Grid.Grid)
                {
                    if (!cell.CheckLink(Grid)) continue;

                    cell.MoveItem(Grid, true);
                }
            };

            DXButton CompanionChangedAll = new DXButton
            {
                Label = { Text = "宠包全选" },
                Location = new Point(ClientArea.Right - 178, ExpLabel.Location.Y + ExpLabel.Size.Height + 7),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(60, SmallButtonHeight)
            };
            CompanionChangedAll.MouseClick += (o, e) =>
            {
                foreach (DXItemCell cell in GameScene.Game.CompanionBox.InventoryGrid.Grid)
                {
                    if (!cell.CheckLink(Grid)) continue;

                    cell.MoveItem(Grid, true);
                }
            };

            ChangeButton = new DXButton
            {
                Label = { Text = "回收" },
                Location = new Point(ClientArea.Right - 61, ExpLabel.Location.Y + ExpLabel.Size.Height + 7),
                ButtonType = ButtonType.SmallButton,
                Parent = this,
                Size = new Size(60, SmallButtonHeight),
                Enabled = false,
            };
            ChangeButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;

                List<CellLinkInfo> links = new List<CellLinkInfo>();

                foreach (DXItemCell cell in Grid.Grid)
                {
                    if (cell.Link == null) continue;

                    links.Add(new CellLinkInfo { Count = cell.LinkedCount, GridType = cell.Link.GridType, Slot = cell.Link.Slot });

                    cell.Link.Locked = true;
                    cell.Link = null;
                }

                CEnvir.Enqueue(new C.GuildJyChange { Links = links });
            };

        }

        #region Methods
        private void Cell_LinkChanged(object sender, EventArgs e)
        {
            long sum = 0;
            int count = 0;
            long sumch = 0;
            foreach (DXItemCell cell in Grid.Grid)
            {
                if (cell.Link?.Item == null) continue;

                count++;
                sum += cell.Link.Item.Exp(cell.LinkedCount) / 100;
            }

            if (GameScene.Game.User.GuildLvKQ)
            {
                ExpLabel.Text = sum.ToString("#,##0");
            }
            else
            {
                ExpLabel.Text = sumch.ToString($"公会等级系统没有开启");
            }

            
            ChangeButton.Enabled = count > 0 && GameScene.Game.User.GuildLvKQ;

        }
        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (Grid != null)
                {
                    if (!Grid.IsDisposed)
                        Grid.Dispose();

                    Grid = null;
                }

                if (ChangeButton != null)
                {
                    if (!ChangeButton.IsDisposed)
                        ChangeButton.Dispose();

                    ChangeButton = null;
                }

                if (ExpLabel != null)
                {
                    if (!ExpLabel.IsDisposed)
                        ExpLabel.Dispose();

                    ExpLabel = null;
                }
            }

        }

        #endregion
    }
    
    public sealed class NPCAccessoryResetDialog : DXWindow
    {
        #region Properties

        public DXItemGrid AccessoryGrid;
        public DXButton ResetButton;

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCAccessoryResetDialog()
        {
            HasTitle = false;
            SetClientSize(new Size(100, 105));
            CloseButton.Visible = false;

            DXLabel label = new DXLabel
            {
                Text = "附件",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                ForeColour = Color.FromArgb(198, 166, 99),
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = ClientArea.Location,
                AutoSize = false,
                Size = new Size(ClientArea.Width, 20),
                DrawFormat = TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter
            };
            AccessoryGrid = new DXItemGrid
            {
                Parent = this,
                Location = new Point(ClientArea.X + (ClientArea.Width - 36) / 2, label.Size.Height + label.Location.Y + 5),
                GridSize = new Size(1, 1),
                Linked = true,
                GridType = GridType.AccessoryReset,
            };

            AccessoryGrid.Grid[0].LinkChanged += (o, e) => ResetButton.Enabled = AccessoryGrid.Grid[0].Item != null;
            AccessoryGrid.Grid[0].BeforeDraw += (o, e) => Draw(AccessoryGrid.Grid[0], 31);

            ResetButton = new DXButton
            {
                Size = new Size(50, SmallButtonHeight),
                Location = new Point((ClientArea.Width - 50) / 2 + ClientArea.X, ClientArea.Bottom - SmallButtonHeight),
                Label = { Text = "重置" },
                Parent = this,
                ButtonType = ButtonType.SmallButton,
                Enabled = false,
            };

            label = new DXLabel
            {
                Text = $"成本: {CartoonGlobals.AccessoryResetCost:#,##0}",
                Parent = this,
                ForeColour = Color.FromArgb(198, 166, 99),
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = new Point(ClientArea.X, ResetButton.Location.Y - 25),
                AutoSize = false,
                Size = new Size(ClientArea.Width, 20),
                DrawFormat = TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter
            };

            ResetButton.MouseClick += (o, e) =>
            {
                if (AccessoryGrid.Grid[0].Item == null) return;

                if (GameScene.Game.Observer) return;

                switch (AccessoryGrid.Grid[0].Item.Info.ItemType)
                {
                    case ItemType.Ring:
                    case ItemType.Bracelet:
                    case ItemType.Necklace:
                        break;
                    default:
                        return;
                }


                CellLinkInfo targetLink = new CellLinkInfo { Count = AccessoryGrid.Grid[0].LinkedCount, GridType = AccessoryGrid.Grid[0].Link.GridType, Slot = AccessoryGrid.Grid[0].Link.Slot };

                AccessoryGrid.Grid[0].Link.Locked = true;
                AccessoryGrid.Grid[0].Link = null;

                CEnvir.Enqueue(new C.NPCAccessoryReset { Cell = targetLink });
            };
        }

        #region Methods

        public void Draw(DXItemCell cell, int index)
        {
            if (InterfaceLibrary == null) return;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (AccessoryGrid != null)
                {
                    if (!AccessoryGrid.IsDisposed)
                        AccessoryGrid.Dispose();

                    AccessoryGrid = null;
                }

                if (ResetButton != null)
                {
                    if (!ResetButton.IsDisposed)
                        ResetButton.Dispose();

                    ResetButton = null;
                }
            }

        }

        #endregion
    }

    
    public sealed class NPCDunResetDialog : DXWindow
    {
        #region Properties

        public DXItemGrid AccessoryGrid;
        public DXButton ResetButton;

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCDunResetDialog()
        {
            HasTitle = false;
            SetClientSize(new Size(100, 105));
            CloseButton.Visible = false;

            DXLabel label = new DXLabel
            {
                Text = "盾牌",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                ForeColour = Color.FromArgb(198, 166, 99),
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = ClientArea.Location,
                AutoSize = false,
                Size = new Size(ClientArea.Width, 20),
                DrawFormat = TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter
            };
            AccessoryGrid = new DXItemGrid
            {
                Parent = this,
                Location = new Point(ClientArea.X + (ClientArea.Width - 36) / 2, label.Size.Height + label.Location.Y + 5),
                GridSize = new Size(1, 1),
                Linked = true,
                GridType = GridType.DunReset,
            };

            AccessoryGrid.Grid[0].LinkChanged += (o, e) => ResetButton.Enabled = AccessoryGrid.Grid[0].Item != null;
            AccessoryGrid.Grid[0].BeforeDraw += (o, e) => Draw(AccessoryGrid.Grid[0], 31);

            ResetButton = new DXButton
            {
                Size = new Size(50, SmallButtonHeight),
                Location = new Point((ClientArea.Width - 50) / 2 + ClientArea.X, ClientArea.Bottom - SmallButtonHeight),
                Label = { Text = "重置" },
                Parent = this,
                ButtonType = ButtonType.SmallButton,
                Enabled = false,
            };

            label = new DXLabel
            {
                Text = $"成本: {CartoonGlobals.DunResetCost:#,##0} 声望",
                Parent = this,
                ForeColour = Color.FromArgb(198, 166, 99),
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = new Point(ClientArea.X, ResetButton.Location.Y - 25),
                AutoSize = false,
                Size = new Size(ClientArea.Width, 20),
                DrawFormat = TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter
            };

            ResetButton.MouseClick += (o, e) =>
            {
                if (AccessoryGrid.Grid[0].Item == null) return;

                if (GameScene.Game.Observer) return;

                switch (AccessoryGrid.Grid[0].Item.Info.ItemType)
                {
                    case ItemType.Shield:
                        break;
                    default:
                        return;
                }

                if (GameScene.Game.User.Gerenshengwang < CartoonGlobals.DunResetCost)
                {
                    GameScene.Game.ReceiveChat("重置失败，声望点不够。", MessageType.System);
                    return;
                }

                CellLinkInfo targetLink = new CellLinkInfo { Count = AccessoryGrid.Grid[0].LinkedCount, GridType = AccessoryGrid.Grid[0].Link.GridType, Slot = AccessoryGrid.Grid[0].Link.Slot };

                AccessoryGrid.Grid[0].Link.Locked = true;
                AccessoryGrid.Grid[0].Link = null;

                CEnvir.Enqueue(new C.NPCDunReset { Cell = targetLink });
            };
        }

        #region Methods

        public void Draw(DXItemCell cell, int index)
        {
            if (InterfaceLibrary == null) return;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (AccessoryGrid != null)
                {
                    if (!AccessoryGrid.IsDisposed)
                        AccessoryGrid.Dispose();

                    AccessoryGrid = null;
                }

                if (ResetButton != null)
                {
                    if (!ResetButton.IsDisposed)
                        ResetButton.Dispose();

                    ResetButton = null;
                }
            }

        }

        #endregion
    }

    
    public sealed class NPCHuiResetDialog : DXWindow
    {
        #region Properties

        public DXItemGrid AccessoryGrid;
        public DXButton ResetButton;

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCHuiResetDialog()
        {
            HasTitle = false;
            SetClientSize(new Size(100, 105));
            CloseButton.Visible = false;

            DXLabel label = new DXLabel
            {
                Text = "徽章",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(10F), FontStyle.Bold),
                ForeColour = Color.FromArgb(198, 166, 99),
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = ClientArea.Location,
                AutoSize = false,
                Size = new Size(ClientArea.Width, 20),
                DrawFormat = TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter
            };
            AccessoryGrid = new DXItemGrid
            {
                Parent = this,
                Location = new Point(ClientArea.X + (ClientArea.Width - 36) / 2, label.Size.Height + label.Location.Y + 5),
                GridSize = new Size(1, 1),
                Linked = true,
                GridType = GridType.HuiReset,
            };

            AccessoryGrid.Grid[0].LinkChanged += (o, e) => ResetButton.Enabled = AccessoryGrid.Grid[0].Item != null;
            AccessoryGrid.Grid[0].BeforeDraw += (o, e) => Draw(AccessoryGrid.Grid[0], 31);

            ResetButton = new DXButton
            {
                Size = new Size(50, SmallButtonHeight),
                Location = new Point((ClientArea.Width - 50) / 2 + ClientArea.X, ClientArea.Bottom - SmallButtonHeight),
                Label = { Text = "重置" },
                Parent = this,
                ButtonType = ButtonType.SmallButton,
                Enabled = false,
            };

            label = new DXLabel
            {
                Text = $"成本: {CartoonGlobals.HuiResetCost:#,##0} 声望",
                Parent = this,
                ForeColour = Color.FromArgb(198, 166, 99),
                Outline = true,
                OutlineColour = Color.Black,
                IsControl = false,
                Location = new Point(ClientArea.X, ResetButton.Location.Y - 25),
                AutoSize = false,
                Size = new Size(ClientArea.Width, 20),
                DrawFormat = TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter
            };

            ResetButton.MouseClick += (o, e) =>
            {
                if (AccessoryGrid.Grid[0].Item == null) return;

                if (GameScene.Game.Observer) return;

                switch (AccessoryGrid.Grid[0].Item.Info.ItemType)
                {
                    case ItemType.Emblem:
                        break;
                    default:
                        return;
                }

                if (GameScene.Game.User.Gerenshengwang < CartoonGlobals.DunResetCost)
                {
                    GameScene.Game.ReceiveChat("重置失败，声望点不够。", MessageType.System);
                    return;
                }

                CellLinkInfo targetLink = new CellLinkInfo { Count = AccessoryGrid.Grid[0].LinkedCount, GridType = AccessoryGrid.Grid[0].Link.GridType, Slot = AccessoryGrid.Grid[0].Link.Slot };

                AccessoryGrid.Grid[0].Link.Locked = true;
                AccessoryGrid.Grid[0].Link = null;

                CEnvir.Enqueue(new C.NPCHuiReset { Cell = targetLink });
            };
        }

        #region Methods

        public void Draw(DXItemCell cell, int index)
        {
            if (InterfaceLibrary == null) return;
        }

        #endregion

        #region IDisposable

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                if (AccessoryGrid != null)
                {
                    if (!AccessoryGrid.IsDisposed)
                        AccessoryGrid.Dispose();

                    AccessoryGrid = null;
                }

                if (ResetButton != null)
                {
                    if (!ResetButton.IsDisposed)
                        ResetButton.Dispose();

                    ResetButton = null;
                }
            }

        }

        #endregion
    }

    
    public sealed class NPCCDkey01Dialog : DXWindow
    {
        #region Properties

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCCDkey01Dialog()
        {
            TitleLabel.Text = "CDkey窗口";
            CloseButton.Visible = false;
            Movable = false;
            SetClientSize(new Size(200, 50));

            DXButton AddButton = new DXButton
            {
                Size = new Size(60, SmallButtonHeight),
                ButtonType = ButtonType.SmallButton,
                Label = { Text = "CDkey" },
                Location = new Point(ClientArea.Right - 135, Size.Height - 40),
                Parent = this,
            };
            AddButton.MouseClick += (o, e) =>
            {
                DXInputWindow window = new DXInputWindow("请输入CDkey码", "CDkey窗口")
                {
                    ConfirmButton = { Enabled = false },
                    Modal = true
                };
                window.ValueTextBox.TextBox.TextChanged += (o1, e1) =>
                {
                    window.ConfirmButton.Enabled = CartoonGlobals.CDkeyReg.IsMatch(window.ValueTextBox.TextBox.Text);
                };
                window.ConfirmButton.MouseClick += (o1, e1) =>
                {
                    CEnvir.Enqueue(new C.CDkey01Invite { CDkey = window.Value });
                };
            };
        }
    }
    
    public sealed class NPCCDkey02Dialog : DXWindow
    {
        #region Properties

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCCDkey02Dialog()
        {
            TitleLabel.Text = "CDkey窗口";
            CloseButton.Visible = false;
            Movable = false;
            SetClientSize(new Size(200, 50));

            DXButton AddButton = new DXButton
            {
                Size = new Size(60, SmallButtonHeight),
                ButtonType = ButtonType.SmallButton,
                Label = { Text = "CDkey" },
                Location = new Point(ClientArea.Right - 135, Size.Height - 40),
                Parent = this,
            };
            AddButton.MouseClick += (o, e) =>
            {
                DXInputWindow window = new DXInputWindow("请输入CDkey码", "CDkey窗口")
                {
                    ConfirmButton = { Enabled = false },
                    Modal = true
                };
                window.ValueTextBox.TextBox.TextChanged += (o1, e1) =>
                {
                    window.ConfirmButton.Enabled = CartoonGlobals.CDkeyReg.IsMatch(window.ValueTextBox.TextBox.Text);
                };
                window.ConfirmButton.MouseClick += (o1, e1) =>
                {
                    CEnvir.Enqueue(new C.CDkey02Invite { CDkey = window.Value });
                };
            };
        }
    }
    
    public sealed class NPCCDkey03Dialog : DXWindow
    {
        #region Properties

        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        #endregion

        public NPCCDkey03Dialog()
        {
            TitleLabel.Text = "CDkey窗口";
            CloseButton.Visible = false;
            Movable = false;
            SetClientSize(new Size(200, 50));

            DXButton AddButton = new DXButton
            {
                Size = new Size(60, SmallButtonHeight),
                ButtonType = ButtonType.SmallButton,
                Label = { Text = "CDkey" },
                Location = new Point(ClientArea.Right - 135, Size.Height - 40),
                Parent = this,
            };
            AddButton.MouseClick += (o, e) =>
            {
                DXInputWindow window = new DXInputWindow("请输入CDkey码", "CDkey窗口")
                {
                    ConfirmButton = { Enabled = false },
                    Modal = true
                };
                window.ValueTextBox.TextBox.TextChanged += (o1, e1) =>
                {
                    window.ConfirmButton.Enabled = CartoonGlobals.CDkeyReg.IsMatch(window.ValueTextBox.TextBox.Text);
                };
                window.ConfirmButton.MouseClick += (o1, e1) =>
                {
                    CEnvir.Enqueue(new C.CDkey03Invite { CDkey = window.Value });
                };
            };
        }
    }
    public class NPCWeaponCraftWindow : DXWindow
    {
        public override WindowType Type => WindowType.None;
        public override bool CustomSize => false;
        public override bool AutomaticVisiblity => false;

        private DXComboBox ClassComboBox;

        private DXImageControl PreviewImageBox;


        public DXItemGrid TemplateCell;

        public DXItemGrid YellowCell;
        public DXItemGrid BlueCell;
        public DXItemGrid RedCell;
        public DXItemGrid PurpleCell;
        public DXItemGrid GreenCell;
        public DXItemGrid GreyCell;

        private DXLabel ClassLabel;

        private DXButton AttemptButton;


        #region RequiredClass

        public RequiredClass RequiredClass
        {
            get { return _RequiredClass; }
            set
            {
                if (_RequiredClass == value) return;

                RequiredClass oldValue = _RequiredClass;
                _RequiredClass = value;

                OnRequiredClassChanged(oldValue, value);
            }
        }
        private RequiredClass _RequiredClass;
        public event EventHandler<EventArgs> RequiredClassChanged;
        public virtual void OnRequiredClassChanged(RequiredClass oValue, RequiredClass nValue)
        {

            if (TemplateCell.Grid[0].Item == null || TemplateCell.Grid[0].Item.Info.Effect == ItemEffect.WeaponTemplate)
            {
                switch (RequiredClass)
                {
                    case RequiredClass.None:
                        PreviewImageBox.Index = 1110;
                        break;
                    case RequiredClass.Warrior:
                        PreviewImageBox.Index = 1111;
                        break;
                    case RequiredClass.Wizard:
                        PreviewImageBox.Index = 1112;
                        break;
                    case RequiredClass.Taoist:
                        PreviewImageBox.Index = 1113;
                        break;
                    case RequiredClass.Assassin:
                        PreviewImageBox.Index = 1114;
                        break;

                }
            }
            else
            {
                PreviewImageBox.Index = TemplateCell.Grid[0].Item.Info.Image;
            }

            AttemptButton.Enabled = CanCraft;

            RequiredClassChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion


        public long Cost
        {
            get
            {

                long cost = CartoonGlobals.CraftWeaponPercentCost;

                if (TemplateCell.Grid[0].Item != null && TemplateCell.Grid[0].Item.Info.Effect != ItemEffect.WeaponTemplate)
                {
                    switch (TemplateCell.Grid[0].Item.Info.Rarity)
                    {
                        case Rarity.Common:
                            cost = CartoonGlobals.CommonCraftWeaponPercentCost;
                            break;
                        case Rarity.Superior:
                            cost = CartoonGlobals.SuperiorCraftWeaponPercentCost;
                            break;
                        case Rarity.Elite:
                            cost = CartoonGlobals.EliteCraftWeaponPercentCost;
                            break;
                    }
                }

                return cost;
            }
        }

        public bool CanCraft => Cost <= GameScene.Game.User.Gold && TemplateCell.Grid[0].Link != null && RequiredClass != RequiredClass.None;

        public NPCWeaponCraftWindow()
        {
            TitleLabel.Text = "武器工艺";

            HasFooter = false;

            SetClientSize(new Size(250, 280));

            DXLabel label = new DXLabel
            {
                Text = "模板 / 武器",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + (ClientArea.Width - label.Size.Width) / 2 + 50, ClientArea.Y);

            TemplateCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.WeaponCraftTemplate,
                Linked = true,
            };
            TemplateCell.Location = new Point(label.Location.X + (label.Size.Width - TemplateCell.Size.Width) / 2, label.Location.Y + label.Size.Height + 5);
            TemplateCell.Grid[0].LinkChanged += (o, e) =>
            {
                if (TemplateCell.Grid[0].Item == null || TemplateCell.Grid[0].Item.Info.Effect == ItemEffect.WeaponTemplate)
                {
                    ClassLabel.Text = "职业:";
                    switch (RequiredClass)
                    {
                        case RequiredClass.None:
                            PreviewImageBox.Index = 1110;
                            break;
                        case RequiredClass.Warrior:
                            PreviewImageBox.Index = 1111;
                            break;
                        case RequiredClass.Wizard:
                            PreviewImageBox.Index = 1112;
                            break;
                        case RequiredClass.Taoist:
                            PreviewImageBox.Index = 1113;
                            break;
                        case RequiredClass.Assassin:
                            PreviewImageBox.Index = 1114;
                            break;

                    }
                }
                else
                {
                    ClassLabel.Text = "状态:";
                    PreviewImageBox.Index = TemplateCell.Grid[0].Item.Info.Image;
                }

                ClassLabel.Location = new Point(ClientArea.X + (ClientArea.Width - ClassLabel.Size.Width) / 2, ClientArea.Y + 185);

                AttemptButton.Enabled = CanCraft;
            };


            label = new DXLabel
            {
                Text = "黄色",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + (ClientArea.Width - label.Size.Width) / 2, ClientArea.Y + 60);
            YellowCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.WeaponCraftYellow,
                Linked = true,
            };
            YellowCell.Location = new Point(label.Location.X + (label.Size.Width - YellowCell.Size.Width) / 2, label.Location.Y + label.Size.Height + 5);

            label = new DXLabel
            {
                Text = "蓝色",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + (ClientArea.Width - label.Size.Width) / 2 + 50, ClientArea.Y + 60);
            BlueCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.WeaponCraftBlue,
                Linked = true,
            };
            BlueCell.Location = new Point(label.Location.X + (label.Size.Width - BlueCell.Size.Width) / 2, label.Location.Y + label.Size.Height + 5);

            label = new DXLabel
            {
                Text = "红色",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + (ClientArea.Width - label.Size.Width) / 2 + 100, ClientArea.Y + 60);
            RedCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.WeaponCraftRed,
                Linked = true,
            };
            RedCell.Location = new Point(label.Location.X + (label.Size.Width - RedCell.Size.Width) / 2, label.Location.Y + label.Size.Height + 5);

            label = new DXLabel
            {
                Text = "紫色",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + (ClientArea.Width - label.Size.Width) / 2, ClientArea.Y + 120);

            PurpleCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.WeaponCraftPurple,
                Linked = true,
            };
            PurpleCell.Location = new Point(label.Location.X + (label.Size.Width - PurpleCell.Size.Width) / 2, label.Location.Y + label.Size.Height + 5);

            label = new DXLabel
            {
                Text = "绿色",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + (ClientArea.Width - label.Size.Width) / 2 + 50, ClientArea.Y + 120);

            GreenCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.WeaponCraftGreen,
                Linked = true,
            };
            GreenCell.Location = new Point(label.Location.X + (label.Size.Width - GreenCell.Size.Width) / 2, label.Location.Y + label.Size.Height + 5);

            label = new DXLabel
            {
                Text = "灰色",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            label.Location = new Point(ClientArea.X + (ClientArea.Width - label.Size.Width) / 2 + 100, ClientArea.Y + 120);

            GreyCell = new DXItemGrid
            {
                GridSize = new Size(1, 1),
                Parent = this,
                GridType = GridType.WeaponCraftGrey,
                Linked = true,
            };
            GreyCell.Location = new Point(label.Location.X + (label.Size.Width - GreyCell.Size.Width) / 2, label.Location.Y + label.Size.Height + 5);


            ClassLabel = new DXLabel
            {
                Text = "职业:",
                Parent = this,
                Font = new Font(Config.FontName, CEnvir.FontSize(8F), FontStyle.Underline)
            };
            ClassLabel.Location = new Point(ClientArea.X + (ClientArea.Width - ClassLabel.Size.Width) / 2, ClientArea.Y + 185);
            #region Class
            ClassComboBox = new DXComboBox
            {
                Parent = this,
                Size = new Size(GreenCell.Size.Width + 48, DXComboBox.DefaultNormalHeight),
            };
            ClassComboBox.Location = new Point(GreenCell.Location.X + 1, ClientArea.Y + 185);
            ClassComboBox.SelectedItemChanged += (o, e) =>
            {
                RequiredClass = (RequiredClass?)ClassComboBox.SelectedItem ?? RequiredClass.None;
            };

            new DXListBoxItem
            {
                Parent = ClassComboBox.ListBox,
                Label = { Text = $"无" },
                Item = RequiredClass.None
            };

            new DXListBoxItem
            {
                Parent = ClassComboBox.ListBox,
                Label = { Text = $"战士" },
                Item = RequiredClass.Warrior
            };
            new DXListBoxItem
            {
                Parent = ClassComboBox.ListBox,
                Label = { Text = $"法师" },
                Item = RequiredClass.Wizard
            };
            new DXListBoxItem
            {
                Parent = ClassComboBox.ListBox,
                Label = { Text = $"道士" },
                Item = RequiredClass.Taoist
            };

            new DXListBoxItem
            {
                Parent = ClassComboBox.ListBox,
                Label = { Text = $"刺客" },
                Item = RequiredClass.Assassin
            };

            ClassComboBox.ListBox.SelectItem(RequiredClass.None);
            #endregion

            #region Preview

            PreviewImageBox = new DXImageControl
            {
                Parent = this,
                Location = new Point(ClientArea.X + 20, ClientArea.Y + ClientArea.Height / 2 - 76),
                LibraryFile = LibraryFile.Equip,
                Index = 1110,
                Border = true,
            };

            #endregion



            AttemptButton = new DXButton
            {
                Parent = this,
                Location = new Point(YellowCell.Location.X, ClientArea.Y + 260),
                Size = new Size(YellowCell.Size.Width + 99, SmallButtonHeight),
                ButtonType = ButtonType.SmallButton,
                Label = { Text = "制作" }
            };
            AttemptButton.MouseClick += (o, e) =>
            {
                if (GameScene.Game.Observer) return;


                if (TemplateCell.Grid[0].Link == null) return;

                C.NPCWeaponCraft packet = new C.NPCWeaponCraft
                {
                    Class = RequiredClass,

                    Template = new CellLinkInfo { Count = TemplateCell.Grid[0].LinkedCount, GridType = TemplateCell.Grid[0].Link.GridType, Slot = TemplateCell.Grid[0].Link.Slot }
                };

                TemplateCell.Grid[0].Link.Locked = true;
                TemplateCell.Grid[0].Link = null;

                if (YellowCell.Grid[0].Link != null)
                {
                    packet.Yellow = new CellLinkInfo { Count = YellowCell.Grid[0].LinkedCount, GridType = YellowCell.Grid[0].Link.GridType, Slot = YellowCell.Grid[0].Link.Slot };
                    YellowCell.Grid[0].Link.Locked = true;
                    YellowCell.Grid[0].Link = null;
                }

                if (BlueCell.Grid[0].Link != null)
                {
                    packet.Blue = new CellLinkInfo { Count = BlueCell.Grid[0].LinkedCount, GridType = BlueCell.Grid[0].Link.GridType, Slot = BlueCell.Grid[0].Link.Slot };
                    BlueCell.Grid[0].Link.Locked = true;
                    BlueCell.Grid[0].Link = null;
                }

                if (RedCell.Grid[0].Link != null)
                {
                    packet.Red = new CellLinkInfo { Count = RedCell.Grid[0].LinkedCount, GridType = RedCell.Grid[0].Link.GridType, Slot = RedCell.Grid[0].Link.Slot };
                    RedCell.Grid[0].Link.Locked = true;
                    RedCell.Grid[0].Link = null;
                }

                if (PurpleCell.Grid[0].Link != null)
                {
                    packet.Purple = new CellLinkInfo { Count = PurpleCell.Grid[0].LinkedCount, GridType = PurpleCell.Grid[0].Link.GridType, Slot = PurpleCell.Grid[0].Link.Slot };
                    PurpleCell.Grid[0].Link.Locked = true;
                    PurpleCell.Grid[0].Link = null;
                }

                if (GreenCell.Grid[0].Link != null)
                {
                    packet.Green = new CellLinkInfo { Count = GreenCell.Grid[0].LinkedCount, GridType = GreenCell.Grid[0].Link.GridType, Slot = GreenCell.Grid[0].Link.Slot };
                    GreenCell.Grid[0].Link.Locked = true;
                    GreenCell.Grid[0].Link = null;
                }

                if (GreyCell.Grid[0].Link != null)
                {
                    packet.Grey = new CellLinkInfo { Count = GreyCell.Grid[0].LinkedCount, GridType = GreyCell.Grid[0].Link.GridType, Slot = GreyCell.Grid[0].Link.Slot };
                    GreyCell.Grid[0].Link.Locked = true;
                    GreyCell.Grid[0].Link = null;
                }

                CEnvir.Enqueue(packet);
                AttemptButton.Enabled = CanCraft;
            };
        }

    }

}